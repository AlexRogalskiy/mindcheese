/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

var browser = (function () {
    'use strict';

    (function() {
        const env = {"BUILD":"production"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    const BEFOREID_FIRST = "_first_";
    const BEFOREID_LAST = "_last_";
    const KEYCODE_ENTER = 13;
    const KEYCODE_ESC = 27;

    class Size {
        constructor(width, height) {
            this.width = width;
            this.height = height;
        }
    }

    class CenterOfNodeOffsetFromRootNode {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }

    class OffsetFromTopLeftOfMcnodes {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }

    class RootNodeOffsetFromTopLeftOfMcnodes extends OffsetFromTopLeftOfMcnodes {
        convertCenterOfNodeOffsetFromRootNode(offset) {
            return new OffsetFromTopLeftOfMcnodes(this.x + offset.x, this.y + offset.y);
        }
    }

    class Point {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }
    class ScrollSnapshot {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }

    /**
     * View renderer
     */
    class ViewProvider {
        /**
         *
         * @param mindCheese MindCheese instance
         * @param hmargin ???
         * @param vmargin ???
         * @param graph instance of GraphCanvas
         * @param textFormatter Formatter of the text
         * @param layoutEngine
         * @param pSpace Horizontal spacing between node and connection line (to place node adder)
         */
        constructor(mindCheese, hmargin, vmargin, graph, textFormatter, layoutEngine, pSpace) {
            this.layoutResult = null;
            this.mindCheese = mindCheese;
            this.textFormatter = textFormatter;
            this.layoutEngine = layoutEngine;
            this.pSpace = pSpace;
            this.mcnodes = document.createElement("mcnodes");
            this.mcnodes.addEventListener("keydown", (e) => {
                const el = e.target;
                console.debug(`keydown=${e.keyCode}==${KEYCODE_ENTER} tagName=${el.tagName} shiftkey=${e.shiftKey}`);
                if (el.tagName != "MCNODE") {
                    console.log(`It's not MCNODE. ${el.tagName}`);
                    return;
                }
                // https://qiita.com/ledsun/items/31e43a97413dd3c8e38e
                // keyCode is deprecated field. But it's a hack for Japanese IME.
                // noinspection JSDeprecatedSymbols
                if ((e.keyCode === KEYCODE_ENTER && !e.shiftKey) ||
                    e.keyCode == KEYCODE_ESC) {
                    console.log("editNodeEnd");
                    e.stopPropagation();
                    e.preventDefault();
                    this.editNodeEnd();
                }
            });
            // adjust size dynamically.
            this.mcnodes.addEventListener("keyup", () => {
                this.renderAgain();
            });
            this.mcnodes.addEventListener("input", () => {
                // TODO is this required?
                this.renderAgain();
            });
            // when the element lost focus.
            this.mcnodes.addEventListener("blur", (e) => {
                const el = e.target;
                if (el.tagName.toLowerCase() != "mcnode") {
                    return;
                }
                this.editNodeEnd();
            }, true);
            this.mindCheeseInnerElement = document.createElement("div");
            this.mindCheeseInnerElement.className = "mindcheese-inner";
            this.mindCheeseInnerElement.appendChild(graph.element());
            this.mindCheeseInnerElement.appendChild(this.mcnodes);
            this.size = new Size(0, 0);
            this.selectedNode = null;
            this.editingNode = null;
            this.hMargin = hmargin;
            this.vMargin = vmargin;
            this.graph = graph;
        }
        init(container) {
            console.debug("view.init");
            container.appendChild(this.mindCheeseInnerElement);
        }
        getBindedNodeId(element) {
            if (element == null) {
                return null;
            }
            const tagName = element.tagName.toLowerCase();
            if (tagName === "mcnodes" || tagName === "body" || tagName === "html") {
                return null;
            }
            if (tagName === "mcnode" || tagName == "mcadder") {
                return element.getAttribute("nodeid");
            }
            else {
                return this.getBindedNodeId(element.parentElement);
            }
        }
        reset() {
            console.debug("view.reset");
            this.selectedNode = null;
            this.graph.clear();
            this.clearNodes();
            this.resetTheme();
        }
        resetTheme() {
            const themeName = this.mindCheese.options.theme;
            if (themeName) {
                this.mcnodes.parentElement.className = "theme-" + themeName;
            }
            else {
                this.mcnodes.parentElement.className = "";
            }
        }
        createNodes() {
            const nodes = this.mindCheese.mind.nodes;
            const documentFragment = document.createDocumentFragment();
            for (const node of Object.values(nodes)) {
                this.createNodeElement(node, documentFragment);
            }
            this.mcnodes.appendChild(documentFragment);
        }
        cacheNodeSize() {
            const nodes = this.mindCheese.mind.nodes;
            for (const node of Object.values(nodes)) {
                ViewProvider.initNodeSize(node);
            }
        }
        getCanvasSize() {
            const minSize = this.layoutResult.getBounds(this.mindCheese.mind).size;
            const minWidth = minSize.width + this.hMargin * 2;
            const minHeight = minSize.height + this.vMargin * 2;
            const clientW = this.mindCheeseInnerElement.clientWidth;
            const clientH = this.mindCheeseInnerElement.clientHeight;
            console.log(`expandSize: ${clientH} ${minHeight}`);
            return new Size(Math.max(clientW, minWidth), Math.max(clientH, minHeight));
        }
        static initNodeSize(node) {
            const viewData = node.data.view;
            viewData.elementSizeCache = new Size(viewData.element.clientWidth, viewData.element.clientHeight);
        }
        addNode(node) {
            this.createNodeElement(node, this.mcnodes);
            ViewProvider.initNodeSize(node);
        }
        createNodeElement(node, parentNode) {
            const nodeEl = document.createElement("mcnode");
            if (node.isroot) {
                nodeEl.className = "root";
            }
            else {
                const adderElement = document.createElement("mcadder");
                adderElement.innerText = "-";
                adderElement.setAttribute("nodeid", node.id);
                adderElement.style.visibility = "hidden";
                parentNode.appendChild(adderElement);
                node.data.view.adder = adderElement;
            }
            if (node.topic) {
                nodeEl.innerHTML = this.textFormatter.render(node.topic);
            }
            nodeEl.setAttribute("nodeid", node.id);
            nodeEl.style.visibility = "hidden";
            parentNode.appendChild(nodeEl);
            node.data.view.element = nodeEl;
        }
        removeNode(node) {
            if (this.selectedNode != null && this.selectedNode.id == node.id) {
                this.selectedNode = null;
            }
            if (this.editingNode != null && this.editingNode.id == node.id) {
                node.data.view.element.contentEditable = "false";
                this.editingNode = null;
            }
            for (let i = 0, l = node.children.length; i < l; i++) {
                this.removeNode(node.children[i]);
            }
            if (node.data.view) {
                const element = node.data.view.element;
                const adder = node.data.view.adder;
                this.mcnodes.removeChild(element);
                this.mcnodes.removeChild(adder);
                node.data.view.element = null;
                node.data.view.adder = null;
            }
        }
        updateNode(node) {
            const viewData = node.data.view;
            const element = viewData.element;
            if (node.topic) {
                element.innerHTML = this.textFormatter.render(node.topic);
            }
            viewData.elementSizeCache = new Size(element.clientWidth, element.clientHeight);
        }
        selectNode(node) {
            if (this.selectedNode) {
                const el = this.selectedNode.data.view.element;
                el.classList.remove("selected");
            }
            if (node) {
                this.selectedNode = node;
                node.data.view.element.classList.add("selected");
                // Note: scrollIntoView is not the best method.
                this.adjustScrollBar(node);
            }
        }
        // Adjust the scroll bar. show node in the browser.
        adjustScrollBar(node) {
            const nodeEl = node.data.view.element;
            const panelEl = this.mindCheeseInnerElement;
            if (panelEl.scrollLeft > nodeEl.offsetLeft) {
                console.debug(`select_node! left adjust`);
                panelEl.scrollLeft = Math.max(nodeEl.offsetLeft - 10, 0);
            }
            if (nodeEl.offsetLeft + nodeEl.clientWidth >=
                panelEl.scrollLeft + panelEl.clientWidth) {
                console.debug("select_node! right adjust");
                panelEl.scrollLeft = Math.max(panelEl.scrollLeft +
                    (nodeEl.offsetLeft +
                        nodeEl.clientWidth +
                        30 -
                        (panelEl.scrollLeft + panelEl.clientWidth)), 0);
            }
            if (panelEl.scrollTop > nodeEl.offsetTop) {
                console.debug("select_node! top adjust");
                panelEl.scrollTop = Math.max(nodeEl.offsetTop - 10, 0);
            }
            if (nodeEl.offsetTop + nodeEl.clientHeight >=
                panelEl.scrollTop + panelEl.clientHeight) {
                console.debug("select_node! bottom adjust");
                panelEl.scrollTop = Math.max(panelEl.scrollTop +
                    (nodeEl.offsetTop +
                        nodeEl.clientHeight +
                        30 -
                        (panelEl.scrollTop + panelEl.clientHeight)), 0);
            }
        }
        selectClear() {
            if (this.selectedNode) {
                const el = this.selectedNode.data.view.element;
                el.classList.remove("selected");
            }
        }
        isEditing() {
            return !!this.editingNode;
        }
        editNodeBegin(node) {
            if (!node.topic) {
                console.warn("don't edit image nodes");
                return;
            }
            if (this.editingNode != null) {
                this.editNodeEnd();
            }
            this.editingNode = node;
            const element = node.data.view.element;
            element.contentEditable = "true";
            element.innerText = node.topic;
            node.data.view.elementSizeCache = new Size(element.clientWidth, element.clientHeight);
            // https://stackoverflow.com/questions/6139107/programmatically-select-text-in-a-contenteditable-html-element
            function selectElementContents(el) {
                const range = document.createRange();
                range.selectNodeContents(el);
                const sel = window.getSelection();
                sel.removeAllRanges();
                sel.addRange(range);
            }
            selectElementContents(element);
            element.focus();
            this.renderAgain();
        }
        editNodeEnd() {
            console.log(`editNodeEnd(editingNode=${this.editingNode})`);
            if (this.editingNode != null) {
                const node = this.editingNode;
                this.editingNode = null;
                const element = node.data.view.element;
                element.contentEditable = "false";
                const topic = element.innerText;
                if (!topic ||
                    topic.replace(/\s*/, "").length == 0 ||
                    node.topic === topic) {
                    console.debug("Calling updateNode");
                    element.innerHTML = this.textFormatter.render(node.topic);
                    node.data.view.elementSizeCache = new Size(element.clientWidth, element.clientHeight);
                    this.renderAgain();
                }
                else {
                    console.debug("Calling updateNode");
                    this.mindCheese.updateNode(node.id, topic);
                }
            }
        }
        // get the center point offset
        getOffsetOfTheRootNode() {
            const bounds = this.layoutResult.getBounds(this.mindCheese.mind);
            console.log(`getViewOffset: size.w=${this.size.width}, e=${bounds.e}, w=${bounds.w}`);
            const x = -bounds.w +
                this.mindCheese.mind.root.data.view.elementSizeCache.width / 2;
            // const x = (this.size.w - bounds.e - bounds.w) / 2;
            const y = -bounds.n +
                this.mindCheese.mind.root.data.view.elementSizeCache.height / 2;
            return new RootNodeOffsetFromTopLeftOfMcnodes(x, y);
        }
        resize() {
            this.graph.setSize(1, 1);
            this.mcnodes.style.width = "1px";
            this.mcnodes.style.height = "1px";
            this.renderAgain();
        }
        // Display root position at center of container element.
        centerRoot() {
            const outerW = this.mindCheeseInnerElement.clientWidth;
            const outerH = this.mindCheeseInnerElement.clientHeight;
            if (this.size.width > outerW) {
                const offset = this.getOffsetOfTheRootNode();
                this.mindCheeseInnerElement.scrollLeft = offset.x - outerW / 2;
            }
            if (this.size.height > outerH) {
                this.mindCheeseInnerElement.scrollTop = (this.size.height - outerH) / 2;
            }
        }
        // TODO pull this method to MindCheese?
        renderAgain() {
            this.layoutResult = this.layoutEngine.layout(this.mindCheese.mind);
            this.size = this.getCanvasSize();
            console.log(`doShow: ${this.size.width} ${this.size.height}`);
            this.graph.setSize(this.size.width, this.size.height);
            this.mindCheese.draggable.resize(this.size.width, this.size.height);
            this.mcnodes.parentElement.style.width = this.size.width + "px";
            this.mcnodes.parentElement.style.height = this.size.height + "px";
            this.showNodes();
            this.showLines();
        }
        saveScroll(node) {
            const viewData = node.data.view;
            return new ScrollSnapshot(parseInt(viewData.element.style.left) -
                this.mindCheeseInnerElement.scrollLeft, parseInt(viewData.element.style.top) -
                this.mindCheeseInnerElement.scrollTop);
        }
        restoreScroll(node, scrollSnapshot) {
            const viewData = node.data.view;
            this.mindCheeseInnerElement.scrollLeft =
                parseInt(viewData.element.style.left) - scrollSnapshot.x;
            this.mindCheeseInnerElement.scrollTop =
                parseInt(viewData.element.style.top) - scrollSnapshot.y;
        }
        clearNodes() {
            const mind = this.mindCheese.mind;
            if (mind == null) {
                return;
            }
            const nodes = mind.nodes;
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                node.data.view.element = null;
                node.data.view.adder = null;
            }
            this.mcnodes.innerHTML = "";
        }
        showNodes() {
            const nodes = this.mindCheese.mind.nodes;
            const offset = this.getOffsetOfTheRootNode();
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                const viewData = node.data.view;
                const nodeElement = viewData.element;
                const p = this.layoutResult.getTopLeft(node, this.graph.lineWidth);
                viewData.elementTopLeft = offset.convertCenterOfNodeOffsetFromRootNode(p);
                nodeElement.style.left = viewData.elementTopLeft.x + "px";
                nodeElement.style.top = viewData.elementTopLeft.y + "px";
                nodeElement.style.display = "";
                nodeElement.style.visibility = "visible";
                if (!node.isroot && node.children.length == 0) {
                    const adder = viewData.adder;
                    const adderText = "+";
                    const adderPoint = offset.convertCenterOfNodeOffsetFromRootNode(this.layoutResult.getAdderPosition(node, this.pSpace));
                    adder.style.left = adderPoint.x + "px";
                    adder.style.top = adderPoint.y + "px";
                    adder.style.display = "";
                    adder.style.visibility = "visible";
                    adder.innerText = adderText;
                }
            }
        }
        showLines() {
            this.graph.clear();
            const nodes = this.mindCheese.mind.nodes;
            const offset = this.getOffsetOfTheRootNode();
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                if (node.isroot) {
                    continue;
                }
                const pin = this.layoutResult.getNodePointIn(node);
                {
                    // Draw line between previous node and next node
                    const pout = this.layoutResult.getNodePointOut(node.parent, node);
                    this.graph.drawLine(offset.convertCenterOfNodeOffsetFromRootNode(pout), offset.convertCenterOfNodeOffsetFromRootNode(pin), node.color, "round");
                }
                {
                    // Draw line under the bottom of the node
                    const pout = new CenterOfNodeOffsetFromRootNode(pin.x + node.data.view.elementSizeCache.width * node.direction, pin.y);
                    this.graph.drawLine(offset.convertCenterOfNodeOffsetFromRootNode(pout), offset.convertCenterOfNodeOffsetFromRootNode(pin), node.color, "butt");
                }
            }
        }
        getCenterOffsetOfTheNodeFromRootNode(node) {
            return this.layoutResult.getCenterOffsetOfTheNodeFromRootNode(node);
        }
    }

    class ShortcutProvider {
        constructor(mindCheese, enable, mappings) {
            this.mindCheese = mindCheese;
            this.enable = enable;
            this.mappings = this.compileHandlers(mappings);
        }
        bindKeyEvents() {
            document.addEventListener("keydown", this.handler.bind(this));
        }
        enableShortcut() {
            this.enable = true;
        }
        disableShortcut() {
            this.enable = false;
        }
        handler(e) {
            // noinspection JSDeprecatedSymbols
            if (e.which == 9) {
                e.preventDefault();
            } //prevent tab to change focus in browser
            if (this.mindCheese.view.isEditing()) {
                return true;
            }
            if (!this.enable) {
                return true;
            }
            console.debug(`ShortcutProvider.handler: ${e.code}`);
            const handlers = this.mappings[e.code];
            if (!handlers) {
                return true;
            }
            const gotFlags = (e.metaKey ? 2 /* META */ : 0) |
                (e.ctrlKey ? 4 /* CTRL */ : 0) |
                (e.altKey ? 8 /* ALT */ : 0) |
                (e.shiftKey ? 16 /* SHIFT */ : 0);
            for (const handler of handlers) {
                const [flags, code] = handler;
                if (flags === gotFlags) {
                    return code(this.mindCheese, e);
                }
            }
            return true;
        }
        compileHandlers(handlers) {
            const result = {};
            handlers.forEach((it) => {
                const [flags, keyString, code] = it;
                if (!result[keyString]) {
                    result[keyString] = [];
                }
                result[keyString].push([flags, code]);
            });
            return result;
        }
    }

    class ViewData {
        constructor() {
            this.element = null;
            this.adder = null;
            this.elementSizeCache = null;
            this.elementTopLeft = null;
        }
    }

    class RoundRobin {
        constructor(data) {
            this.data = data;
            this.index = 0;
        }
        take() {
            const v = this.data[this.index++];
            if (this.index == this.data.length) {
                this.index = 0;
            }
            return v;
        }
    }

    const COLORS = new RoundRobin([
        "#cc0000",
        "#00cc00",
        "#0000cc",
        "#00cccc",
        "#cc00cc",
        "#cccc00",
    ]);

    class MindNode {
        constructor(id, index, topic, isRoot, parent, direction) {
            if (!id) {
                throw new Error("invalid nodeid");
            }
            this.id = id;
            this.index = index;
            this.topic = topic;
            this.isroot = isRoot;
            this.parent = parent;
            this.direction = direction;
            this.children = [];
            this.data = {
                view: new ViewData(),
            };
            // console.log(`ID: ${id}`);
            if (!parent) {
                this.color = null;
            }
            else if (parent && parent.color) {
                // inherit parent's color
                this.color = parent.color;
            }
            else {
                this.color = COLORS.take();
            }
        }
        static compare(node1, node2) {
            // '-1' is alwary the last
            let r;
            const i1 = node1.index;
            const i2 = node2.index;
            if (i1 >= 0 && i2 >= 0) {
                r = i1 - i2;
            }
            else if (i1 === -1 && i2 === -1) {
                r = 0;
            }
            else if (i1 === -1) {
                r = 1;
            }
            else if (i2 === -1) {
                r = -1;
            }
            else {
                r = 0;
            }
            // console.debug(`MindNode.compare: ${i1} <> ${i2}  =  ${r}`);
            return r;
        }
        static inherited(pnode, node) {
            if (!!pnode && !!node) {
                if (pnode.id === node.id) {
                    return true;
                }
                if (pnode.isroot) {
                    return true;
                }
                const pid = pnode.id;
                let p = node;
                while (!p.isroot) {
                    p = p.parent;
                    if (p.id === pid) {
                        return true;
                    }
                }
            }
            return false;
        }
        toObject() {
            const o = {
                id: this.id,
                topic: this.topic,
                children: this.children.map((it) => it.toObject()),
            };
            if (!!this.parent && this.parent.isroot) {
                o.direction = this.direction == -1 /* LEFT */ ? "left" : "right";
            }
            return o;
        }
        applyColor(color) {
            this.color = color;
            for (let i = 0, l = this.children.length; i < l; i++) {
                this.children[i].applyColor(color);
            }
        }
    }

    class Mind {
        constructor() {
            this.root = null;
            this.selected = null;
            this.nodes = {};
        }
        getNodeById(nodeid) {
            if (nodeid in this.nodes) {
                return this.nodes[nodeid];
            }
            else {
                throw new Error(`the node[id=${nodeid}] can not be found...`);
            }
        }
        setRoot(nodeid, topic) {
            if (this.root != null) {
                throw new Error("root node is already exist");
            }
            this.root = new MindNode(nodeid, 0, topic, true, null, 0 /* CENTER */);
            this.putNode(this.root);
        }
        addNode(parentNode, nodeid, topic, idx, direction) {
            const nodeindex = idx || -1;
            let node;
            if (parentNode.isroot) {
                let d;
                if (direction == null) {
                    const children = parentNode.children;
                    const childrenLength = children.length;
                    let r = 0;
                    for (let i = 0; i < childrenLength; i++) {
                        if (children[i].direction === -1 /* LEFT */) {
                            r--;
                        }
                        else {
                            r++;
                        }
                    }
                    d = childrenLength > 1 && r > 0 ? -1 /* LEFT */ : 1 /* RIGHT */;
                }
                else {
                    d = direction === -1 /* LEFT */ ? -1 /* LEFT */ : 1 /* RIGHT */;
                }
                // console.log(
                //   `add_node source DIRECTION=${direction} DIRECTION=${d} ${topic}`
                // );
                node = new MindNode(nodeid, nodeindex, topic, false, parentNode, d);
            }
            else {
                node = new MindNode(nodeid, nodeindex, topic, false, parentNode, parentNode.direction);
            }
            this.putNode(node);
            parentNode.children.push(node);
            this.reindex(parentNode);
            return node;
        }
        getNodeBefore(node) {
            if (node.isroot) {
                return null;
            }
            const idx = node.index - 2;
            if (idx >= 0) {
                return node.parent.children[idx];
            }
            else {
                return null;
            }
        }
        // add little brother node.
        insertNodeAfter(nodeAfter, nodeid, topic) {
            const nodeIndex = nodeAfter.index + 0.5;
            // follow current direction.
            return this.addNode(nodeAfter.parent, nodeid, topic, nodeIndex, nodeAfter.direction);
        }
        getNodeAfter(node) {
            if (node.isroot) {
                return null;
            }
            const idx = node.index;
            const brothers = node.parent.children;
            if (brothers.length >= idx) {
                return node.parent.children[idx];
            }
            else {
                return null;
            }
        }
        moveNode(node, beforeid, parent, direction) {
            console.assert(node instanceof MindNode, "node should be Node");
            console.log(`move_node: ${node} ${beforeid} ${parent.id} ${direction}`);
            this.doMoveNode(node, beforeid, parent, direction);
            if (parent.color && node.color != parent.color) {
                /*
                  - root
                    - A: yellow
                    - B: red
          
                  in this case, move A as a child of B, then the expected result is:
          
                  - root
                    - A: yellow
                      - B: yellow
                 */
                node.applyColor(parent.color);
            }
        }
        flowNodeDirection(node, direction) {
            if (typeof direction === "undefined") {
                direction = node.direction;
            }
            else {
                node.direction = direction;
            }
            let len = node.children.length;
            while (len--) {
                this.flowNodeDirection(node.children[len], direction);
            }
        }
        moveNodeInternal(node, beforeid) {
            if (!!node && !!beforeid) {
                if (beforeid === BEFOREID_LAST) {
                    node.index = -1;
                    this.reindex(node.parent);
                }
                else if (beforeid === BEFOREID_FIRST) {
                    node.index = 0;
                    this.reindex(node.parent);
                }
                else {
                    /*
                     * Before:
                     *   - B <- beforeid = 3
                     *   - A <- node     = 4
                     *
                     * After:
                     *   - A <- node     = 3-0.5=2.5
                     *   - B <- beforeid = 3
                     */
                    const nodeBefore = beforeid ? this.getNodeById(beforeid) : null;
                    if (nodeBefore != null &&
                        nodeBefore.parent != null &&
                        nodeBefore.parent.id === node.parent.id) {
                        node.index = nodeBefore.index - 0.5;
                        this.reindex(node.parent);
                    }
                    else {
                        console.error(`Missing node_before: ${beforeid}`);
                    }
                }
            }
            return node;
        }
        doMoveNode(node, beforeid, parent, direction) {
            console.log(`_move_node: node=${node}, ${beforeid}, parentid=${parent.id}, ${direction}`);
            if (!!node && !!parent.id) {
                console.assert(node.parent, `node.parent is null: ${node}`);
                if (node.parent.id !== parent.id) {
                    console.log(`_move_node: node.parent.id!==parentid`);
                    // remove from parent's children
                    const sibling = node.parent.children;
                    let si = sibling.length;
                    while (si--) {
                        console.assert(sibling[si], "sibling[si] is null");
                        if (sibling[si].id === node.id) {
                            sibling.splice(si, 1);
                            break;
                        }
                    }
                    node.parent = this.getNodeById(parent.id);
                    node.parent.children.push(node);
                }
                if (node.parent.isroot) {
                    node.direction = direction;
                }
                else {
                    node.direction = node.parent.direction;
                }
                this.moveNodeInternal(node, beforeid);
                this.flowNodeDirection(node, direction);
            }
        }
        removeNode(node) {
            if (node.isroot) {
                throw new Error("fail, can not remove root node");
            }
            if (this.selected != null && this.selected.id === node.id) {
                this.selected = null;
            }
            // clean all subordinate nodes
            const children = node.children;
            let ci = children.length;
            while (ci--) {
                this.removeNode(children[ci]);
            }
            // clean all children
            children.length = 0;
            // remove from parent's children
            const sibling = node.parent.children;
            let si = sibling.length;
            while (si--) {
                if (sibling[si].id === node.id) {
                    sibling.splice(si, 1);
                    break;
                }
            }
            // remove from global nodes
            delete this.nodes[node.id];
            return true;
        }
        putNode(node) {
            if (node.id in this.nodes) {
                throw new Error("the nodeid '" + node.id + "' has been already exist.");
            }
            this.nodes[node.id] = node;
        }
        reindex(node) {
            // console.debug(
            //   `Before Mind._reindex: ` +
            //     node.children.map((n) => `${n.topic}: ${n.index}`).join("\n")
            // );
            node.children.sort(MindNode.compare);
            for (let i = 0; i < node.children.length; i++) {
                node.children[i].index = i + 1;
            }
            // console.debug(
            //   `After Mind._reindex: ` +
            //     node.children.map((n) => `${n.topic}: ${n.index}`).join("\n")
            // );
        }
    }

    function findMcnode(htmlElement) {
        let el = htmlElement;
        while (el) {
            if (el.tagName.toLowerCase() == "mcnode") {
                return el;
            }
            el = el.parentElement;
        }
        return null;
    }

    function getClientFromEvent(e) {
        if (e instanceof MouseEvent) {
            return e;
        }
        else if (e instanceof TouchEvent) {
            return e.touches[0];
        }
        else {
            throw new Error("Unknown event type");
        }
    }
    class ClosePoint {
        constructor(node, direction, sp, np) {
            this.node = node;
            this.direction = direction;
            this.sp = sp;
            this.np = np;
        }
    }
    class Draggable {
        constructor(mindCheese) {
            this.clientHW = 0;
            this.clientHH = 0;
            this.lineWidth = 5;
            this.lookupDelay = 500;
            this.lookupInterval = 80;
            this.mindCheese = mindCheese;
            this.canvasElement = Draggable.createCanvas();
            this.mindCheese.view.mindCheeseInnerElement.appendChild(this.canvasElement);
            this.canvasContext = this.canvasElement.getContext("2d");
            this.shadow = Draggable.createShadow();
            this.shadowW = 0;
            this.shadowH = 0;
            this.activeNode = null;
            this.targetNode = null;
            this.targetDirect = null;
            this.clientW = 0;
            this.clientH = 0;
            this.offsetX = 0;
            this.offsetY = 0;
            this.hlookupDelay = 0;
            this.hlookupTimer = 0;
            this.capture = false;
            this.moved = false;
        }
        resize(width, height) {
            this.mindCheese.view.mcnodes.appendChild(this.shadow);
            this.canvasElement.width = width;
            this.canvasElement.height = height;
        }
        static createCanvas() {
            const canvasElement = document.createElement("canvas");
            canvasElement.className = "mindcheese-draggable-graph";
            return canvasElement;
        }
        static createShadow() {
            const mcnode = document.createElement("mcnode");
            mcnode.style.visibility = "hidden";
            mcnode.style.zIndex = "3";
            mcnode.style.cursor = "move";
            mcnode.style.opacity = "0.7";
            return mcnode;
        }
        resetShadow(el) {
            const s = this.shadow.style;
            this.shadow.innerHTML = el.innerHTML;
            s.left = el.style.left;
            s.top = el.style.top;
            s.width = el.style.width;
            s.height = el.style.height;
            s.backgroundImage = el.style.backgroundImage;
            s.backgroundSize = el.style.backgroundSize;
            s.transform = el.style.transform;
            this.shadowW = this.shadow.clientWidth;
            this.shadowH = this.shadow.clientHeight;
        }
        showShadow() {
            if (!this.moved) {
                this.shadow.style.visibility = "visible";
            }
        }
        hideShadow() {
            this.shadow.style.visibility = "hidden";
        }
        magnetShadow(sp, np) {
            this.canvasContext.lineWidth = this.lineWidth;
            this.canvasContext.strokeStyle = "rgba(0,0,0,0.3)";
            this.canvasContext.lineCap = "round";
            this.clearLines();
            this.canvasLineTo(sp.x, sp.y, np.x, np.y);
        }
        clearLines() {
            this.canvasContext.clearRect(0, 0, this.mindCheese.view.size.width, this.mindCheese.view.size.height);
        }
        canvasLineTo(x1, y1, x2, y2) {
            this.canvasContext.beginPath();
            this.canvasContext.moveTo(x1, y1);
            this.canvasContext.bezierCurveTo(x1 + ((x2 - x1) * 2) / 3, y1, x1, y2, x2, y2);
            this.canvasContext.stroke();
        }
        doLookupCloseNode() {
            const root = this.mindCheese.mind.root;
            const rootLocation = root.data.view.elementTopLeft;
            const rootSize = root.data.view.elementSizeCache;
            const rootX = rootLocation.x + rootSize.width / 2;
            const sw = this.shadowW;
            const sh = this.shadowH;
            const sx = this.shadow.offsetLeft; // offset of the moving node
            const sy = this.shadow.offsetTop;
            const direct = sx + sw / 2 >= rootX ? 1 /* RIGHT */ : -1 /* LEFT */;
            const nodes = this.mindCheese.mind.nodes;
            let minDistance = Number.MAX_VALUE;
            let closestNode = null;
            let closestPoint = null;
            let shadowPoint = null;
            for (const nodeid in nodes) {
                let np, sp;
                const node = nodes[nodeid];
                let distance = 0;
                if (node.isroot || node.direction == direct) {
                    if (node.id == this.activeNode.id) {
                        continue;
                    }
                    const ns = node.data.view.elementSizeCache;
                    const nl = node.data.view.elementTopLeft;
                    if (direct == 1 /* RIGHT */) {
                        if (sx - nl.x - ns.width <= 0) {
                            continue;
                        }
                        distance =
                            Math.abs(sx - nl.x - ns.width) +
                                Math.abs(sy + sh / 2 - nl.y - ns.height / 2);
                        np = new Point(nl.x + ns.width - this.lineWidth, nl.y + (node.isroot ? ns.height / 2 : ns.height));
                        sp = new Point(sx + this.lineWidth, sy + sh);
                    }
                    else {
                        if (nl.x - sx - sw <= 0) {
                            continue;
                        }
                        distance =
                            Math.abs(sx + sw - nl.x) +
                                Math.abs(sy + sh / 2 - nl.y - ns.height / 2);
                        np = new Point(nl.x + this.lineWidth, nl.y + (node.isroot ? ns.height / 2 : ns.height));
                        sp = new Point(sx + sw - this.lineWidth, sy + sh);
                    }
                    if (distance < minDistance) {
                        closestNode = node;
                        closestPoint = np;
                        shadowPoint = sp;
                        minDistance = distance;
                    }
                }
            }
            if (closestNode) {
                return new ClosePoint(closestNode, direct, shadowPoint, closestPoint);
            }
            else {
                return null;
            }
        }
        lookupCloseNode() {
            const closePointOrNull = this.doLookupCloseNode();
            if (closePointOrNull) {
                this.magnetShadow(closePointOrNull.sp, closePointOrNull.np);
                this.targetNode = closePointOrNull.node;
                this.targetDirect = closePointOrNull.direction;
            }
        }
        eventBind(container) {
            container.addEventListener("mousedown", this.dragstart.bind(this), false);
            container.addEventListener("mousemove", this.drag.bind(this), false);
            container.addEventListener("mouseup", this.dragend.bind(this), false);
            {
                let tapCount = 0;
                container.addEventListener("touchstart", (e) => {
                    if (!tapCount) {
                        // single tap
                        ++tapCount;
                        this.dragstart(e);
                        setTimeout(function () {
                            tapCount = 0;
                        }, 350);
                    }
                    else {
                        // double tap
                        this.mindCheese.dblclickHandle(e);
                    }
                }, { passive: true });
            }
            container.addEventListener("touchmove", this.drag.bind(this), {
                passive: true,
            });
            container.addEventListener("touchend", this.dragend.bind(this), false);
        }
        dragstart(e) {
            if (!this.mindCheese.isEditable()) {
                return;
            }
            if (this.capture) {
                return;
            }
            this.activeNode = null;
            const viewProvider = this.mindCheese.view;
            const el = findMcnode(e.target);
            if (!el) {
                return;
            }
            const nodeid = viewProvider.getBindedNodeId(el);
            if (nodeid) {
                const node = this.mindCheese.mind.getNodeById(nodeid);
                if (!node.isroot) {
                    this.resetShadow(el);
                    this.activeNode = node;
                    const client = getClientFromEvent(e);
                    this.offsetX = client.clientX - el.offsetLeft;
                    this.offsetY = client.clientY - el.offsetTop;
                    // this.offsetX = (e.clientX || e.touches[0].clientX) - el.offsetLeft;
                    // this.offset_y = (e.clientY || e.touches[0].clientY) - el.offsetTop;
                    this.clientHW = Math.floor(el.clientWidth / 2);
                    this.clientHH = Math.floor(el.clientHeight / 2);
                    if (this.hlookupDelay !== 0) {
                        window.clearTimeout(this.hlookupDelay);
                    }
                    if (this.hlookupTimer !== 0) {
                        window.clearInterval(this.hlookupTimer);
                    }
                    this.hlookupDelay = window.setTimeout(() => {
                        this.hlookupDelay = 0;
                        this.hlookupTimer = window.setInterval(this.lookupCloseNode.bind(this), this.lookupInterval);
                    }, this.lookupDelay);
                    this.capture = true;
                }
            }
        }
        drag(e) {
            if (!this.mindCheese.isEditable()) {
                return;
            }
            if (this.capture) {
                e.preventDefault();
                this.showShadow();
                this.moved = true;
                window.getSelection().removeAllRanges();
                const client = getClientFromEvent(e);
                const px = client.clientX - this.offsetX;
                const py = client.clientY - this.offsetY;
                // const px = (e.clientX || e.touches[0].clientX) - this.offsetX;
                // const py = (e.clientY || e.touches[0].clientY) - this.offset_y;
                this.shadow.style.left = px + "px";
                this.shadow.style.top = py + "px";
                window.getSelection().removeAllRanges();
            }
        }
        dragend() {
            if (!this.mindCheese.isEditable()) {
                return;
            }
            if (this.capture) {
                if (this.hlookupDelay !== 0) {
                    window.clearTimeout(this.hlookupDelay);
                    this.hlookupDelay = 0;
                    this.clearLines();
                }
                if (this.hlookupTimer !== 0) {
                    window.clearInterval(this.hlookupTimer);
                    this.hlookupTimer = 0;
                    this.clearLines();
                }
                if (this.moved) {
                    const srcNode = this.activeNode;
                    const targetNode = this.targetNode;
                    const targetDirect = this.targetDirect;
                    this.moveNode(srcNode, targetNode, targetDirect);
                }
                this.hideShadow();
            }
            this.moved = false;
            this.capture = false;
        }
        moveNode(srcNode, targetNode, targetDirect) {
            console.log(`Draggable.moveNode: ${srcNode} ${targetNode} ${targetDirect}`);
            const shadowH = this.shadow.offsetTop;
            if (!!targetNode && !!srcNode && !MindNode.inherited(srcNode, targetNode)) {
                console.log(`let's move!`);
                // lookup before_node
                const siblingNodes = targetNode.children;
                let sc = siblingNodes.length;
                let node = null;
                let deltaY = Number.MAX_VALUE;
                let nodeBefore = null;
                let beforeid = BEFOREID_LAST;
                while (sc--) {
                    node = siblingNodes[sc];
                    if (node.direction === targetDirect && node.id !== srcNode.id) {
                        const dy = node.data.view.elementTopLeft.y - shadowH;
                        if (dy > 0 && dy < deltaY) {
                            deltaY = dy;
                            nodeBefore = node;
                            beforeid = BEFOREID_FIRST;
                        }
                    }
                }
                if (nodeBefore) {
                    beforeid = nodeBefore.id;
                }
                console.log(`Calling jm.move_node: ${srcNode.id}, ${beforeid}, ${targetNode.id}, ${targetDirect}`);
                this.mindCheese.moveNode(srcNode, beforeid, targetNode, targetDirect);
            }
            this.activeNode = null;
            this.targetNode = null;
            this.targetDirect = null;
        }
    }

    class UndoManager {
        constructor(jm, undoStackLimit = 10000) {
            this.mindCheese = jm;
            this.undoStack = [];
            this.undoStackLimit = undoStackLimit;
        }
        /**
         * Before every editing graph, call this method.
         */
        recordSnapshot() {
            if (this.undoStack.length > this.undoStackLimit) {
                console.log(`UndoManager: callback event. too much stacks.`);
                this.undoStack.shift();
            }
            console.log(`UndoManager: callback event pushing.`);
            this.undoStack.push(this.mindCheese.getNodeTree());
        }
        undo() {
            const item = this.undoStack.pop();
            if (item) {
                const data = item;
                console.log(`UndoManager: undo. data=${data}`);
                this.mindCheese.showNodeTree(data);
            }
            else {
                console.log(`UndoManager: undo. stack is empty.`);
            }
        }
    }

    class GraphCanvas {
        /**
         * Create new instance of GraphCanvas.
         *
         * @param lineColor color of lines. CSS compatible colors are ok. e.g. "#ffffff"
         * @param lineWidth Pixel of line width.
         */
        constructor(lineColor, lineWidth) {
            this.lineColor = lineColor;
            this.lineWidth = lineWidth;
            this.canvasElement = document.createElement("canvas");
            this.canvasElement.className = "mindcheese-graph-canvas";
            this.canvasContext = this.canvasElement.getContext("2d");
        }
        element() {
            return this.canvasElement;
        }
        setSize(w, h) {
            this.canvasElement.width = w;
            this.canvasElement.height = h;
        }
        clear() {
            this.canvasContext.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);
        }
        drawLine(pout, pin, color, lineCap) {
            const ctx = this.canvasContext;
            ctx.strokeStyle = color;
            ctx.lineWidth = this.lineWidth;
            ctx.lineCap = lineCap;
            GraphCanvas.bezierTo(ctx, pin.x, pin.y, pout.x, pout.y);
        }
        static bezierTo(ctx, x1, y1, x2, y2) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.bezierCurveTo(x1 + ((x2 - x1) * 2) / 3, y1, x1, y2, x2, y2);
            ctx.stroke();
        }
    }

    /*
    {
        { "id": "root", "topic": "mindCheese Example" }
    }
     */
    // Convert plain node tree to Mind object.
    function object2mindmap(source) {
        const mind = new Mind();
        parse$1(mind, source);
        return mind;
    }
    function parse$1(mind, nodeRoot) {
        mind.setRoot(nodeRoot.id, nodeRoot.topic);
        if ("children" in nodeRoot) {
            const children = nodeRoot.children;
            for (let i = 0; i < children.length; i++) {
                extractSubNode(mind, mind.root, children[i]);
            }
        }
    }
    function extractSubNode(mind, nodeParent, nodeJson) {
        let d = null;
        if (nodeParent.isroot) {
            d = nodeJson.direction == "left" ? -1 /* LEFT */ : 1 /* RIGHT */;
        }
        // console.log(
        //   `_extract_subnode node_json.direction DIRECTION=${nodeJson.direction} d=${d} ${nodeJson.topic}`
        // );
        const node = mind.addNode(nodeParent, nodeJson.id, nodeJson.topic, null, d);
        if ("children" in nodeJson) {
            const children = nodeJson.children;
            for (let i = 0; i < children.length; i++) {
                extractSubNode(mind, node, children[i]);
            }
        }
    }

    function generateNewId() {
        return (new Date().getTime().toString(16) + Math.random().toString(16).substring(2)).substring(2, 16);
    }

    class ShortcutHandlers {
        static delete(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (!!selectedNode && !selectedNode.isroot) {
                mindCheese.selectNode(selectedNode.parent);
                mindCheese.removeNode(selectedNode);
            }
            return false;
        }
        static addChild(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                const nodeid = generateNewId();
                const node = mindCheese.addNode(selectedNode, nodeid, "New Node");
                if (node) {
                    mindCheese.selectNode(node);
                    mindCheese.checkEditable();
                    mindCheese.view.editNodeBegin(node);
                }
            }
            return false;
        }
        static addBrother(mindCheese, e) {
            e.preventDefault();
            const selectedNode = mindCheese.getSelectedNode();
            if (!!selectedNode && !selectedNode.isroot) {
                const nodeid = generateNewId();
                const node = mindCheese.insertNodeAfter(selectedNode, nodeid, "New Node");
                if (node) {
                    mindCheese.selectNode(node);
                    mindCheese.checkEditable();
                    mindCheese.view.editNodeBegin(node);
                }
            }
            return false;
        }
        static editNode(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.checkEditable();
                mindCheese.view.editNodeBegin(selectedNode);
            }
            return false;
        }
        static moveUp(mindCheese) {
            console.debug(`ShortcutProvider.handle_move_up`);
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.moveUp(selectedNode);
                mindCheese.selectNode(selectedNode);
            }
            return false;
        }
        static moveDown(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.moveDown(selectedNode);
                mindCheese.selectNode(selectedNode);
            }
            return false;
        }
        static up(mindCheese, e) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode.isroot) {
                return false;
            }
            if (selectedNode) {
                let upNode = mindCheese.findNodeBefore(selectedNode);
                if (!upNode) {
                    const np = mindCheese.findNodeBefore(selectedNode.parent);
                    if (!!np && np.children.length > 0) {
                        upNode = np.children[np.children.length - 1];
                    }
                }
                if (upNode) {
                    mindCheese.selectNode(upNode);
                }
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        static down(mindCheese, e) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode.isroot) {
                return false;
            }
            if (selectedNode) {
                let downNode = mindCheese.findNodeAfter(selectedNode);
                if (!downNode) {
                    const np = mindCheese.findNodeAfter(selectedNode.parent);
                    if (!!np && np.children.length > 0) {
                        downNode = np.children[0];
                    }
                }
                if (downNode) {
                    mindCheese.selectNode(downNode);
                }
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        static left(mindCheese, e) {
            ShortcutHandlers.handleDirection(mindCheese, e, -1 /* LEFT */);
            return false;
        }
        static right(mindCheese, e) {
            ShortcutHandlers.handleDirection(mindCheese, e, 1 /* RIGHT */);
            return false;
        }
        static handleDirection(mindCheese, e, d) {
            let children; // TODO maybe optimizable
            const selectedNode = mindCheese.getSelectedNode();
            let node = null;
            if (selectedNode) {
                if (selectedNode.isroot) {
                    const c = selectedNode.children;
                    children = [];
                    for (let i = 0; i < c.length; i++) {
                        if (c[i].direction === d) {
                            children.push(i);
                        }
                    }
                    node = c[children[Math.floor((children.length - 1) / 2)]];
                }
                else if (selectedNode.direction === d) {
                    children = selectedNode.children;
                    const childrenCount = children.length;
                    if (childrenCount > 0) {
                        node = children[Math.floor((childrenCount - 1) / 2)];
                    }
                }
                else {
                    node = selectedNode.parent;
                }
                if (node) {
                    mindCheese.selectNode(node);
                }
                e.stopPropagation();
                e.preventDefault();
            }
        }
        static undo(mindCheese, e) {
            console.log("UNDO!");
            mindCheese.undo();
            e.stopPropagation();
            e.preventDefault();
            return false;
        }
    }

    const SPECIAL = {
        "&": "&amp;",
        ">": "&gt;",
        "<": "&lt;",
        '"': "&quot;",
        "'": "&#39;",
        "`": "&#96;",
        "{": "&#123;",
        "}": "&#125;",
    };
    function escapeHtml(src) {
        return src.replace(/([&><"'`{}])/g, (_, sp) => {
            return SPECIAL[sp];
        });
    }
    class MarkdownRenderer {
        render(src) {
            return src.replace(/(\n)|\*\*(.*?)\*\*|\*(.*?)\*|`(.*?)`|([&><"'`{}])|(.)/g, (_, nl, bold, italic, code, sp, dot) => {
                if (nl) {
                    return "<br>";
                }
                else if (bold) {
                    return `<b>${escapeHtml(bold)}</b>`;
                }
                else if (italic) {
                    return `<i>${escapeHtml(italic)}</i>`;
                }
                else if (code) {
                    return `<code>${escapeHtml(code)}</code>`;
                }
                else if (sp) {
                    return SPECIAL[sp];
                }
                else if (dot) {
                    return dot;
                }
            });
        }
    }

    class MindOption {
        constructor() {
            this.theme = "primary";
            this.view = new ViewOption();
            this.layout = new LayoutOption();
            this.shortcut = new ShortcutOption();
        }
    }
    class ViewOption {
        constructor() {
            this.hmargin = 100; // Minimum horizontal distance of the mindmap from the outer frame of the container
            this.vmargin = 50; // Minimum vertical distance of the mindmap from the outer frame of the container
            this.lineWidth = 2;
            this.lineColor = "#555";
            this.renderer = new MarkdownRenderer();
        }
    }
    class LayoutOption {
        constructor() {
            this.hspace = 30; // horizontal spacing between nodes
            this.vspace = 20; // vspace vertical spacing between nodes
            this.pspace = 13; // Horizontal spacing between node and connection line (to place node adder)
        }
    }
    class ShortcutOption {
        constructor() {
            this.enable = true;
            this.mappings = [
                [0 /* NONE */, "Delete", ShortcutHandlers.delete],
                [0 /* NONE */, "Backspace", ShortcutHandlers.delete],
                [0 /* NONE */, "Tab", ShortcutHandlers.addChild],
                [0 /* NONE */, "Enter", ShortcutHandlers.addBrother],
                [4 /* CTRL */, "Enter", ShortcutHandlers.editNode],
                [2 /* META */, "Enter", ShortcutHandlers.editNode],
                [16 /* SHIFT */, "ArrowUp", ShortcutHandlers.moveUp],
                [16 /* SHIFT */, "ArrowDown", ShortcutHandlers.moveDown],
                [0 /* NONE */, "ArrowUp", ShortcutHandlers.up],
                [0 /* NONE */, "ArrowDown", ShortcutHandlers.down],
                [0 /* NONE */, "ArrowLeft", ShortcutHandlers.left],
                [0 /* NONE */, "ArrowRight", ShortcutHandlers.right],
                [4 /* CTRL */, "KeyZ", ShortcutHandlers.undo],
                [2 /* META */, "KeyZ", ShortcutHandlers.undo], // for mac
            ];
        }
    }

    function mindmap2markdown(mind) {
        return renderMarkdown(mind.root, 0);
    }
    function renderMarkdown(node, level) {
        let result = "";
        if (node.topic) {
            const lines = node.topic.split("\n");
            for (let i = 0; i < lines.length; i++) {
                for (let j = 0; j < level; j++) {
                    result += "\t";
                }
                if (i === 0) {
                    result += node.direction == -1 /* LEFT */ ? "+ " : "- ";
                }
                else {
                    result += "  ";
                }
                result += lines[i];
                if (i + 1 < lines.length) {
                    result += " \\";
                }
                result += "\n";
            }
        }
        if (node.children) {
            const children = node.children;
            for (let i = 0, l = children.length; i < l; i++)
                result += renderMarkdown(children[i], level + 1);
        }
        return result;
    }

    function parse(md) {
        if (md == null) {
            throw new Error("md should not be null");
        }
        const lines = md.split(/\n/);
        let lastSpaces = "";
        const root = {
            id: "root",
            topic: "DUMMY",
            children: [],
        };
        let i = 0;
        let lastElement = root;
        const anchor = {
            0: root,
        };
        let isContinuous = false;
        for (const line of lines) {
            // skip empty line
            if (!line.match(/\S/)) {
                continue;
            }
            if (isContinuous) {
                let body = line;
                if (body.match(/ [\\ ]$/)) {
                    // multi-line bullet list.
                    body = body.replace(/ [\\ ]$/, "");
                    isContinuous = true;
                }
                else {
                    isContinuous = false;
                }
                for (let j = 0; j < lastSpaces.length + 2; j++) {
                    body = body.replace(/^\s/, "");
                }
                lastElement.topic += "\n" + body;
            }
            else {
                const match = line.match(/^(\s*)([+-])\s*(.*?)$/);
                if (!match) {
                    console.log(`'${line}' is not a bullet list.`);
                    continue;
                }
                const leadingSpaces = match[1];
                const directionCharacter = match[2];
                let body = match[3];
                if (body.match(/ [\\ ]$/)) {
                    // multi-line bullet list.
                    body = body.replace(/ [\\ ]$/, "");
                    isContinuous = true;
                }
                else {
                    isContinuous = false;
                }
                // console.log(`lead=${leadingSpaces.length} body=${body} root=${JSON.stringify(root)}`);
                const el = {
                    id: ++i,
                    topic: body,
                    direction: directionCharacter === "+" ? "left" : "right",
                    children: [],
                };
                if (lastSpaces.length === leadingSpaces.length) ;
                else if (lastSpaces.length < leadingSpaces.length) {
                    // indent
                    // console.log('indent')
                    anchor[leadingSpaces.length] = lastElement;
                }
                else ;
                anchor[leadingSpaces.length].children.push(el);
                lastElement = el;
                lastSpaces = leadingSpaces;
            }
        }
        const realRoot = root.children[0];
        if (!realRoot) {
            throw new Error("MindCheese can't parse this markdown as a mindmap: '" + md + "'");
        }
        return realRoot;
    }
    function markdown2mindmap(md) {
        const tree = parse(md.replace(/^---$.*^---$/ms, ""));
        return object2mindmap(tree);
    }

    class RelativeOffsetFromParent {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }

    class Bounds {
        constructor(n, e, w, s) {
            this.n = n;
            this.e = e;
            this.w = w;
            this.s = s;
            this.size = new Size(this.e + this.w * -1, this.s + this.n * -1);
            console.log(`size: e=${e},w=${w},s=${s},n=${n} w=${this.size.width},h=${this.size.height}`);
        }
    }

    class LayoutResult {
        constructor(relativeFromRootMap) {
            this._relativeFromRootMap = relativeFromRootMap;
        }
        getCenterOffsetOfTheNodeFromRootNode(node) {
            return this._relativeFromRootMap[node.id];
        }
        /**
         *                  Child
         *             xxxxx───────
         * ┌──────┐  xxx   ▲
         * │ Root │xxx     │
         * └──────┘        │
         *                 │
         *                 │
         */
        getNodePointIn(node) {
            const point = this.getCenterOffsetOfTheNodeFromRootNode(node);
            return new CenterOfNodeOffsetFromRootNode(point.x - (node.data.view.elementSizeCache.width / 2) * node.direction, point.y + node.data.view.elementSizeCache.height / 2);
        }
        /**
         *                                    ┌───────┐
         *                                    │ Child │
         *                                 xxx└───────┘
         *                    ┌───────┐  xxx
         *                    │ Child │xxx
         *                xxxx└───────┘▲
         * ┌───────┐   xxxx            │
         * │  Root │xxxx               │
         * └───────┘▲                  │
         *          │                  │
         *          │                  │
         *          │                  │
         *          │                  │
         */
        getNodePointOut(node, destination) {
            if (node.isroot) {
                const x = (node.data.view.elementSizeCache.width / 2) * destination.direction;
                return new CenterOfNodeOffsetFromRootNode(x, -(node.data.view.elementSizeCache.height / 2));
            }
            else {
                const offsetPoint = this.getCenterOffsetOfTheNodeFromRootNode(node);
                const x = offsetPoint.x +
                    (node.data.view.elementSizeCache.width / 2) * node.direction;
                return new CenterOfNodeOffsetFromRootNode(x, offsetPoint.y + node.data.view.elementSizeCache.height / 2);
            }
        }
        getAdderPosition(node, marginForAdder) {
            const offsetPoint = this.getCenterOffsetOfTheNodeFromRootNode(node);
            const x = offsetPoint.x +
                (node.data.view.elementSizeCache.width / 2 + marginForAdder) *
                    node.direction -
                (node.direction == 1 /* RIGHT */ ? marginForAdder : 0);
            const y = offsetPoint.y +
                node.data.view.elementSizeCache.height / 2 -
                Math.ceil(marginForAdder / 2);
            return new CenterOfNodeOffsetFromRootNode(x, y);
        }
        getTopLeft(node, lineWidth) {
            const viewSize = node.data.view.elementSizeCache;
            const offsetPoint = this.getCenterOffsetOfTheNodeFromRootNode(node);
            if (node.isroot) {
                const x = offsetPoint.x + (viewSize.width / 2) * -1;
                const y = offsetPoint.y - viewSize.height - lineWidth;
                return new CenterOfNodeOffsetFromRootNode(x, y);
            }
            else {
                // XXX To be honest, I think we should think about the **direction**,
                // but it is buggy when used in calculations. A mystery.
                const x = offsetPoint.x + (viewSize.width / 2) * -1;
                const y = offsetPoint.y - viewSize.height / 2 - lineWidth;
                return new CenterOfNodeOffsetFromRootNode(x, y);
            }
        }
        getBounds(mind) {
            const nodes = mind.nodes;
            let n = 0;
            let e = 0;
            let w = 0;
            let s = 0;
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                const offsetPoint = this.getCenterOffsetOfTheNodeFromRootNode(node);
                console.log(`getMinSize: id=${node.id}, x=${offsetPoint.x}, y=${offsetPoint.y}`);
                const viewSize = node.data.view.elementSizeCache;
                e = Math.max(offsetPoint.x + viewSize.width / 2, e);
                w = Math.min(offsetPoint.x - viewSize.width / 2, w);
                n = Math.min(offsetPoint.y - viewSize.height / 2, n);
                s = Math.max(offsetPoint.y + viewSize.height / 2, s);
            }
            // maximum distance from center of root node.
            console.log(`getMinSize: n=${n}, e=${e}, w=${w}, s=${s}`);
            return new Bounds(n, e, w, s);
        }
    }

    class LayoutEngine {
        /**
         * The constructor
         *
         * @param hspace horizontal spacing between nodes
         * @param vspace vertical spacing between nodes
         * @param pspace Horizontal spacing between node and connection line (to place node adder)
         */
        constructor(hspace, vspace, pspace) {
            this.hSpace = hspace;
            this.vSpace = vspace;
            this.pSpace = pspace;
        }
        layout(mind) {
            const rootNode = mind.root;
            const relativeFromParentMap = {};
            relativeFromParentMap[mind.root.id] = new RelativeOffsetFromParent(0, 0);
            this.layoutOffsetSubNodes(rootNode.children.filter((it) => it.direction == -1 /* LEFT */), relativeFromParentMap);
            this.layoutOffsetSubNodes(rootNode.children.filter((it) => it.direction == 1 /* RIGHT */), relativeFromParentMap);
            const relativeFromRootMap = {};
            for (const node of Object.values(mind.nodes)) {
                relativeFromRootMap[node.id] = LayoutEngine.calcRelativeOffsetFromRoot(node, relativeFromParentMap);
            }
            return new LayoutResult(relativeFromRootMap);
        }
        static calcRelativeOffsetFromRoot(node, relativeMap) {
            let x = 0;
            let y = 0;
            let n = node;
            do {
                x += relativeMap[n.id].x;
                y += relativeMap[n.id].y;
                n = n.parent;
            } while (n && !n.isroot);
            return new CenterOfNodeOffsetFromRootNode(x, y);
        }
        // layout both the x and y axis
        layoutOffsetSubNodes(nodes, relativeMap) {
            var _a;
            if (nodes.length == 0) {
                return 0;
            }
            let totalHeight = 0;
            {
                let baseY = 0;
                for (let i = 0, l = nodes.length; i < l; i++) {
                    const node = nodes[i];
                    const childrenHeight = this.layoutOffsetSubNodes(node.children, relativeMap);
                    const nodeOuterHeight = Math.max(node.data.view.elementSizeCache.height, childrenHeight);
                    const x = this.hSpace * node.direction +
                        (node.parent.data.view.elementSizeCache.width / 2) *
                            node.direction +
                        this.hSpace * node.direction +
                        (node.data.view.elementSizeCache.width / 2) * node.direction +
                        (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.isroot) ? 0 : this.pSpace * node.direction);
                    const y = baseY + nodeOuterHeight / 2;
                    relativeMap[node.id] = new RelativeOffsetFromParent(x, y);
                    baseY += nodeOuterHeight + this.vSpace;
                    totalHeight += nodeOuterHeight;
                }
            }
            if (nodes.length > 1) {
                totalHeight += this.vSpace * (nodes.length - 1);
            }
            {
                const middleHeight = totalHeight / 2;
                for (let i = 0, l = nodes.length; i < l; i++) {
                    relativeMap[nodes[i].id].y -= middleHeight;
                }
            }
            return totalHeight;
        }
    }

    class MindCheese {
        constructor(id, container, options = new MindOption()) {
            this.zoomScale = 1.0;
            if (!container) {
                throw new Error("container shouldn't be null!");
            }
            this.container = container;
            this.options = options;
            this.mind = new Mind();
            this.id = id;
            this.editable = true;
            // create instance of function provider
            const graph = new GraphCanvas(options.view.lineColor, options.view.lineWidth);
            const layoutEngine = new LayoutEngine(options.layout.hspace, options.layout.vspace, options.layout.pspace);
            this.view = new ViewProvider(this, options.view.hmargin, options.view.vmargin, graph, options.view.renderer, layoutEngine, options.layout.pspace);
            this.shortcut = new ShortcutProvider(this, options.shortcut.enable, options.shortcut.mappings);
            this.draggable = new Draggable(this);
            this.undoManager = new UndoManager(this);
            this.view.init(this.container);
            this.draggable.eventBind(this.container);
            this.shortcut.bindKeyEvents();
            this.bindEvent();
        }
        enableEdit() {
            this.editable = true;
        }
        disableEdit() {
            this.editable = false;
        }
        isEditable() {
            return this.editable;
        }
        checkEditable() {
            if (!this.editable) {
                throw new Error("fail, this mind map is not editable");
            }
        }
        setTheme(theme) {
            const themeOld = this.options.theme;
            this.options.theme = theme;
            if (themeOld !== this.options.theme) {
                this.view.resetTheme();
            }
        }
        bindEvent() {
            this.view.mcnodes.addEventListener("mousedown", this.mousedownHandle.bind(this));
            this.view.mcnodes.addEventListener("click", this.clickHandle.bind(this));
            this.view.mcnodes.addEventListener("dblclick", this.dblclickHandle.bind(this));
            this.view.mindCheeseInnerElement.addEventListener("wheel", (e) => {
                if (e.ctrlKey) {
                    e.stopPropagation();
                    if (e.deltaY > 0) {
                        this.zoomScale -= 0.1;
                    }
                    else {
                        this.zoomScale += 0.1;
                    }
                    this.zoomScale = Math.min(Math.max(this.zoomScale, 0.2), 20);
                    this.zoom(this.zoomScale);
                }
            }, { passive: true });
            window.addEventListener("resize", () => {
                this.resize();
                return false;
            });
        }
        mousedownHandle(e) {
            const element = e.target;
            const nodeid = this.view.getBindedNodeId(element);
            if (nodeid) {
                if (findMcnode(element)) {
                    const theNode = this.mind.getNodeById(nodeid);
                    return this.selectNode(theNode);
                }
            }
            else {
                this.selectClear();
            }
        }
        clickHandle(e) {
            const element = e.target;
            switch (element.tagName.toLowerCase()) {
                case "mcadder": {
                    const nodeid = this.view.getBindedNodeId(element);
                    if (nodeid) {
                        const theNode = this.mind.getNodeById(nodeid);
                        if (!theNode) {
                            throw new Error("the node[id=" + nodeid + "] can not be found.");
                        }
                        else {
                            console.log(`element: ${element.tagName.toLowerCase()}`);
                            const nodeid = generateNewId();
                            const node = this.addNode(theNode, nodeid, "New Node");
                            if (node) {
                                this.selectNode(node);
                                this.checkEditable();
                                this.view.editNodeBegin(node);
                            }
                        }
                    }
                    return false;
                }
            }
            return true;
        }
        dblclickHandle(e) {
            this.checkEditable();
            e.preventDefault();
            e.stopPropagation();
            const element = e.target;
            const nodeid = this.view.getBindedNodeId(element);
            if (nodeid) {
                const theNode = this.mind.getNodeById(nodeid);
                if (theNode.data.view.element.contentEditable == "true") {
                    // The node is already in the editing mode.
                    return false;
                }
                if (!theNode) {
                    throw new Error(`the node[id=${nodeid}] can not be found.`);
                }
                this.view.editNodeBegin(theNode);
                return false;
            }
            return true;
        }
        zoom(n) {
            console.log(`set zoom scale to ${n}`);
            this.view.mindCheeseInnerElement.style.transform = `scale(${n})`;
        }
        showMind(mind) {
            this.view.reset();
            this.mind = mind;
            this.view.createNodes();
            this.view.cacheNodeSize();
            this.view.renderAgain();
            this.view.centerRoot();
        }
        // nodeTree = object representation of the mindmap.
        showNodeTree(nodeTree) {
            this.showMind(object2mindmap(nodeTree));
        }
        showMarkdown(body) {
            this.showMind(markdown2mindmap(body));
        }
        getMarkdown() {
            return mindmap2markdown(this.mind);
        }
        getNodeTree() {
            return this.mind.root.toObject();
        }
        addNode(parentNode, nodeid, topic) {
            this.checkEditable();
            this.undoManager.recordSnapshot();
            parentNode.data.view.adder.style.display = "none";
            const node = this.mind.addNode(parentNode, nodeid, topic, null, null);
            if (node) {
                this.view.addNode(node);
                this.view.renderAgain();
            }
            return node;
        }
        insertNodeAfter(nodeAfter, nodeid, topic) {
            this.checkEditable();
            this.undoManager.recordSnapshot();
            const node = this.mind.insertNodeAfter(nodeAfter, nodeid, topic);
            this.view.addNode(node);
            this.view.renderAgain();
            return node;
        }
        removeNode(node) {
            this.checkEditable();
            if (node.isroot) {
                throw new Error("fail, cannot remove root node");
            }
            const nodeid = node.id;
            const parentNode = node.parent;
            this.undoManager.recordSnapshot();
            const nextSelectedNode = MindCheese.findUpperBrotherOrParentNode(parentNode, nodeid);
            const scrollSnapshot = this.view.saveScroll(node);
            this.view.removeNode(node);
            this.mind.removeNode(node);
            this.view.renderAgain();
            if (parentNode.children.length > 0) {
                this.mind.selected = nextSelectedNode;
                this.view.selectNode(nextSelectedNode);
            }
            this.view.restoreScroll(parentNode, scrollSnapshot);
            return true;
        }
        static findUpperBrotherOrParentNode(parentNode, targetNodeId) {
            const children = parentNode.children;
            for (let i = 0; i < children.length; i++) {
                if (children[i].id == targetNodeId) {
                    if (i == 0) {
                        return parentNode;
                    }
                    else {
                        return children[i - 1];
                    }
                }
            }
            return parentNode; // return
        }
        // set topic to the node
        updateNode(nodeid, topic) {
            this.checkEditable();
            if (!topic || topic.replace(/\s*/, "").length == 0) {
                throw new Error("fail, topic can not be empty");
            }
            const node = this.mind.getNodeById(nodeid);
            this.undoManager.recordSnapshot();
            if (node.topic === topic) {
                console.info("nothing changed");
                this.view.updateNode(node);
                return;
            }
            node.topic = topic;
            this.view.updateNode(node);
            this.view.renderAgain();
        }
        /**
         * @param node Target node to move.
         * @param beforeid Move nodeid's node to above of the *beforeid*. You can use BEFOREID_* constants.
         * @param parent
         * @param direction
         */
        moveNode(node, beforeid, parent, direction) {
            console.log(`jm.move_node: ${node.id} ${beforeid} ${parent.id} ${direction}`);
            this.checkEditable();
            this.undoManager.recordSnapshot();
            this.mind.moveNode(node, beforeid, parent, direction);
            this.view.updateNode(node);
            this.view.renderAgain();
        }
        selectNode(node) {
            this.mind.selected = node;
            this.view.selectNode(node);
        }
        getSelectedNode() {
            if (this.mind) {
                return this.mind.selected;
            }
            else {
                return null;
            }
        }
        selectClear() {
            if (this.mind) {
                this.mind.selected = null;
                this.view.selectClear();
            }
        }
        findNodeBefore(node) {
            if (node.isroot) {
                return null;
            }
            if (node.parent.isroot) {
                const children = node.parent.children.filter((it) => it.direction === node.direction);
                for (let i = 0; i < children.length; i++) {
                    const ni = children[i];
                    if (node.id === ni.id) {
                        if (i !== 0) {
                            return children[i - 1];
                        }
                        else {
                            return null;
                        }
                    }
                }
                throw new Error(`Missing the node in parent: ${node.id}`);
            }
            else {
                return this.mind.getNodeBefore(node);
            }
        }
        findNodeAfter(node) {
            if (node.isroot) {
                return null;
            }
            if (node.parent.isroot) {
                const children = node.parent.children.filter((it) => it.direction == node.direction);
                for (let i = 0; i < children.length; i++) {
                    const ni = children[i];
                    if (node.id === ni.id) {
                        if (i + 1 < children.length) {
                            return children[i + 1];
                        }
                        else {
                            return null; // the last node.
                        }
                    }
                }
                throw new Error(`Illegal state. The parent node doesn't have this child: ${node.id}`);
            }
            else {
                return this.mind.getNodeAfter(node);
            }
        }
        resize() {
            console.log("MindCheese.resize()");
            this.view.resize();
        }
        undo() {
            this.undoManager.undo();
        }
        moveUp(node) {
            /*
            as-is:
              - a
               - foo
               - bar      ← selected node.
        
            after:
              - a
                - bar      ← target node
                - foo
             */
            const upNode = this.findNodeBefore(node);
            if (upNode) {
                this.moveNode(node, upNode.id, node.parent, node.direction);
            }
        }
        moveDown(node) {
            const children = node.parent.children.filter((it) => it.direction === node.direction);
            for (let i = 0; i < children.length; i++) {
                if (children[i].id == node.id) {
                    if (i === children.length - 1) {
                        // already in the last.
                        return; // do nothing
                    }
                    else if (i === children.length - 2) {
                        // already in the above of the last one.
                        /*
                         * before:
                         *   - a
                         *     - b = 1
                         *     - c = 2
                         *
                         * after:
                         *   - a
                         *     - c = 2
                         *     - b = LAST
                         */
                        this.moveNode(node, BEFOREID_LAST, node.parent, node.direction);
                        return; // Put on last element.
                    }
                    else {
                        /*
                         * before:
                         *   - a
                         *     - b = 1 ← node.id
                         *     - c = 2
                         *     - d = 3 ← beforeid
                         *
                         * after:
                         *   - a
                         *     - c = 2
                         *     - b = 3-0.5=2.5
                         *     - d = 3
                         */
                        console.debug(`MindCheese.moveDown: topic=${node.topic} before.topic=${children[i + 1].topic} direction=${node.direction}`);
                        this.moveNode(node, children[i + 2].id, node.parent, node.direction);
                        console.log(this.mind);
                        return;
                    }
                }
            }
        }
    }

    const DEMO_NODE_TREE = {
        id: "root",
        topic: "mindCheese 🧀",
        children: [
            {
                id: "easy",
                topic: "Easy",
                direction: "left",
                children: [
                    { id: "easy1", topic: "Easy to show" },
                    { id: "easy2", topic: "Easy to edit" },
                    { id: "easy3", topic: "Easy to store" },
                    { id: "easy4", topic: "Easy to embed" },
                ],
            },
            {
                id: "open",
                topic: "Open Source",
                direction: "right",
                children: [
                    { id: "open1", topic: "on GitHub" },
                    { id: "open2", topic: "BSD License" },
                ],
            },
            {
                id: "powerful",
                topic: "Powerful",
                direction: "right",
                children: [
                    { id: "powerful1", topic: "Base on **TypeScript**" },
                    {
                        id: "powerful2",
                        topic: "Base on **jsMind**",
                        children: [
                            { id: "jsMind1", topic: "Base on HTML5" },
                            { id: "jsMind2", topic: "Supported CJK chars" },
                        ],
                    },
                    { id: "powerful4", topic: "Depends on you" },
                ],
            },
            {
                id: "other",
                topic: "test node",
                direction: "left",
                // expanded: false,
                children: [
                    { id: "other1", topic: "I'm from local variable" },
                    { id: "other2", topic: "I can do everything: `3*2`" },
                    {
                        id: "other3",
                        topic: "Multi line\nMulti line\nMulti line\nMulti line\nMulti line\nMulti line\nMulti line\nMulti line\nMulti line",
                        children: [
                            {
                                id: "hello1",
                                topic: "こんにちは",
                            },
                            {
                                id: "hello2",
                                topic: "Hello",
                            },
                            {
                                id: "hello3",
                                topic: "Здравствуйте",
                            },
                        ],
                    },
                    {
                        id: "other4",
                        topic: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Eget mauris pharetra et ultrices neque ornare aenean euismod elementum. Tempus egestas sed sed risus. Lacus vel facilisis volutpat est velit egestas. Odio aenean sed adipiscing diam donec adipiscing tristique risus. Eu ultrices vitae auctor eu augue ut lectus. Nulla pharetra diam sit amet. Integer quis auctor elit sed vulputate mi sit amet. Interdum varius sit amet mattis vulputate enim nulla aliquet. Fermentum odio eu feugiat pretium nibh ipsum consequat nisl. Sed euismod nisi porta lorem. Suspendisse potenti nullam ac tortor. Curabitur gravida arcu ac tortor.",
                    },
                ],
            },
        ],
    };
    const DEMO_MARKDOWN = `- マークダウンのテスト
  - a1
    - b1
        - dddddddddddddddddddd1
          - eeeeeeeeeeeeeeeeeeeeee2
            - ffffffffffffffffffffff3
              - gggggggggggggggggggggggggg3
                - hhhhhhhhhhhhhhhhhhhhhh2
                  - iiiiiiiiiiiiii52iiiiiiiiiii
                    - jjjjjjjjjjjjjj25jjjjjjjjjjjj
                      - kkkkkkkkk2342kkkkkkkkkkkkkkkkk2
                        - lllllllllll52llllllllllllllllllll
    - b2
    - b3
      - c1
      - c2
        - dddddddddddddddddddd
          - eeeeeeeeeeeeeeeeeeeeee
            - ffffffffffffffffffffff
              - gggggggggggggggggggggggggg
                - hhhhhhhhhhhhhhhhhhhhhh
                  - iiiiiiiiiiiiiiiiiiiiiiiii
                    - jjjjjjjjjjjjjjjjjjjjjjjjjj
                      - kkkkkkkkkkkkkkkkkkkkkkkkkk
                        - lllllllllllllllllllllllllllllll
  + a2 \\
    複数行だよ
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
`;

    console.log("Loaded browser.ts");
    function downloadText(filename, text) {
        const element = document.createElement("a");
        element.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(text));
        element.setAttribute("download", filename);
        element.style.display = "none";
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }
    function initDemo() {
        const container = document.getElementById("container");
        const mindCheese = new MindCheese(1, container);
        // @ts-ignore
        this.mindCheese = mindCheese;
        mindCheese.showNodeTree(DEMO_NODE_TREE);
        document.getElementById("download_json").addEventListener("click", () => {
            const data = mindCheese.getNodeTree();
            downloadText(encodeURIComponent(mindCheese.mind.root.topic) + ".json", JSON.stringify(data, null, 2));
            return false;
        });
        document
            .getElementById("download_markdown")
            .addEventListener("click", () => {
            const data = mindCheese.getMarkdown();
            downloadText(encodeURIComponent(mindCheese.mind.root.topic) + ".md", data);
            return false;
        });
        document.getElementById("undo").addEventListener("click", () => {
            mindCheese.undo();
            return false;
        });
        if (process.env.BUILD == "development") {
            document.getElementById("load_markdown").addEventListener("click", () => {
                mindCheese.showMarkdown(DEMO_MARKDOWN);
                return false;
            });
        }
        else {
            document.getElementById("navItemDebug").style.display = "none";
        }
        let themeMode = true;
        document.getElementById("toggle_theme").addEventListener("click", () => {
            mindCheese.setTheme(themeMode ? "dark" : "primary");
            themeMode = !themeMode;
            return false;
        });
    }
    // @ts-ignore
    window.initDemo = initDemo;

    return initDemo;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
