/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

var browser = (function () {
    'use strict';

    (function() {
        const env = {"BUILD":"production"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    class Size {
        constructor(width, height) {
            this.w = width;
            this.h = height;
        }
    }

    class Point {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }
    class LayoutProvider {
        /**
         * The constructor
         * @param mindCheese MindCheese instance
         * @param hspace horizontal spacing between nodes
         * @param vspace vertical spacing between nodes
         * @param pspace Horizontal spacing between node and connection line (to place node expander)
         * @param graphCanvas
         */
        constructor(mindCheese, hspace, vspace, pspace, graphCanvas) {
            this.hSpace = hspace;
            this.vSpace = vspace;
            this.pSpace = pspace;
            this.mindCheese = mindCheese;
            this.graphCanvas = graphCanvas;
            this.bounds = null;
        }
        reset() {
            console.debug("layout.reset");
            this.bounds = { n: 0, s: 0, w: 0, e: 0 };
        }
        layout() {
            console.debug("layout.layout");
            this.layoutDirection();
            this.layoutOffset();
        }
        layoutDirection() {
            const node = this.mindCheese.mind.root;
            // console.debug(node);
            const layoutData = node.data.layout;
            const children = node.children;
            const childrenCount = children.length;
            layoutData.direction = 0 /* CENTER */;
            let i = childrenCount;
            let subnode = null;
            while (i--) {
                subnode = children[i];
                if (subnode.direction == -1 /* LEFT */) {
                    this.layoutDirectionSide(subnode, -1 /* LEFT */);
                }
                else {
                    this.layoutDirectionSide(subnode, 1 /* RIGHT */);
                }
            }
        }
        layoutDirectionSide(node, direction) {
            const layoutData = node.data.layout;
            const children = node.children;
            const childrenCount = children.length;
            layoutData.direction = direction;
            let i = childrenCount;
            while (i--) {
                this.layoutDirectionSide(children[i], direction);
            }
        }
        layoutOffset() {
            const node = this.mindCheese.mind.root;
            const layoutData = node.data.layout;
            layoutData.offsetX = 0;
            layoutData.offsetY = 0;
            layoutData.outerHeight = 0;
            const children = node.children;
            let i = children.length;
            const leftNodes = [];
            const rightNodes = [];
            let subnode = null;
            while (i--) {
                subnode = children[i];
                if (subnode.data.layout.direction == 1 /* RIGHT */) {
                    rightNodes.unshift(subnode);
                }
                else {
                    leftNodes.unshift(subnode);
                }
            }
            layoutData.leftNodes = leftNodes;
            layoutData.rightNodes = rightNodes;
            layoutData.outerHeightLeft = this.layoutOffsetSubNodes(leftNodes);
            layoutData.outerHeightRight = this.layoutOffsetSubNodes(rightNodes);
            this.bounds.e = node.data.view.width / 2;
            this.bounds.w = 0 - this.bounds.e;
            //console.debug(this.bounds.w);
            this.bounds.n = 0;
            this.bounds.s = Math.max(layoutData.outerHeightLeft, layoutData.outerHeightRight);
        }
        // layout both the x and y axis
        layoutOffsetSubNodes(nodes) {
            let totalHeight = 0;
            const nodesCount = nodes.length;
            let i = nodesCount;
            let node = null;
            let nodeOuterHeight = 0;
            let layoutData = null;
            let baseY = 0;
            let pd = null; // parent._data
            while (i--) {
                node = nodes[i];
                layoutData = node.data.layout;
                if (pd == null) {
                    pd = node.parent.data;
                    if (pd == null) {
                        throw new Error("Cannot get parent's data");
                    }
                }
                nodeOuterHeight = this.layoutOffsetSubNodes(node.children);
                if (!node.expanded) {
                    nodeOuterHeight = 0;
                    this.setVisible(node.children, false);
                }
                nodeOuterHeight = Math.max(node.data.view.height, nodeOuterHeight);
                layoutData.outerHeight = nodeOuterHeight;
                layoutData.offsetY = baseY - nodeOuterHeight / 2;
                layoutData.offsetX =
                    this.hSpace * layoutData.direction +
                        (pd.view.width * (pd.layout.direction + layoutData.direction)) / 2;
                if (!node.parent.isroot) {
                    layoutData.offsetX += this.pSpace * layoutData.direction;
                }
                baseY = baseY - nodeOuterHeight - this.vSpace;
                totalHeight += nodeOuterHeight;
            }
            if (nodesCount > 1) {
                totalHeight += this.vSpace * (nodesCount - 1);
            }
            i = nodesCount;
            const middleHeight = totalHeight / 2;
            while (i--) {
                node = nodes[i];
                node.data.layout.offsetY += middleHeight;
            }
            return totalHeight;
        }
        // layout the y axis only, for collapse/expand a node
        layoutOffsetSubNodesHeight(nodes) {
            let totalHeight = 0;
            const nodesCount = nodes.length;
            let i = nodesCount;
            let node = null;
            let nodeOuterHeight = 0;
            let layoutData = null;
            let baseY = 0;
            let pd = null; // parent._data
            while (i--) {
                node = nodes[i];
                layoutData = node.data.layout;
                if (pd == null) {
                    pd = node.parent.data;
                }
                nodeOuterHeight = this.layoutOffsetSubNodesHeight(node.children);
                if (!node.expanded) {
                    nodeOuterHeight = 0;
                }
                nodeOuterHeight = Math.max(node.data.view.height, nodeOuterHeight);
                layoutData.outerHeight = nodeOuterHeight;
                layoutData.offsetY = baseY - nodeOuterHeight / 2;
                baseY = baseY - nodeOuterHeight - this.vSpace;
                totalHeight += nodeOuterHeight;
            }
            if (nodesCount > 1) {
                totalHeight += this.vSpace * (nodesCount - 1);
            }
            i = nodesCount;
            const middleHeight = totalHeight / 2;
            while (i--) {
                node = nodes[i];
                node.data.layout.offsetY += middleHeight;
            }
            return totalHeight;
        }
        getNodeOffset(node) {
            const layoutData = node.data.layout;
            let x = layoutData.offsetX;
            let y = layoutData.offsetY;
            if (!node.isroot) {
                const offsetPoint = this.getNodeOffset(node.parent);
                x += offsetPoint.x;
                y += offsetPoint.y;
            }
            return new Point(x, y);
        }
        getNodePoint(node) {
            const viewData = node.data.view;
            const offsetPoint = this.getNodeOffset(node);
            const x = offsetPoint.x + (viewData.width * (node.data.layout.direction - 1)) / 2;
            // ↓ Destination of the line.
            const y = offsetPoint.y - viewData.height - this.graphCanvas.lineWidth;
            return new Point(x, y);
        }
        getNodePointIn(node) {
            return this.getNodeOffset(node);
        }
        getNodePointOut(node) {
            if (node.isroot) {
                return new Point(0, 0);
            }
            else {
                const offsetPoint = this.getNodeOffset(node);
                const x = offsetPoint.x +
                    (node.data.view.width + this.pSpace) * node.data.layout.direction;
                return new Point(x, offsetPoint.y);
            }
        }
        getNodePointOutSpecial(node, n2) {
            if (node.isroot) {
                const x = (node.data.view.width / 2) * n2.data.layout.direction;
                return new Point(x, -(node.data.view.height / 2));
            }
            else {
                const offsetPoint = this.getNodeOffset(node);
                const x = offsetPoint.x +
                    (node.data.view.width + this.pSpace) * node.data.layout.direction;
                return new Point(x, offsetPoint.y);
            }
        }
        getExpanderPoint(node) {
            const p = this.getNodePointOut(node);
            let x;
            if (node.data.layout.direction == 1 /* RIGHT */) {
                x = p.x - this.pSpace;
            }
            else {
                x = p.x;
            }
            const y = p.y - Math.ceil(this.pSpace / 2);
            return new Point(x, y);
        }
        getMinSize() {
            const nodes = this.mindCheese.mind.nodes;
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                const pout = this.getNodePointOut(node);
                this.bounds.e = Math.max(pout.x, this.bounds.e);
                this.bounds.w = Math.min(pout.x, this.bounds.w);
            }
            return new Size(this.bounds.e - this.bounds.w, this.bounds.s - this.bounds.n);
        }
        toggleNode(node) {
            if (node.isroot) {
                return;
            }
            if (node.expanded) {
                this.collapseNode(node);
            }
            else {
                this.expandNode(node);
            }
        }
        expandNode(node) {
            node.expanded = true;
            this.partLayout(node);
            this.setVisible(node.children, true);
        }
        collapseNode(node) {
            node.expanded = false;
            this.partLayout(node);
            this.setVisible(node.children, false);
        }
        expandAll() {
            const nodes = this.mindCheese.mind.nodes;
            let c = 0;
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                if (!node.expanded) {
                    node.expanded = true;
                    c++;
                }
            }
            if (c > 0) {
                const root = this.mindCheese.mind.root;
                this.partLayout(root);
                this.setVisible(root.children, true);
            }
        }
        collapseAll() {
            const nodes = this.mindCheese.mind.nodes;
            let c = 0;
            let node;
            for (const nodeid in nodes) {
                node = nodes[nodeid];
                if (node.expanded && !node.isroot) {
                    node.expanded = false;
                    c++;
                }
            }
            if (c > 0) {
                const root = this.mindCheese.mind.root;
                this.partLayout(root);
                this.setVisible(root.children, true);
            }
        }
        expandToDepth(targetDepth, currNodes, currDepth) {
            if (targetDepth < 1) {
                return;
            }
            const nodes = currNodes || this.mindCheese.mind.root.children;
            const depth = currDepth || 1;
            let i = nodes.length;
            let node = null;
            while (i--) {
                node = nodes[i];
                if (depth < targetDepth) {
                    if (!node.expanded) {
                        this.expandNode(node);
                    }
                    this.expandToDepth(targetDepth, node.children, depth + 1);
                }
                if (depth == targetDepth) {
                    if (node.expanded) {
                        this.collapseNode(node);
                    }
                }
            }
        }
        partLayout(node) {
            const root = this.mindCheese.mind.root;
            if (root) {
                const rootLayoutData = root.data.layout;
                if (node.isroot) {
                    rootLayoutData.outerHeightRight = this.layoutOffsetSubNodesHeight(rootLayoutData.rightNodes);
                    rootLayoutData.outerHeightLeft = this.layoutOffsetSubNodesHeight(rootLayoutData.leftNodes);
                }
                else {
                    if (node.data.layout.direction == 1 /* RIGHT */) {
                        rootLayoutData.outerHeightRight = this.layoutOffsetSubNodesHeight(rootLayoutData.rightNodes);
                    }
                    else {
                        rootLayoutData.outerHeightLeft = this.layoutOffsetSubNodesHeight(rootLayoutData.leftNodes);
                    }
                }
                this.bounds.s = Math.max(rootLayoutData.outerHeightLeft, rootLayoutData.outerHeightRight);
            }
            else {
                console.warn("can not found root node");
            }
        }
        setVisible(nodes, visible) {
            let i = nodes.length;
            let node = null;
            while (i--) {
                node = nodes[i];
                if (node.expanded) {
                    this.setVisible(node.children, visible);
                }
                else {
                    this.setVisible(node.children, false);
                }
                if (!node.isroot) {
                    node.data.layout.visible = visible;
                }
            }
        }
    }

    const BEFOREID_FIRST = "_first_";
    const BEFOREID_LAST = "_last_";
    const KEYCODE_ENTER = 13;
    const KEYCODE_ESC = 27;

    /**
     * View renderer
     */
    class ViewProvider {
        /**
         *
         * @param mindCheese MindCheese instance
         * @param container container element
         * @param hmargin ???
         * @param vmargin ???
         * @param graph instance of GraphCanvas
         * @param textFormatter Formatter of the text
         */
        constructor(mindCheese, hmargin, vmargin, graph, textFormatter) {
            this.mindCheese = mindCheese;
            this.textFormatter = textFormatter;
            this.layout = mindCheese.layout;
            this.mcnodes = document.createElement("mcnodes");
            this.mcnodes.addEventListener("keydown", (e) => {
                const el = e.target;
                console.debug(`keydown=${e.keyCode}==${KEYCODE_ENTER} tagName=${el.tagName} shiftkey=${e.shiftKey}`);
                if (el.tagName != "MCNODE") {
                    console.log(`It's not MCNODE. ${el.tagName}`);
                    return;
                }
                // https://qiita.com/ledsun/items/31e43a97413dd3c8e38e
                // keyCode is deprecated field. But it's a hack for Japanese IME.
                // noinspection JSDeprecatedSymbols
                if ((e.keyCode === KEYCODE_ENTER && !e.shiftKey) ||
                    e.keyCode == KEYCODE_ESC) {
                    console.log("editNodeEnd");
                    e.stopPropagation();
                    e.preventDefault();
                    this.editNodeEnd();
                }
            });
            // adjust size dynamically.
            this.mcnodes.addEventListener("keyup", () => {
                this.layout.layout();
                this.show();
            });
            this.mcnodes.addEventListener("input", () => {
                // TODO is this required?
                this.layout.layout();
                this.show();
            });
            // when the element lost focus.
            this.mcnodes.addEventListener("blur", (e) => {
                const el = e.target;
                if (el.tagName != "mcnode") {
                    return;
                }
                this.editNodeEnd();
            });
            this.mindCheeseInnerElement = document.createElement("div");
            this.mindCheeseInnerElement.className = "mindcheese-inner";
            this.mindCheeseInnerElement.appendChild(graph.element());
            this.mindCheeseInnerElement.appendChild(this.mcnodes);
            this.size = { w: 0, h: 0 };
            this.selectedNode = null;
            this.editingNode = null;
            this.hMargin = hmargin;
            this.vMargin = vmargin;
            this.graph = graph;
        }
        init(container) {
            console.debug("view.init");
            container.appendChild(this.mindCheeseInnerElement);
        }
        adjustEditorElementSize() {
            this.layout.layout();
            this.show();
        }
        getBindedNodeId(element) {
            if (element == null) {
                return null;
            }
            const tagName = element.tagName.toLowerCase();
            if (tagName === "mcnodes" || tagName === "body" || tagName === "html") {
                return null;
            }
            if (tagName === "mcnode" || tagName === "mcexpander") {
                return element.getAttribute("nodeid");
            }
            else {
                return this.getBindedNodeId(element.parentElement);
            }
        }
        isExpander(element) {
            return element.tagName.toLowerCase() === "mcexpander";
        }
        reset() {
            console.debug("view.reset");
            this.selectedNode = null;
            this.graph.clear();
            this.clearNodes();
            this.resetTheme();
        }
        resetTheme() {
            const themeName = this.mindCheese.options.theme;
            if (themeName) {
                this.mcnodes.parentElement.className = "theme-" + themeName;
            }
            else {
                this.mcnodes.parentElement.className = "";
            }
        }
        load() {
            console.debug("view.load");
            this.initNodes();
        }
        expandSize() {
            const minSize = this.layout.getMinSize();
            const minWidth = minSize.w + this.hMargin * 2;
            const minHeight = minSize.h + this.vMargin * 2;
            let clientW = this.mindCheeseInnerElement.clientWidth;
            let clientH = this.mindCheeseInnerElement.clientHeight;
            // console.debug(`ViewProvider.expand_size:
            // min_width=${minWidth}
            // min_height=${minHeight}
            // client_w=${clientW}
            // client_h=${clientH}`);
            if (clientW < minWidth) {
                clientW = minWidth;
            }
            if (clientH < minHeight) {
                clientH = minHeight;
            }
            this.size.w = clientW;
            this.size.h = clientH;
        }
        initNodeSize(node) {
            const viewData = node.data.view;
            viewData.width = viewData.element.clientWidth;
            viewData.height = viewData.element.clientHeight;
        }
        initNodes() {
            const nodes = this.mindCheese.mind.nodes;
            const documentFragment = document.createDocumentFragment();
            for (const node of Object.values(nodes)) {
                this.createNodeElement(node, documentFragment);
            }
            this.mcnodes.appendChild(documentFragment);
            for (const node of Object.values(nodes)) {
                this.initNodeSize(node);
            }
        }
        addNode(node) {
            this.createNodeElement(node, this.mcnodes);
            this.initNodeSize(node);
        }
        createNodeElement(node, parentNode) {
            const nodeEl = document.createElement("mcnode");
            if (node.isroot) {
                nodeEl.className = "root";
            }
            else {
                const expanderElement = document.createElement("mcexpander");
                expanderElement.innerText = "-";
                expanderElement.setAttribute("nodeid", node.id);
                expanderElement.style.visibility = "hidden";
                parentNode.appendChild(expanderElement);
                node.data.view.expander = expanderElement;
            }
            if (node.topic) {
                nodeEl.innerHTML = this.textFormatter.render(node.topic);
            }
            nodeEl.setAttribute("nodeid", node.id);
            nodeEl.style.visibility = "hidden";
            parentNode.appendChild(nodeEl);
            node.data.view.element = nodeEl;
        }
        removeNode(node) {
            if (this.selectedNode != null && this.selectedNode.id == node.id) {
                this.selectedNode = null;
            }
            if (this.editingNode != null && this.editingNode.id == node.id) {
                node.data.view.element.contentEditable = "false";
                this.editingNode = null;
            }
            const children = node.children;
            let i = children.length;
            while (i--) {
                this.removeNode(children[i]);
            }
            if (node.data.view) {
                const element = node.data.view.element;
                const expander = node.data.view.expander;
                this.mcnodes.removeChild(element);
                this.mcnodes.removeChild(expander);
                node.data.view.element = null;
                node.data.view.expander = null;
            }
        }
        updateNode(node) {
            const viewData = node.data.view;
            const element = viewData.element;
            if (node.topic) {
                element.innerHTML = this.textFormatter.render(node.topic);
            }
            viewData.width = element.clientWidth;
            viewData.height = element.clientHeight;
        }
        selectNode(node) {
            if (this.selectedNode) {
                const el = this.selectedNode.data.view.element;
                el.classList.remove("selected");
            }
            if (node) {
                this.selectedNode = node;
                node.data.view.element.classList.add("selected");
                // Adjust the scroll bar. show node in the browser.
                node.data.view.element.scrollIntoView();
            }
        }
        selectClear() {
            this.selectNode(null);
        }
        isEditing() {
            return !!this.editingNode;
        }
        editNodeBegin(node) {
            if (!node.topic) {
                console.warn("don't edit image nodes");
                return;
            }
            if (this.editingNode != null) {
                this.editNodeEnd();
            }
            console.log("editNodeBegin");
            this.editingNode = node;
            const element = node.data.view.element;
            element.contentEditable = "true";
            element.innerText = node.topic;
            if (element.getAttribute("mc-initialized") !== "done") {
                element.addEventListener("blur", (e) => {
                    this.editNodeEnd();
                });
                element.setAttribute("mc-initialized", "done");
            }
            element.focus();
            setTimeout(this.adjustEditorElementSize.bind(this), 0);
        }
        editNodeEnd() {
            console.log(`editNodeEnd(editingNode=${this.editingNode})`);
            if (this.editingNode != null) {
                const node = this.editingNode;
                this.editingNode = null;
                const element = node.data.view.element;
                element.contentEditable = "false";
                const topic = element.innerText;
                if (!topic ||
                    topic.replace(/\s*/, "").length == 0 ||
                    node.topic === topic) {
                    console.debug("Calling updateNode");
                    element.innerHTML = this.textFormatter.render(node.topic);
                    this.layout.layout();
                    this.show();
                }
                else {
                    console.debug("Calling updateNode");
                    this.mindCheese.updateNode(node.id, topic);
                }
            }
        }
        getViewOffset() {
            const bounds = this.layout.bounds;
            const x = (this.size.w - bounds.e - bounds.w) / 2;
            const y = this.size.h / 2;
            return new Point(x, y);
        }
        resize() {
            this.graph.setSize(1, 1);
            this.mcnodes.style.width = "1px";
            this.mcnodes.style.height = "1px";
            this.expandSize();
            this.doShow();
        }
        doShow() {
            this.graph.setSize(this.size.w, this.size.h);
            this.mcnodes.parentElement.style.width = this.size.w + "px";
            this.mcnodes.parentElement.style.height = this.size.h + "px";
            this.showNodes();
            this.showLines();
            this.mindCheese.draggable.resize();
        }
        centerRoot() {
            // center root node
            const outerW = this.mindCheeseInnerElement.clientWidth;
            const outerH = this.mindCheeseInnerElement.clientHeight;
            if (this.size.w > outerW) {
                const offset = this.getViewOffset();
                this.mindCheeseInnerElement.scrollLeft = offset.x - outerW / 2;
            }
            if (this.size.h > outerH) {
                this.mindCheeseInnerElement.scrollTop = (this.size.h - outerH) / 2;
            }
        }
        show() {
            console.debug("view.show");
            this.expandSize();
            this.doShow();
        }
        takeLocation(node) {
            const vd = node.data.view;
            return new Point(parseInt(vd.element.style.left) - this.mindCheeseInnerElement.scrollLeft, parseInt(vd.element.style.top) - this.mindCheeseInnerElement.scrollTop);
        }
        restoreLocation(node, location) {
            const vd = node.data.view;
            this.mindCheeseInnerElement.scrollLeft =
                parseInt(vd.element.style.left) - location.x;
            this.mindCheeseInnerElement.scrollTop =
                parseInt(vd.element.style.top) - location.y;
        }
        clearNodes() {
            const mind = this.mindCheese.mind;
            if (mind == null) {
                return;
            }
            const nodes = mind.nodes;
            let node = null;
            for (const nodeid in nodes) {
                node = nodes[nodeid];
                node.data.view.element = null;
                node.data.view.expander = null;
            }
            this.mcnodes.innerHTML = "";
        }
        showNodes() {
            const nodes = this.mindCheese.mind.nodes;
            let node = null;
            let nodeElement = null;
            let expander = null;
            let expanderPoint = null;
            let expanderText = "-";
            let viewData = null;
            const offset = this.getViewOffset();
            for (const nodeid in nodes) {
                node = nodes[nodeid];
                viewData = node.data.view;
                nodeElement = viewData.element;
                expander = viewData.expander;
                if (!node.data.layout.visible) {
                    nodeElement.style.display = "none";
                    expander.style.display = "none";
                    continue;
                }
                const p = this.layout.getNodePoint(node);
                viewData.absX = offset.x + p.x;
                viewData.absY = offset.y + p.y;
                nodeElement.style.left = offset.x + p.x + "px";
                nodeElement.style.top = offset.y + p.y + "px";
                nodeElement.style.display = "";
                nodeElement.style.visibility = "visible";
                if (!node.isroot && node.children.length > 0) {
                    expanderText = node.expanded ? "-" : "+";
                    expanderPoint = this.layout.getExpanderPoint(node);
                    expander.style.left = offset.x + expanderPoint.x + "px";
                    expander.style.top = offset.y + expanderPoint.y + "px";
                    expander.style.display = "";
                    expander.style.visibility = "visible";
                    expander.innerText = expanderText;
                }
                // hide expander while all children have been removed
                if (!node.isroot && node.children.length == 0) {
                    expander.style.display = "none";
                    expander.style.visibility = "hidden";
                }
            }
        }
        showLines() {
            this.graph.clear();
            const nodes = this.mindCheese.mind.nodes;
            const offset = this.getViewOffset();
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                if (node.isroot) {
                    continue;
                }
                if ("visible" in node.data.layout && !node.data.layout.visible) {
                    continue;
                }
                {
                    // Draw line between previous node and next node
                    const pin = this.layout.getNodePointIn(node);
                    const pout = this.layout.getNodePointOutSpecial(node.parent, node);
                    this.graph.drawLine(pout, pin, offset, node.color, "round");
                }
                {
                    // Draw line under the bottom of the node
                    const pin = this.layout.getNodePointIn(node);
                    const pout = new Point(pin.x -
                        node.data.view.width * (node.direction == -1 /* LEFT */ ? 1 : -1), pin.y);
                    this.graph.drawLine(pout, pin, offset, node.color, "butt");
                }
            }
        }
    }

    class ShortcutProvider {
        constructor(mindCheese, enable, mappings) {
            this.mindCheese = mindCheese;
            this.enable = enable;
            this.mappings = this.compileHandlers(mappings);
        }
        bindKeyEvents() {
            document.addEventListener("keydown", this.handler.bind(this));
        }
        enableShortcut() {
            this.enable = true;
        }
        disableShortcut() {
            this.enable = false;
        }
        handler(e) {
            // noinspection JSDeprecatedSymbols
            if (e.which == 9) {
                e.preventDefault();
            } //prevent tab to change focus in browser
            if (this.mindCheese.view.isEditing()) {
                return;
            }
            if (!this.enable) {
                return true;
            }
            console.debug(`ShortcutProvider.handler: ${e.code}`);
            const handlers = this.mappings[e.code];
            if (!handlers) {
                return true;
            }
            const gotFlags = (e.metaKey ? 2 /* META */ : 0) |
                (e.ctrlKey ? 4 /* CTRL */ : 0) |
                (e.altKey ? 8 /* ALT */ : 0) |
                (e.shiftKey ? 16 /* SHIFT */ : 0);
            for (const handler of handlers) {
                const [flags, code] = handler;
                if (flags === gotFlags) {
                    return code(this.mindCheese, e);
                }
            }
        }
        compileHandlers(handlers) {
            const result = {};
            handlers.forEach((it) => {
                const [flags, keyString, code] = it;
                if (!result[keyString]) {
                    result[keyString] = [];
                }
                result[keyString].push([flags, code]);
            });
            return result;
        }
    }

    class RoundRobin {
        constructor(data) {
            this.data = data;
            this.index = 0;
        }
        take() {
            const v = this.data[this.index++];
            if (this.index == this.data.length) {
                this.index = 0;
            }
            return v;
        }
    }

    class ViewData {
    }
    class LayoutData {
        constructor() {
            this.visible = true;
        }
    }
    const COLORS = new RoundRobin([
        "#cc0000",
        "#00cc00",
        "#0000cc",
        "#00cccc",
        "#cc00cc",
        "#cccc00",
    ]);
    class MindNode {
        constructor(id, index, topic, isRoot, parent, direction, expanded) {
            if (!id) {
                throw new Error("invalid nodeid");
            }
            if (typeof index != "number") {
                throw new Error("invalid node index");
            }
            this.id = id;
            this.index = index;
            this.topic = topic;
            this.isroot = isRoot;
            this.parent = parent;
            this.direction = direction;
            this.expanded = expanded;
            this.children = [];
            this.data = {
                view: new ViewData(),
                layout: new LayoutData(),
            };
            // console.log(`ID: ${id}`);
            if (!parent) {
                this.color = null;
            }
            else if (parent && parent.color) {
                // inherit parent's color
                this.color = parent.color;
            }
            else {
                this.color = COLORS.take();
            }
        }
        static compare(node1, node2) {
            // '-1' is alwary the last
            let r;
            const i1 = node1.index;
            const i2 = node2.index;
            if (i1 >= 0 && i2 >= 0) {
                r = i1 - i2;
            }
            else if (i1 === -1 && i2 === -1) {
                r = 0;
            }
            else if (i1 === -1) {
                r = 1;
            }
            else if (i2 === -1) {
                r = -1;
            }
            else {
                r = 0;
            }
            // console.debug(`MindNode.compare: ${i1} <> ${i2}  =  ${r}`);
            return r;
        }
        static inherited(pnode, node) {
            if (!!pnode && !!node) {
                if (pnode.id === node.id) {
                    return true;
                }
                if (pnode.isroot) {
                    return true;
                }
                const pid = pnode.id;
                let p = node;
                while (!p.isroot) {
                    p = p.parent;
                    if (p.id === pid) {
                        return true;
                    }
                }
            }
            return false;
        }
        getLocation() {
            const vd = this.data.view;
            return new Point(vd.absX, vd.absY);
        }
        getSize() {
            const vd = this.data.view;
            return new Size(vd.width, vd.height);
        }
        toObject() {
            const o = {
                id: this.id,
                topic: this.topic,
                expanded: this.expanded,
                children: this.children.map((it) => it.toObject()),
            };
            if (!!this.parent && this.parent.isroot) {
                o.direction = this.direction == -1 /* LEFT */ ? "left" : "right";
            }
            return o;
        }
        applyColor(color) {
            this.color = color;
            for (let i = 0, l = this.children.length; i < l; i++) {
                this.children[i].applyColor(color);
            }
        }
    }

    class Mind {
        constructor() {
            this.root = null;
            this.selected = null;
            this.nodes = {};
        }
        getNodeById(nodeid) {
            if (nodeid in this.nodes) {
                return this.nodes[nodeid];
            }
            else {
                throw new Error(`the node[id=${nodeid}] can not be found...`);
            }
        }
        setRoot(nodeid, topic) {
            if (this.root != null) {
                throw new Error("root node is already exist");
            }
            this.root = new MindNode(nodeid, 0, topic, true, null, null, true);
            this.putNode(this.root);
        }
        addNode(parentNode, nodeid, topic, idx, direction, expanded) {
            const nodeindex = idx || -1;
            let node;
            if (parentNode.isroot) {
                let d;
                if (direction == null) {
                    const children = parentNode.children;
                    const childrenLength = children.length;
                    let r = 0;
                    for (let i = 0; i < childrenLength; i++) {
                        if (children[i].direction === -1 /* LEFT */) {
                            r--;
                        }
                        else {
                            r++;
                        }
                    }
                    d = childrenLength > 1 && r > 0 ? -1 /* LEFT */ : 1 /* RIGHT */;
                }
                else {
                    d = direction === -1 /* LEFT */ ? -1 /* LEFT */ : 1 /* RIGHT */;
                }
                // console.log(
                //   `add_node source DIRECTION=${direction} DIRECTION=${d} ${topic}`
                // );
                node = new MindNode(nodeid, nodeindex, topic, false, parentNode, d, expanded);
            }
            else {
                node = new MindNode(nodeid, nodeindex, topic, false, parentNode, parentNode.direction, expanded);
            }
            this.putNode(node);
            parentNode.children.push(node);
            this.reindex(parentNode);
            return node;
        }
        insertNodeBefore(nodeBefore, nodeid, topic) {
            const nodeIndex = nodeBefore.index - 0.5;
            return this.addNode(nodeBefore.parent, nodeid, topic, nodeIndex, null, true);
        }
        getNodeBefore(node) {
            if (node.isroot) {
                return null;
            }
            const idx = node.index - 2;
            if (idx >= 0) {
                return node.parent.children[idx];
            }
            else {
                return null;
            }
        }
        // add little brother node.
        insertNodeAfter(nodeAfter, nodeid, topic) {
            const nodeIndex = nodeAfter.index + 0.5;
            // follow current direction.
            return this.addNode(nodeAfter.parent, nodeid, topic, nodeIndex, nodeAfter.direction, true);
        }
        getNodeAfter(node) {
            if (node.isroot) {
                return null;
            }
            const idx = node.index;
            const brothers = node.parent.children;
            if (brothers.length >= idx) {
                return node.parent.children[idx];
            }
            else {
                return null;
            }
        }
        moveNode(node, beforeid, parent, direction) {
            console.assert(node instanceof MindNode, "node should be Node");
            console.log(`move_node: ${node} ${beforeid} ${parent.id} ${direction}`);
            this.doMoveNode(node, beforeid, parent, direction);
            if (parent.color && node.color != parent.color) {
                /*
                  - root
                    - A: yellow
                    - B: red
          
                  in this case, move A as a child of B, then the expected result is:
          
                  - root
                    - A: yellow
                      - B: yellow
                 */
                node.applyColor(parent.color);
            }
        }
        flowNodeDirection(node, direction) {
            if (typeof direction === "undefined") {
                direction = node.direction;
            }
            else {
                node.direction = direction;
            }
            let len = node.children.length;
            while (len--) {
                this.flowNodeDirection(node.children[len], direction);
            }
        }
        moveNodeInternal(node, beforeid) {
            if (!!node && !!beforeid) {
                if (beforeid === BEFOREID_LAST) {
                    node.index = -1;
                    this.reindex(node.parent);
                }
                else if (beforeid === BEFOREID_FIRST) {
                    node.index = 0;
                    this.reindex(node.parent);
                }
                else {
                    /*
                     * Before:
                     *   - B <- beforeid = 3
                     *   - A <- node     = 4
                     *
                     * After:
                     *   - A <- node     = 3-0.5=2.5
                     *   - B <- beforeid = 3
                     */
                    const nodeBefore = beforeid ? this.getNodeById(beforeid) : null;
                    if (nodeBefore != null &&
                        nodeBefore.parent != null &&
                        nodeBefore.parent.id === node.parent.id) {
                        node.index = nodeBefore.index - 0.5;
                        this.reindex(node.parent);
                    }
                    else {
                        console.error(`Missing node_before: ${beforeid}`);
                    }
                }
            }
            return node;
        }
        doMoveNode(node, beforeid, parent, direction) {
            console.log(`_move_node: node=${node}, ${beforeid}, parentid=${parent.id}, ${direction}`);
            if (!!node && !!parent.id) {
                console.assert(node.parent, `node.parent is null: ${node}`);
                if (node.parent.id !== parent.id) {
                    console.log(`_move_node: node.parent.id!==parentid`);
                    // remove from parent's children
                    const sibling = node.parent.children;
                    let si = sibling.length;
                    while (si--) {
                        console.assert(sibling[si], "sibling[si] is null");
                        if (sibling[si].id === node.id) {
                            sibling.splice(si, 1);
                            break;
                        }
                    }
                    node.parent = this.getNodeById(parent.id);
                    node.parent.children.push(node);
                }
                if (node.parent.isroot) {
                    node.direction = direction;
                }
                else {
                    node.direction = node.parent.direction;
                }
                this.moveNodeInternal(node, beforeid);
                this.flowNodeDirection(node, direction);
            }
        }
        removeNode(node) {
            if (node.isroot) {
                throw new Error("fail, can not remove root node");
            }
            if (this.selected != null && this.selected.id === node.id) {
                this.selected = null;
            }
            // clean all subordinate nodes
            const children = node.children;
            let ci = children.length;
            while (ci--) {
                this.removeNode(children[ci]);
            }
            // clean all children
            children.length = 0;
            // remove from parent's children
            const sibling = node.parent.children;
            let si = sibling.length;
            while (si--) {
                if (sibling[si].id === node.id) {
                    sibling.splice(si, 1);
                    break;
                }
            }
            // remove from global nodes
            delete this.nodes[node.id];
            return true;
        }
        putNode(node) {
            if (node.id in this.nodes) {
                throw new Error("the nodeid '" + node.id + "' has been already exist.");
            }
            this.nodes[node.id] = node;
        }
        reindex(node) {
            // console.debug(
            //   `Before Mind._reindex: ` +
            //     node.children.map((n) => `${n.topic}: ${n.index}`).join("\n")
            // );
            node.children.sort(MindNode.compare);
            for (let i = 0; i < node.children.length; i++) {
                node.children[i].index = i + 1;
            }
            // console.debug(
            //   `After Mind._reindex: ` +
            //     node.children.map((n) => `${n.topic}: ${n.index}`).join("\n")
            // );
        }
    }

    class ClosePoint {
        constructor(node, direction, sp, np) {
            this.node = node;
            this.direction = direction;
            this.sp = sp;
            this.np = np;
        }
    }
    class Draggable {
        constructor(mindCheese) {
            this.lineWidth = 5;
            this.lookupDelay = 500;
            this.lookupInterval = 80;
            this.mindCheese = mindCheese;
            this.canvasElement = Draggable.createCanvas();
            this.mindCheese.view.mindCheeseInnerElement.appendChild(this.canvasElement);
            this.canvasContext = this.canvasElement.getContext("2d");
            this.shadow = Draggable.createShadow();
            this.shadowW = 0;
            this.shadowH = 0;
            this.activeNode = null;
            this.targetNode = null;
            this.targetDirect = null;
            this.clientW = 0;
            this.clientH = 0;
            this.offsetX = 0;
            this.offsetY = 0;
            this.hlookupDelay = 0;
            this.hlookupTimer = 0;
            this.capture = false;
            this.moved = false;
        }
        init(container) {
            this.eventBind(container);
        }
        resize() {
            this.mindCheese.view.mcnodes.appendChild(this.shadow);
            this.canvasElement.width = this.mindCheese.view.size.w;
            this.canvasElement.height = this.mindCheese.view.size.h;
        }
        static createCanvas() {
            const canvasElement = document.createElement("canvas");
            canvasElement.className = "mindcheese-draggable-graph";
            return canvasElement;
        }
        static createShadow() {
            const mcnode = document.createElement("mcnode");
            mcnode.style.visibility = "hidden";
            mcnode.style.zIndex = "3";
            mcnode.style.cursor = "move";
            mcnode.style.opacity = "0.7";
            return mcnode;
        }
        resetShadow(el) {
            const s = this.shadow.style;
            this.shadow.innerHTML = el.innerHTML;
            s.left = el.style.left;
            s.top = el.style.top;
            s.width = el.style.width;
            s.height = el.style.height;
            s.backgroundImage = el.style.backgroundImage;
            s.backgroundSize = el.style.backgroundSize;
            s.transform = el.style.transform;
            this.shadowW = this.shadow.clientWidth;
            this.shadowH = this.shadow.clientHeight;
        }
        showShadow() {
            if (!this.moved) {
                this.shadow.style.visibility = "visible";
            }
        }
        hideShadow() {
            this.shadow.style.visibility = "hidden";
        }
        magnetShadow(sp, np) {
            this.canvasContext.lineWidth = this.lineWidth;
            this.canvasContext.strokeStyle = "rgba(0,0,0,0.3)";
            this.canvasContext.lineCap = "round";
            this.clearLines();
            this.canvasLineTo(sp.x, sp.y, np.x, np.y);
        }
        clearLines() {
            this.canvasContext.clearRect(0, 0, this.mindCheese.view.size.w, this.mindCheese.view.size.h);
        }
        canvasLineTo(x1, y1, x2, y2) {
            this.canvasContext.beginPath();
            this.canvasContext.moveTo(x1, y1);
            this.canvasContext.lineTo(x2, y2);
            this.canvasContext.stroke();
        }
        doLookupCloseNode() {
            const root = this.mindCheese.getRoot();
            const rootLocation = root.getLocation();
            const rootSize = root.getSize();
            const rootX = rootLocation.x + rootSize.w / 2;
            const sw = this.shadowW;
            const sh = this.shadowH;
            const sx = this.shadow.offsetLeft;
            const sy = this.shadow.offsetTop;
            let ns, nl;
            const direct = sx + sw / 2 >= rootX ? 1 /* RIGHT */ : -1 /* LEFT */;
            const nodes = this.mindCheese.mind.nodes;
            let minDistance = Number.MAX_VALUE;
            let closestNode = null;
            let closestPoint = null;
            let shadowPoint = null;
            for (const nodeid in nodes) {
                let np, sp;
                const node = nodes[nodeid];
                let distance = 0;
                if (node.isroot || node.direction == direct) {
                    if (node.id == this.activeNode.id) {
                        continue;
                    }
                    ns = node.getSize();
                    nl = node.getLocation();
                    if (direct == 1 /* RIGHT */) {
                        if (sx - nl.x - ns.w <= 0) {
                            continue;
                        }
                        distance =
                            Math.abs(sx - nl.x - ns.w) +
                                Math.abs(sy + sh / 2 - nl.y - ns.h / 2);
                        np = { x: nl.x + ns.w - this.lineWidth, y: nl.y + ns.h };
                        sp = { x: sx + this.lineWidth, y: sy + sh };
                    }
                    else {
                        if (nl.x - sx - sw <= 0) {
                            continue;
                        }
                        distance =
                            Math.abs(sx + sw - nl.x) + Math.abs(sy + sh / 2 - nl.y - ns.h / 2);
                        np = { x: nl.x + this.lineWidth, y: nl.y + ns.h };
                        sp = { x: sx + sw - this.lineWidth, y: sy + sh };
                    }
                    if (distance < minDistance) {
                        closestNode = node;
                        closestPoint = np;
                        shadowPoint = sp;
                        minDistance = distance;
                    }
                }
            }
            if (closestNode) {
                return new ClosePoint(closestNode, direct, shadowPoint, closestPoint);
            }
            else {
                return null;
            }
        }
        lookupCloseNode() {
            const closePointOrNull = this.doLookupCloseNode();
            if (closePointOrNull) {
                this.magnetShadow(closePointOrNull.sp, closePointOrNull.np);
                this.targetNode = closePointOrNull.node;
                this.targetDirect = closePointOrNull.direction;
            }
        }
        eventBind(container) {
            container.addEventListener("mousedown", this.dragstart.bind(this), false);
            container.addEventListener("mousemove", this.drag.bind(this), false);
            container.addEventListener("mouseup", this.dragend.bind(this), false);
            container.addEventListener("touchstart", this.dragstart.bind(this), false);
            container.addEventListener("touchmove", this.drag.bind(this), false);
            container.addEventListener("touchend", this.dragend.bind(this), false);
        }
        static findMcnode(htmlElement) {
            let el = htmlElement;
            while (el) {
                if (el.tagName.toLowerCase() == "mcnode") {
                    return el;
                }
                el = el.parentElement;
            }
            return null;
        }
        dragstart(e) {
            if (!this.mindCheese.isEditable()) {
                return;
            }
            if (this.capture) {
                return;
            }
            this.activeNode = null;
            const viewProvider = this.mindCheese.view;
            const el = Draggable.findMcnode(e.target);
            if (!el) {
                return;
            }
            const nodeid = viewProvider.getBindedNodeId(el);
            if (nodeid) {
                const node = this.mindCheese.getNodeById(nodeid);
                if (!node.isroot) {
                    this.resetShadow(el);
                    this.activeNode = node;
                    this.offsetX = e.clientX - el.offsetLeft;
                    this.offsetY = e.clientY - el.offsetTop;
                    // this.offsetX = (e.clientX || e.touches[0].clientX) - el.offsetLeft;
                    // this.offset_y = (e.clientY || e.touches[0].clientY) - el.offsetTop;
                    this.clientHW = Math.floor(el.clientWidth / 2);
                    this.clientHH = Math.floor(el.clientHeight / 2);
                    if (this.hlookupDelay !== 0) {
                        window.clearTimeout(this.hlookupDelay);
                    }
                    if (this.hlookupTimer !== 0) {
                        window.clearInterval(this.hlookupTimer);
                    }
                    this.hlookupDelay = window.setTimeout(() => {
                        this.hlookupDelay = 0;
                        this.hlookupTimer = window.setInterval(this.lookupCloseNode.bind(this), this.lookupInterval);
                    }, this.lookupDelay);
                    this.capture = true;
                }
            }
        }
        drag(e) {
            if (!this.mindCheese.isEditable()) {
                return;
            }
            if (this.capture) {
                e.preventDefault();
                this.showShadow();
                this.moved = true;
                window.getSelection().removeAllRanges();
                const px = e.clientX - this.offsetX;
                const py = e.clientY - this.offsetY;
                // const px = (e.clientX || e.touches[0].clientX) - this.offsetX;
                // const py = (e.clientY || e.touches[0].clientY) - this.offset_y;
                this.shadow.style.left = px + "px";
                this.shadow.style.top = py + "px";
                window.getSelection().removeAllRanges();
            }
        }
        dragend() {
            if (!this.mindCheese.isEditable()) {
                return;
            }
            if (this.capture) {
                if (this.hlookupDelay !== 0) {
                    window.clearTimeout(this.hlookupDelay);
                    this.hlookupDelay = 0;
                    this.clearLines();
                }
                if (this.hlookupTimer !== 0) {
                    window.clearInterval(this.hlookupTimer);
                    this.hlookupTimer = 0;
                    this.clearLines();
                }
                if (this.moved) {
                    const srcNode = this.activeNode;
                    const targetNode = this.targetNode;
                    const targetDirect = this.targetDirect;
                    this.moveNode(srcNode, targetNode, targetDirect);
                }
                this.hideShadow();
            }
            this.moved = false;
            this.capture = false;
        }
        moveNode(srcNode, targetNode, targetDirect) {
            console.log(`Draggable.moveNode: ${srcNode} ${targetNode} ${targetDirect}`);
            const shadowH = this.shadow.offsetTop;
            if (!!targetNode && !!srcNode && !MindNode.inherited(srcNode, targetNode)) {
                console.log(`let's move!`);
                // lookup before_node
                const siblingNodes = targetNode.children;
                let sc = siblingNodes.length;
                let node = null;
                let deltaY = Number.MAX_VALUE;
                let nodeBefore = null;
                let beforeid = BEFOREID_LAST;
                while (sc--) {
                    node = siblingNodes[sc];
                    if (node.direction === targetDirect && node.id !== srcNode.id) {
                        const dy = node.getLocation().y - shadowH;
                        if (dy > 0 && dy < deltaY) {
                            deltaY = dy;
                            nodeBefore = node;
                            beforeid = BEFOREID_FIRST;
                        }
                    }
                }
                if (nodeBefore) {
                    beforeid = nodeBefore.id;
                }
                console.log(`Calling jm.move_node: ${srcNode.id}, ${beforeid}, ${targetNode.id}, ${targetDirect}`);
                this.mindCheese.moveNode(srcNode, beforeid, targetNode, targetDirect);
            }
            this.activeNode = null;
            this.targetNode = null;
            this.targetDirect = null;
        }
    }

    class UndoManager {
        constructor(jm, undoStackLimit = 10000) {
            this.mindCheese = jm;
            this.undoStack = [];
            this.undoStackLimit = undoStackLimit;
        }
        /**
         * Before every editing graph, call this method.
         */
        recordSnapshot() {
            if (this.undoStack.length > this.undoStackLimit) {
                console.log(`UndoManager: callback event. too much stacks.`);
                this.undoStack.shift();
            }
            console.log(`UndoManager: callback event pushing.`);
            this.undoStack.push(this.mindCheese.getNodeTree());
        }
        undo() {
            const item = this.undoStack.pop();
            if (item) {
                const data = item;
                console.log(`UndoManager: undo. data=${data}`);
                this.mindCheese.showNodeTree(data);
            }
            else {
                console.log(`UndoManager: undo. stack is empty.`);
            }
        }
    }

    class GraphCanvas {
        /**
         * Create new instance of GraphCanvas.
         *
         * @param lineColor color of lines. CSS compatible colors are ok. e.g. "#ffffff"
         * @param lineWidth Pixel of line width.
         */
        constructor(lineColor, lineWidth) {
            this.lineColor = lineColor;
            this.lineWidth = lineWidth;
            this.canvasElement = document.createElement("canvas");
            this.canvasElement.className = "mindcheese-graph-canvas";
            this.canvasContext = this.canvasElement.getContext("2d");
            this.size = new Size(0, 0);
        }
        element() {
            return this.canvasElement;
        }
        setSize(w, h) {
            this.size.w = w;
            this.size.h = h;
            this.canvasElement.width = w;
            this.canvasElement.height = h;
        }
        clear() {
            this.canvasContext.clearRect(0, 0, this.size.w, this.size.h);
        }
        drawLine(pout, pin, offset, color, lineCap) {
            const ctx = this.canvasContext;
            ctx.strokeStyle = color;
            ctx.lineWidth = this.lineWidth;
            ctx.lineCap = lineCap;
            GraphCanvas.bezierTo(ctx, pin.x + offset.x, pin.y + offset.y, pout.x + offset.x, pout.y + offset.y);
        }
        static bezierTo(ctx, x1, y1, x2, y2) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.bezierCurveTo(x1 + ((x2 - x1) * 2) / 3, y1, x1, y2, x2, y2);
            ctx.stroke();
        }
    }

    /*
    {
        { "id": "root", "topic": "mindCheese Example" }
    }
     */
    // Convert plain node tree to Mind object.
    function object2mindmap(source) {
        const mind = new Mind();
        parse$1(mind, source);
        return mind;
    }
    function parse$1(mind, nodeRoot) {
        mind.setRoot(nodeRoot.id, nodeRoot.topic);
        if ("children" in nodeRoot) {
            const children = nodeRoot.children;
            for (let i = 0; i < children.length; i++) {
                extractSubNode(mind, mind.root, children[i]);
            }
        }
    }
    function extractSubNode(mind, nodeParent, nodeJson) {
        let d = null;
        if (nodeParent.isroot) {
            d = nodeJson.direction == "left" ? -1 /* LEFT */ : 1 /* RIGHT */;
        }
        // console.log(
        //   `_extract_subnode node_json.direction DIRECTION=${nodeJson.direction} d=${d} ${nodeJson.topic}`
        // );
        const node = mind.addNode(nodeParent, nodeJson.id, nodeJson.topic, null, d, typeof nodeJson.expanded === "undefined" ? true : !!nodeJson.expanded);
        if ("children" in nodeJson) {
            const children = nodeJson.children;
            for (let i = 0; i < children.length; i++) {
                extractSubNode(mind, node, children[i]);
            }
        }
    }

    class ShortcutHandlers {
        static delete(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (!!selectedNode && !selectedNode.isroot) {
                mindCheese.selectNode(selectedNode.parent);
                mindCheese.removeNode(selectedNode);
            }
            return false;
        }
        static addChild(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                const nodeid = mindCheese.generateNewId();
                const node = mindCheese.addNode(selectedNode, nodeid, "New Node");
                if (node) {
                    mindCheese.selectNode(node);
                    mindCheese.beginEdit(node);
                }
            }
            return false;
        }
        static addBrother(mindCheese, e) {
            e.preventDefault();
            const selectedNode = mindCheese.getSelectedNode();
            if (!!selectedNode && !selectedNode.isroot) {
                const nodeid = mindCheese.generateNewId();
                const node = mindCheese.insertNodeAfter(selectedNode, nodeid, "New Node");
                if (node) {
                    mindCheese.selectNode(node);
                    mindCheese.beginEdit(node);
                }
            }
            return false;
        }
        static editNode(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.beginEdit(selectedNode);
            }
            return false;
        }
        static toggle(mindCheese, e) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.toggleNode(selectedNode);
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        static moveUp(mindCheese) {
            console.debug(`ShortcutProvider.handle_move_up`);
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.moveUp(selectedNode);
                mindCheese.selectNode(selectedNode);
            }
            return false;
        }
        static moveDown(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.moveDown(selectedNode);
                mindCheese.selectNode(selectedNode);
            }
            return false;
        }
        static up(mindCheese, e) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode.isroot) {
                return false;
            }
            if (selectedNode) {
                let upNode = mindCheese.findNodeBefore(selectedNode);
                if (!upNode) {
                    const np = mindCheese.findNodeBefore(selectedNode.parent);
                    if (!!np && np.children.length > 0) {
                        upNode = np.children[np.children.length - 1];
                    }
                }
                if (upNode) {
                    mindCheese.selectNode(upNode);
                }
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        static down(mindCheese, e) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode.isroot) {
                return false;
            }
            if (selectedNode) {
                let downNode = mindCheese.findNodeAfter(selectedNode);
                if (!downNode) {
                    const np = mindCheese.findNodeAfter(selectedNode.parent);
                    if (!!np && np.children.length > 0) {
                        downNode = np.children[0];
                    }
                }
                if (downNode) {
                    mindCheese.selectNode(downNode);
                }
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        static left(mindCheese, e) {
            ShortcutHandlers.handleDirection(mindCheese, e, -1 /* LEFT */);
            return false;
        }
        static right(mindCheese, e) {
            ShortcutHandlers.handleDirection(mindCheese, e, 1 /* RIGHT */);
            return false;
        }
        static handleDirection(mindCheese, e, d) {
            let children; // TODO maybe optimizable
            const selectedNode = mindCheese.getSelectedNode();
            let node = null;
            if (selectedNode) {
                if (selectedNode.isroot) {
                    const c = selectedNode.children;
                    children = [];
                    for (let i = 0; i < c.length; i++) {
                        if (c[i].direction === d) {
                            children.push(i);
                        }
                    }
                    node = c[children[Math.floor((children.length - 1) / 2)]];
                }
                else if (selectedNode.direction === d) {
                    children = selectedNode.children;
                    const childrenCount = children.length;
                    if (childrenCount > 0) {
                        node = children[Math.floor((childrenCount - 1) / 2)];
                    }
                }
                else {
                    node = selectedNode.parent;
                }
                if (node) {
                    mindCheese.selectNode(node);
                }
                e.stopPropagation();
                e.preventDefault();
            }
        }
        static undo(mindCheese, e) {
            console.log("UNDO!");
            mindCheese.undo();
            e.stopPropagation();
            e.preventDefault();
            return false;
        }
    }

    const SPECIAL = {
        "&": "&amp;",
        ">": "&gt;",
        "<": "&lt;",
        '"': "&quot;",
        "'": "&#39;",
        "`": "&#96;",
        "{": "&#123;",
        "}": "&#125;",
    };
    function escapeHtml(src) {
        return src.replace(/([&><"'`{}])/g, (_, sp) => {
            return SPECIAL[sp];
        });
    }
    class MarkdownRenderer {
        render(src) {
            return src.replace(/(\n)|\*\*(.*?)\*\*|\*(.*?)\*|`(.*?)`|([&><"'`{}])|(.)/g, (_, nl, bold, italic, code, sp, dot) => {
                if (nl) {
                    return "<br>";
                }
                else if (bold) {
                    return `<b>${escapeHtml(bold)}</b>`;
                }
                else if (italic) {
                    return `<i>${escapeHtml(italic)}</i>`;
                }
                else if (code) {
                    return `<code>${escapeHtml(code)}</code>`;
                }
                else if (sp) {
                    return SPECIAL[sp];
                }
                else if (dot) {
                    return dot;
                }
            });
        }
    }

    class MindOption {
        constructor() {
            this.theme = "primary";
            this.view = new ViewOption();
            this.layout = new LayoutOption();
            this.shortcut = new ShortcutOption();
        }
    }
    class ViewOption {
        constructor() {
            this.hmargin = 100; // Minimum horizontal distance of the mindmap from the outer frame of the container
            this.vmargin = 50; // Minimum vertical distance of the mindmap from the outer frame of the container
            this.lineWidth = 2;
            this.lineColor = "#555";
            this.renderer = new MarkdownRenderer();
        }
    }
    class LayoutOption {
        constructor() {
            this.hspace = 30; // horizontal spacing between nodes
            this.vspace = 20; // vspace vertical spacing between nodes
            this.pspace = 13; // Horizontal spacing between node and connection line (to place node expander)
        }
    }
    class ShortcutOption {
        constructor() {
            this.enable = true;
            this.mappings = [
                [0 /* NONE */, "Delete", ShortcutHandlers.delete],
                [0 /* NONE */, "Backspace", ShortcutHandlers.delete],
                [0 /* NONE */, "Tab", ShortcutHandlers.addChild],
                [0 /* NONE */, "Enter", ShortcutHandlers.addBrother],
                [4 /* CTRL */, "Enter", ShortcutHandlers.editNode],
                [2 /* META */, "Enter", ShortcutHandlers.editNode],
                [0 /* NONE */, "Space", ShortcutHandlers.toggle],
                [16 /* SHIFT */, "ArrowUp", ShortcutHandlers.moveUp],
                [16 /* SHIFT */, "ArrowDown", ShortcutHandlers.moveDown],
                [0 /* NONE */, "ArrowUp", ShortcutHandlers.up],
                [0 /* NONE */, "ArrowDown", ShortcutHandlers.down],
                [0 /* NONE */, "ArrowLeft", ShortcutHandlers.left],
                [0 /* NONE */, "ArrowRight", ShortcutHandlers.right],
                [4 /* CTRL */, "KeyZ", ShortcutHandlers.undo],
                [2 /* META */, "KeyZ", ShortcutHandlers.undo], // for mac
            ];
        }
    }

    function mindmap2markdown(mind) {
        return renderMarkdown(mind.root, 0);
    }
    function renderMarkdown(node, level) {
        let result = "";
        if (node.topic) {
            const lines = node.topic.split("\n");
            for (let i = 0; i < lines.length; i++) {
                for (let j = 0; j < level; j++) {
                    result += "\t";
                }
                if (i === 0) {
                    result += node.direction == -1 /* LEFT */ ? "+ " : "- ";
                }
                else {
                    result += "  ";
                }
                result += lines[i];
                if (i + 1 < lines.length) {
                    result += " \\";
                }
                result += "\n";
            }
        }
        if (node.children) {
            const children = node.children;
            for (let i = 0, l = children.length; i < l; i++)
                result += renderMarkdown(children[i], level + 1);
        }
        return result;
    }

    function parse(md) {
        if (md == null) {
            throw new Error("md should not be null");
        }
        const lines = md.split(/\n/);
        let lastSpaces = "";
        const root = {
            id: "root",
            topic: "DUMMY",
            children: [],
        };
        let i = 0;
        let lastElement = root;
        const anchor = {
            0: root,
        };
        let isContinuous = false;
        for (const line of lines) {
            // skip empty line
            if (!line.match(/\S/)) {
                continue;
            }
            if (isContinuous) {
                let body = line;
                if (body.match(/ [\\ ]$/)) {
                    // multi-line bullet list.
                    body = body.replace(/ [\\ ]$/, "");
                    isContinuous = true;
                }
                else {
                    isContinuous = false;
                }
                for (let j = 0; j < lastSpaces.length + 2; j++) {
                    body = body.replace(/^\s/, "");
                }
                lastElement.topic += "\n" + body;
            }
            else {
                const match = line.match(/^(\s*)([+-])\s*(.*?)$/);
                if (!match) {
                    console.log(`'${line}' is not a bullet list.`);
                    continue;
                }
                const leadingSpaces = match[1];
                const directionCharacter = match[2];
                let body = match[3];
                if (body.match(/ [\\ ]$/)) {
                    // multi-line bullet list.
                    body = body.replace(/ [\\ ]$/, "");
                    isContinuous = true;
                }
                else {
                    isContinuous = false;
                }
                // console.log(`lead=${leadingSpaces.length} body=${body} root=${JSON.stringify(root)}`);
                const el = {
                    id: ++i,
                    topic: body,
                    direction: directionCharacter === "+" ? "left" : "right",
                    children: [],
                };
                if (lastSpaces.length === leadingSpaces.length) ;
                else if (lastSpaces.length < leadingSpaces.length) {
                    // indent
                    // console.log('indent')
                    anchor[leadingSpaces.length] = lastElement;
                }
                else ;
                anchor[leadingSpaces.length].children.push(el);
                lastElement = el;
                lastSpaces = leadingSpaces;
            }
        }
        const realRoot = root.children[0];
        if (!realRoot) {
            throw new Error("MindCheese can't parse this markdown as a mindmap: '" + md + "'");
        }
        if ("direction" in realRoot) {
            delete realRoot["direction"];
        }
        return realRoot;
    }
    function markdown2mindmap(md) {
        const tree = parse(md.replace(/^---$.*^---$/ms, ""));
        return object2mindmap(tree);
    }

    function isEmpty(s) {
        if (!s) {
            return true;
        }
        return s.replace(/\s*/, "").length == 0;
    }
    class MindCheese {
        constructor(id, container, options = new MindOption()) {
            if (!container) {
                throw new Error("container shouldn't be null!");
            }
            this.container = container;
            this.options = options;
            this.mind = new Mind();
            this.id = id;
            this.editable = true;
            // create instance of function provider
            const graph = new GraphCanvas(options.view.lineColor, options.view.lineWidth);
            this.layout = new LayoutProvider(this, options.layout.hspace, options.layout.vspace, options.layout.pspace, graph);
            this.view = new ViewProvider(this, options.view.hmargin, options.view.vmargin, graph, options.view.renderer);
            this.shortcut = new ShortcutProvider(this, options.shortcut.enable, options.shortcut.mappings);
            this.draggable = new Draggable(this);
            this.undoManager = new UndoManager(this);
            this.view.init(this.container);
            this.draggable.init(this.container);
            this.shortcut.bindKeyEvents();
            this.bindEvent();
        }
        enableEdit() {
            this.editable = true;
        }
        disableEdit() {
            this.editable = false;
        }
        isEditable() {
            return this.editable;
        }
        checkEditable() {
            if (!this.editable) {
                throw new Error("fail, this mind map is not editable");
            }
        }
        setTheme(theme) {
            const themeOld = this.options.theme;
            this.options.theme = theme ? theme : null;
            if (themeOld !== this.options.theme) {
                this.view.resetTheme();
            }
        }
        bindEvent() {
            this.view.mcnodes.addEventListener("mousedown", this.mousedownHandle.bind(this));
            this.view.mcnodes.addEventListener("click", this.clickHandle.bind(this));
            this.view.mcnodes.addEventListener("dblclick", this.dblclickHandle.bind(this));
            window.addEventListener("resize", () => {
                this.resize();
                return false;
            });
        }
        mousedownHandle(e) {
            const element = e.target;
            const nodeid = this.view.getBindedNodeId(element);
            if (nodeid) {
                if (element.tagName.toLowerCase() === "mcnode") {
                    const theNode = this.getNodeById(nodeid);
                    if (!theNode) {
                        throw new Error("the node[id=" + nodeid + "] can not be found.");
                    }
                    else {
                        return this.selectNode(theNode);
                    }
                }
            }
            else {
                this.selectClear();
            }
        }
        clickHandle(e) {
            const element = e.target;
            const isexpander = this.view.isExpander(element);
            if (isexpander) {
                const nodeid = this.view.getBindedNodeId(element);
                if (nodeid) {
                    const theNode = this.getNodeById(nodeid);
                    if (!theNode) {
                        throw new Error("the node[id=" + nodeid + "] can not be found.");
                    }
                    else {
                        return this.toggleNode(theNode);
                    }
                }
            }
        }
        dblclickHandle(e) {
            this.checkEditable();
            e.preventDefault();
            e.stopPropagation();
            const element = e.target;
            const nodeid = this.view.getBindedNodeId(element);
            if (nodeid) {
                if (nodeid) {
                    const theNode = this.getNodeById(nodeid);
                    if (!theNode) {
                        throw new Error(`the node[id=${nodeid}] can not be found.`);
                    }
                    return this.beginEdit(theNode);
                }
            }
        }
        beginEdit(node) {
            this.checkEditable();
            this.view.editNodeBegin(node);
        }
        endEdit() {
            this.view.editNodeEnd();
        }
        toggleNode(node) {
            if (node.isroot) {
                return;
            }
            const location = this.view.takeLocation(node);
            this.layout.toggleNode(node);
            this.view.show();
            this.view.restoreLocation(node, location);
        }
        expandNode(node) {
            if (node.isroot) {
                return;
            }
            const location = this.view.takeLocation(node);
            this.layout.expandNode(node);
            this.view.show();
            this.view.restoreLocation(node, location);
        }
        collapseNode(node) {
            if (node.isroot) {
                return;
            }
            const location = this.view.takeLocation(node);
            this.layout.collapseNode(node);
            this.view.show();
            this.view.restoreLocation(node, location);
        }
        expandAll() {
            this.layout.expandAll();
            this.view.show();
        }
        collapseAll() {
            this.layout.collapseAll();
            this.view.show();
        }
        expandToDepth(depth) {
            this.layout.expandToDepth(depth, null, null);
            this.view.show();
        }
        doReset() {
            this.view.reset();
            this.layout.reset();
        }
        doShow(mind) {
            this.mind = mind;
            this.view.load();
            this.layout.layout();
            this.view.show();
            this.view.centerRoot();
        }
        // nodeTree = object representation of the mindmap.
        showNodeTree(nodeTree) {
            this.doReset();
            this.doShow(object2mindmap(nodeTree));
        }
        showMarkdown(body) {
            this.doReset();
            this.doShow(markdown2mindmap(body));
        }
        getMarkdown() {
            // return convertMM2MD(this.mind.root.toObject());
            return mindmap2markdown(this.mind);
        }
        getNodeTree() {
            return this.mind.root.toObject();
        }
        getRoot() {
            return this.mind.root;
        }
        getNodeById(nodeid) {
            return this.mind.getNodeById(nodeid);
        }
        addNode(parentNode, nodeid, topic) {
            this.checkEditable();
            this.undoManager.recordSnapshot();
            const node = this.mind.addNode(parentNode, nodeid, topic, null, null, true);
            if (node) {
                this.view.addNode(node);
                this.layout.layout();
                this.view.show();
                this.expandNode(parentNode);
            }
            return node;
        }
        insertNodeBefore(nodeBefore, nodeid, topic) {
            this.checkEditable();
            this.undoManager.recordSnapshot();
            const node = this.mind.insertNodeBefore(nodeBefore, nodeid, topic);
            if (node) {
                this.view.addNode(node);
                this.layout.layout();
                this.view.show();
            }
            return node;
        }
        insertNodeAfter(nodeAfter, nodeid, topic) {
            this.checkEditable();
            this.undoManager.recordSnapshot();
            const node = this.mind.insertNodeAfter(nodeAfter, nodeid, topic);
            this.view.addNode(node);
            this.layout.layout();
            this.view.show();
            return node;
        }
        removeNode(node) {
            this.checkEditable();
            if (node.isroot) {
                throw new Error("fail, can not remove root node");
            }
            const nodeid = node.id;
            const parentNode = node.parent;
            this.undoManager.recordSnapshot();
            const nextSelectedNode = this.findUpperBrotherOrParentNode(parentNode, nodeid);
            const location = this.view.takeLocation(node);
            this.view.removeNode(node);
            this.mind.removeNode(node);
            this.layout.layout();
            this.view.show();
            if (parentNode.children.length > 0) {
                this.mind.selected = nextSelectedNode;
                this.view.selectNode(nextSelectedNode);
            }
            this.view.restoreLocation(parentNode, location);
            return true;
        }
        findUpperBrotherOrParentNode(parentNode, targetNodeId) {
            const children = parentNode.children;
            for (let i = 0; i < children.length; i++) {
                if (children[i].id == targetNodeId) {
                    if (i == 0) {
                        return parentNode;
                    }
                    else {
                        return children[i - 1];
                    }
                }
            }
            return parentNode; // return
        }
        // set topic to the node
        updateNode(nodeid, topic) {
            this.checkEditable();
            if (isEmpty(topic)) {
                throw new Error("fail, topic can not be empty");
            }
            const node = this.getNodeById(nodeid);
            if (!node) {
                throw new Error(`Unknown node: ${nodeid}`);
            }
            this.undoManager.recordSnapshot();
            if (node.topic === topic) {
                console.info("nothing changed");
                this.view.updateNode(node);
                return;
            }
            node.topic = topic;
            this.view.updateNode(node);
            this.layout.layout();
            this.view.show();
        }
        /**
         * @param node Target node to move.
         * @param beforeid Move nodeid's node to above of the *beforeid*. You can use BEFOREID_* constants.
         * @param parent
         * @param direction
         */
        moveNode(node, beforeid, parent, direction) {
            console.log(`jm.move_node: ${node.id} ${beforeid} ${parent.id} ${direction}`);
            this.checkEditable();
            this.undoManager.recordSnapshot();
            this.mind.moveNode(node, beforeid, parent, direction);
            this.view.updateNode(node);
            this.layout.layout();
            this.view.show();
        }
        selectNode(node) {
            if (!node.data.layout.visible) {
                return;
            }
            this.mind.selected = node;
            this.view.selectNode(node);
        }
        getSelectedNode() {
            if (this.mind) {
                return this.mind.selected;
            }
            else {
                return null;
            }
        }
        selectClear() {
            if (this.mind) {
                this.mind.selected = null;
                this.view.selectClear();
            }
        }
        findNodeBefore(node) {
            if (node.isroot) {
                return null;
            }
            if (node.parent.isroot) {
                const children = node.parent.children.filter((it) => it.direction === node.direction);
                for (let i = 0; i < children.length; i++) {
                    const ni = children[i];
                    if (node.id === ni.id) {
                        if (i !== 0) {
                            return children[i - 1];
                        }
                        else {
                            return null;
                        }
                    }
                }
                throw new Error(`Missing the node in parent: ${node.id}`);
            }
            else {
                return this.mind.getNodeBefore(node);
            }
        }
        findNodeAfter(node) {
            if (node.isroot) {
                return null;
            }
            if (node.parent.isroot) {
                const children = node.parent.children.filter((it) => it.direction == node.direction);
                for (let i = 0; i < children.length; i++) {
                    const ni = children[i];
                    if (node.id === ni.id) {
                        if (i + 1 < children.length) {
                            return children[i + 1];
                        }
                        else {
                            return null; // the last node.
                        }
                    }
                }
                throw new Error(`Illegal state. The parent node doesn't have this child: ${node.id}`);
            }
            else {
                return this.mind.getNodeAfter(node);
            }
        }
        resize() {
            console.log("MindCheese.resize()");
            this.view.resize();
        }
        undo() {
            this.undoManager.undo();
        }
        moveUp(node) {
            /*
            as-is:
              - a
               - foo
               - bar      ← selected node.
        
            after:
              - a
                - bar      ← target node
                - foo
             */
            const upNode = this.findNodeBefore(node);
            if (upNode) {
                this.moveNode(node, upNode.id, node.parent, node.direction);
                return;
            }
        }
        moveDown(node) {
            const children = node.parent.children.filter((it) => it.direction === node.direction);
            for (let i = 0; i < children.length; i++) {
                if (children[i].id == node.id) {
                    if (i === children.length - 1) {
                        // already in the last.
                        return; // do nothing
                    }
                    else if (i === children.length - 2) {
                        // already in the above of the last one.
                        /*
                         * before:
                         *   - a
                         *     - b = 1
                         *     - c = 2
                         *
                         * after:
                         *   - a
                         *     - c = 2
                         *     - b = LAST
                         */
                        this.moveNode(node, BEFOREID_LAST, node.parent, node.direction);
                        return; // Put on last element.
                    }
                    else {
                        /*
                         * before:
                         *   - a
                         *     - b = 1 ← node.id
                         *     - c = 2
                         *     - d = 3 ← beforeid
                         *
                         * after:
                         *   - a
                         *     - c = 2
                         *     - b = 3-0.5=2.5
                         *     - d = 3
                         */
                        console.debug(`MindCheese.moveDown: topic=${node.topic} before.topic=${children[i + 1].topic} direction=${node.direction}`);
                        this.moveNode(node, children[i + 2].id, node.parent, node.direction);
                        console.log(this.mind);
                        return;
                    }
                }
            }
        }
        generateNewId() {
            return (new Date().getTime().toString(16) + Math.random().toString(16).substr(2)).substr(2, 16);
        }
    }

    const DEMO_NODE_TREE = {
        id: "root",
        topic: "mindCheese 🧀",
        children: [
            {
                id: "easy",
                topic: "Easy",
                direction: "left",
                children: [
                    { id: "easy1", topic: "Easy to show" },
                    { id: "easy2", topic: "Easy to edit" },
                    { id: "easy3", topic: "Easy to store" },
                    { id: "easy4", topic: "Easy to embed" },
                ],
            },
            {
                id: "open",
                topic: "Open Source",
                direction: "right",
                children: [
                    { id: "open1", topic: "on GitHub" },
                    { id: "open2", topic: "BSD License" },
                ],
            },
            {
                id: "powerful",
                topic: "Powerful",
                direction: "right",
                children: [
                    { id: "powerful1", topic: "Base on **TypeScript**" },
                    {
                        id: "powerful2",
                        topic: "Base on **jsMind**",
                        children: [
                            { id: "jsMind1", topic: "Base on HTML5" },
                            { id: "jsMind2", topic: "Supported CJK chars" },
                        ],
                    },
                    { id: "powerful4", topic: "Depends on you" },
                ],
            },
            {
                id: "other",
                topic: "test node",
                direction: "left",
                children: [
                    { id: "other1", topic: "I'm from local variable" },
                    { id: "other2", topic: "I can do everything: `3*2`" },
                ],
            },
        ],
    };
    const DEMO_MARKDOWN = `- マークダウンのテスト
  - a1
    - b1
        - dddddddddddddddddddd1
          - eeeeeeeeeeeeeeeeeeeeee2
            - ffffffffffffffffffffff3
              - gggggggggggggggggggggggggg3
                - hhhhhhhhhhhhhhhhhhhhhh2
                  - iiiiiiiiiiiiii52iiiiiiiiiii
                    - jjjjjjjjjjjjjj25jjjjjjjjjjjj
                      - kkkkkkkkk2342kkkkkkkkkkkkkkkkk2
                        - lllllllllll52llllllllllllllllllll
    - b2
    - b3
      - c1
      - c2
        - dddddddddddddddddddd
          - eeeeeeeeeeeeeeeeeeeeee
            - ffffffffffffffffffffff
              - gggggggggggggggggggggggggg
                - hhhhhhhhhhhhhhhhhhhhhh
                  - iiiiiiiiiiiiiiiiiiiiiiiii
                    - jjjjjjjjjjjjjjjjjjjjjjjjjj
                      - kkkkkkkkkkkkkkkkkkkkkkkkkk
                        - lllllllllllllllllllllllllllllll
  + a2 \\
    複数行だよ
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
`;

    console.log("Loaded browser.ts");
    function downloadText(filename, text) {
        const element = document.createElement("a");
        element.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(text));
        element.setAttribute("download", filename);
        element.style.display = "none";
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }
    function initDemo() {
        const container = document.getElementById("container");
        const mindCheese = new MindCheese(1, container);
        mindCheese.showNodeTree(DEMO_NODE_TREE);
        document.getElementById("download_json").addEventListener("click", () => {
            const data = mindCheese.getNodeTree();
            downloadText(encodeURIComponent(mindCheese.mind.root.topic) + ".json", JSON.stringify(data, null, 2));
            return false;
        });
        document.getElementById("download_markdown").addEventListener("click", () => {
            const data = mindCheese.getMarkdown();
            downloadText(encodeURIComponent(mindCheese.mind.root.topic) + ".md", data);
            return false;
        });
        document.getElementById("undo").addEventListener("click", () => {
            mindCheese.undo();
            return false;
        });
        if (process.env.BUILD == "development") {
            document.getElementById("load_markdown").addEventListener("click", () => {
                mindCheese.showMarkdown(DEMO_MARKDOWN);
                return false;
            });
        }
        else {
            document.getElementById("navItemDebug").style.display = "none";
        }
        let themeMode = true;
        document.getElementById("toggle_theme").addEventListener("click", () => {
            mindCheese.setTheme(themeMode ? "dark" : "primary");
            themeMode = !themeMode;
            return false;
        });
    }
    // @ts-ignore
    window.initDemo = initDemo;

    return initDemo;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
