/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

var browser = (function () {
    'use strict';

    (function() {
        const env = {"BUILD":"production"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    class Size {
        constructor(width, height) {
            this.width = width;
            this.height = height;
        }
    }

    class Point {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }
    class CenterOfNodeOffsetFromRootNode {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }
    class OffsetFromTopLeftOfMcnodes {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
    }
    class RootNodeOffsetFromTopLeftOfMcnodes extends OffsetFromTopLeftOfMcnodes {
        convertCenterOfNodeOffsetFromRootNode(offset) {
            return new OffsetFromTopLeftOfMcnodes(this.x + offset.x, this.y + offset.y);
        }
    }
    class Bounds {
        constructor(n, e, w, s) {
            this.n = n;
            this.e = e;
            this.w = w;
            this.s = s;
            this.size = new Size(this.e + this.w * -1, this.s + this.n * -1);
            console.log(`size: e=${e},w=${w},s=${s},n=${n} w=${this.size.width},h=${this.size.height}`);
        }
    }
    class LayoutProvider {
        /**
         * The constructor
         * @param mindCheese MindCheese instance
         * @param hspace horizontal spacing between nodes
         * @param vspace vertical spacing between nodes
         * @param pspace Horizontal spacing between node and connection line (to place node expander)
         * @param graphCanvas
         */
        constructor(mindCheese, hspace, vspace, pspace, graphCanvas) {
            this.hSpace = hspace;
            this.vSpace = vspace;
            this.pSpace = pspace;
            this.mindCheese = mindCheese;
            this.graphCanvas = graphCanvas;
        }
        reset() {
            console.debug("layout.reset");
        }
        layout() {
            const rootNode = this.mindCheese.mind.root;
            rootNode.data.layout.relativeCenterOffsetX = 0;
            rootNode.data.layout.relativeCenterOffsetY = 0;
            this.layoutOffsetSubNodes(rootNode.children.filter((it) => it.direction == -1 /* LEFT */));
            this.layoutOffsetSubNodes(rootNode.children.filter((it) => it.direction == 1 /* RIGHT */));
        }
        // layout both the x and y axis
        layoutOffsetSubNodes(nodes) {
            var _a;
            if (nodes.length == 0) {
                return 0;
            }
            let totalHeight = 0;
            {
                let baseY = 0;
                for (let i = 0, l = nodes.length; i < l; i++) {
                    const node = nodes[i];
                    const layoutData = node.data.layout;
                    const childrenHeight = this.layoutOffsetSubNodes(node.children);
                    const nodeOuterHeight = Math.max(node.data.view.height, node.expanded ? childrenHeight : 0);
                    layoutData.relativeCenterOffsetY = baseY + nodeOuterHeight / 2;
                    layoutData.relativeCenterOffsetX =
                        this.hSpace * node.direction +
                            (node.parent.data.view.width / 2) * node.direction +
                            this.hSpace * node.direction +
                            (node.data.view.width / 2) * node.direction +
                            (((_a = node.parent) === null || _a === void 0 ? void 0 : _a.isroot) ? 0 : this.pSpace * node.direction);
                    baseY += nodeOuterHeight + this.vSpace;
                    totalHeight += nodeOuterHeight;
                }
            }
            if (nodes.length > 1) {
                totalHeight += this.vSpace * (nodes.length - 1);
            }
            {
                const middleHeight = totalHeight / 2;
                for (let i = 0, l = nodes.length; i < l; i++) {
                    nodes[i].data.layout.relativeCenterOffsetY -= middleHeight;
                }
            }
            return totalHeight;
        }
        getTopLeft(node) {
            const viewData = node.data.view;
            const offsetPoint = node.getCenterOffsetOfTheNodeFromRootNode();
            if (node.isroot) {
                const x = offsetPoint.x + (viewData.width / 2) * -1;
                const y = offsetPoint.y - viewData.height - this.graphCanvas.lineWidth;
                return new CenterOfNodeOffsetFromRootNode(x, y);
            }
            else {
                // XXX To be honest, I think we should think about the **direction**,
                // but it is buggy when used in calculations. A mystery.
                const x = offsetPoint.x + (viewData.width / 2) * -1;
                const y = offsetPoint.y - viewData.height / 2 - this.graphCanvas.lineWidth;
                return new CenterOfNodeOffsetFromRootNode(x, y);
            }
        }
        /**
         * https://github.com/tokuhirom/mindcheese/blob/main/docs/images/pointin.png?raw=true
         */
        getNodePointIn(node) {
            const point = node.getCenterOffsetOfTheNodeFromRootNode();
            return new CenterOfNodeOffsetFromRootNode(point.x - (node.data.view.width / 2) * node.direction, point.y + node.data.view.height / 2);
        }
        /**
         * https://github.com/tokuhirom/mindcheese/blob/main/docs/images/pointout.png?raw=true
         */
        getNodePointOutWithDestination(node, destination) {
            if (node.isroot) {
                const x = (node.data.view.width / 2) * destination.direction;
                return new CenterOfNodeOffsetFromRootNode(x, -(node.data.view.height / 2));
            }
            else {
                const offsetPoint = node.getCenterOffsetOfTheNodeFromRootNode();
                const x = offsetPoint.x +
                    (node.data.view.width / 2 + this.pSpace) * node.direction;
                return new CenterOfNodeOffsetFromRootNode(x, offsetPoint.y + node.data.view.height / 2);
            }
        }
        getAdderPoint(node) {
            return this.getExpanderPoint(node);
        }
        getExpanderPoint(node) {
            const offsetPoint = node.getCenterOffsetOfTheNodeFromRootNode();
            const x = offsetPoint.x +
                (node.data.view.width / 2 + this.pSpace) * node.direction -
                (node.direction == 1 /* RIGHT */ ? this.pSpace : 0);
            const y = offsetPoint.y + node.data.view.height / 2 - Math.ceil(this.pSpace / 2);
            return new CenterOfNodeOffsetFromRootNode(x, y);
        }
        getBounds() {
            const nodes = this.mindCheese.mind.nodes;
            let n = 0;
            let e = 0;
            let w = 0;
            let s = 0;
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                if (node.data.layout.visible) {
                    const offsetPoint = node.getCenterOffsetOfTheNodeFromRootNode();
                    console.log(`getMinSize: id=${node.id}, x=${offsetPoint.x}, y=${offsetPoint.y}`);
                    e = Math.max(offsetPoint.x + node.data.view.width / 2 + this.hSpace, e);
                    w = Math.min(offsetPoint.x - node.data.view.width / 2 - this.hSpace, w);
                    n = Math.min(offsetPoint.y - node.data.view.height / 2 - this.vSpace, n);
                    s = Math.max(offsetPoint.y + node.data.view.height / 2 - this.vSpace, s);
                }
            }
            // maximum distance from center of root node.
            console.log(`getMinSize: n=${n}, e=${e}, w=${w}, s=${s}`);
            return new Bounds(n, e, w, s);
        }
        toggleNode(node) {
            if (node.isroot) {
                return;
            }
            node.expanded = !node.expanded;
        }
        setVisibleRecursively(node, visible) {
            node.data.layout.visible = visible;
            for (let i = 0, l = node.children.length; i < l; i++) {
                if (!visible) {
                    this.setVisibleRecursively(node.children[i], false);
                }
                else {
                    this.setVisibleRecursively(node.children[i], node.expanded);
                }
            }
        }
    }

    const BEFOREID_FIRST = "_first_";
    const BEFOREID_LAST = "_last_";
    const KEYCODE_ENTER = 13;
    const KEYCODE_ESC = 27;

    /**
     * View renderer
     */
    class ViewProvider {
        /**
         *
         * @param mindCheese MindCheese instance
         * @param container container element
         * @param hmargin ???
         * @param vmargin ???
         * @param graph instance of GraphCanvas
         * @param textFormatter Formatter of the text
         */
        constructor(mindCheese, hmargin, vmargin, graph, textFormatter) {
            this.mindCheese = mindCheese;
            this.textFormatter = textFormatter;
            this.layout = mindCheese.layout;
            this.mcnodes = document.createElement("mcnodes");
            this.mcnodes.addEventListener("keydown", (e) => {
                const el = e.target;
                console.debug(`keydown=${e.keyCode}==${KEYCODE_ENTER} tagName=${el.tagName} shiftkey=${e.shiftKey}`);
                if (el.tagName != "MCNODE") {
                    console.log(`It's not MCNODE. ${el.tagName}`);
                    return;
                }
                // https://qiita.com/ledsun/items/31e43a97413dd3c8e38e
                // keyCode is deprecated field. But it's a hack for Japanese IME.
                // noinspection JSDeprecatedSymbols
                if ((e.keyCode === KEYCODE_ENTER && !e.shiftKey) ||
                    e.keyCode == KEYCODE_ESC) {
                    console.log("editNodeEnd");
                    e.stopPropagation();
                    e.preventDefault();
                    this.editNodeEnd();
                }
            });
            // adjust size dynamically.
            this.mcnodes.addEventListener("keyup", () => {
                this.layoutAgain();
            });
            this.mcnodes.addEventListener("input", () => {
                // TODO is this required?
                this.layoutAgain();
            });
            // when the element lost focus.
            this.mcnodes.addEventListener("blur", (e) => {
                const el = e.target;
                if (el.tagName.toLowerCase() != "mcnode") {
                    return;
                }
                this.editNodeEnd();
            }, true);
            this.mindCheeseInnerElement = document.createElement("div");
            this.mindCheeseInnerElement.className = "mindcheese-inner";
            this.mindCheeseInnerElement.appendChild(graph.element());
            this.mindCheeseInnerElement.appendChild(this.mcnodes);
            this.size = new Size(0, 0);
            this.selectedNode = null;
            this.editingNode = null;
            this.hMargin = hmargin;
            this.vMargin = vmargin;
            this.graph = graph;
        }
        init(container) {
            console.debug("view.init");
            container.appendChild(this.mindCheeseInnerElement);
        }
        getBindedNodeId(element) {
            if (element == null) {
                return null;
            }
            const tagName = element.tagName.toLowerCase();
            if (tagName === "mcnodes" || tagName === "body" || tagName === "html") {
                return null;
            }
            if (tagName === "mcnode" || tagName === "mcexpander" || tagName == "mcadder") {
                return element.getAttribute("nodeid");
            }
            else {
                return this.getBindedNodeId(element.parentElement);
            }
        }
        reset() {
            console.debug("view.reset");
            this.selectedNode = null;
            this.graph.clear();
            this.clearNodes();
            this.resetTheme();
        }
        resetTheme() {
            const themeName = this.mindCheese.options.theme;
            if (themeName) {
                this.mcnodes.parentElement.className = "theme-" + themeName;
            }
            else {
                this.mcnodes.parentElement.className = "";
            }
        }
        createNodes() {
            const nodes = this.mindCheese.mind.nodes;
            const documentFragment = document.createDocumentFragment();
            for (const node of Object.values(nodes)) {
                this.createNodeElement(node, documentFragment);
            }
            this.mcnodes.appendChild(documentFragment);
        }
        cacheNodeSize() {
            const nodes = this.mindCheese.mind.nodes;
            for (const node of Object.values(nodes)) {
                ViewProvider.initNodeSize(node);
            }
        }
        getCanvasSize() {
            const minSize = this.layout.getBounds().size;
            const minWidth = minSize.width + this.hMargin * 2;
            const minHeight = minSize.height + this.vMargin * 2;
            const clientW = this.mindCheeseInnerElement.clientWidth;
            const clientH = this.mindCheeseInnerElement.clientHeight;
            console.log(`expandSize: ${clientH} ${minHeight}`);
            return new Size(Math.max(clientW, minWidth), Math.max(clientH, minHeight));
        }
        static initNodeSize(node) {
            const viewData = node.data.view;
            viewData.width = viewData.element.clientWidth;
            viewData.height = viewData.element.clientHeight;
        }
        addNode(node) {
            this.createNodeElement(node, this.mcnodes);
            ViewProvider.initNodeSize(node);
        }
        createNodeElement(node, parentNode) {
            const nodeEl = document.createElement("mcnode");
            if (node.isroot) {
                nodeEl.className = "root";
            }
            else {
                {
                    const expanderElement = document.createElement("mcexpander");
                    expanderElement.innerText = "-";
                    expanderElement.setAttribute("nodeid", node.id);
                    expanderElement.style.visibility = "hidden";
                    parentNode.appendChild(expanderElement);
                    node.data.view.expander = expanderElement;
                }
                {
                    const adderElement = document.createElement("mcadder");
                    adderElement.innerText = "-";
                    adderElement.setAttribute("nodeid", node.id);
                    adderElement.style.visibility = "hidden";
                    parentNode.appendChild(adderElement);
                    node.data.view.adder = adderElement;
                }
            }
            if (node.topic) {
                nodeEl.innerHTML = this.textFormatter.render(node.topic);
            }
            nodeEl.setAttribute("nodeid", node.id);
            nodeEl.style.visibility = "hidden";
            parentNode.appendChild(nodeEl);
            node.data.view.element = nodeEl;
        }
        removeNode(node) {
            if (this.selectedNode != null && this.selectedNode.id == node.id) {
                this.selectedNode = null;
            }
            if (this.editingNode != null && this.editingNode.id == node.id) {
                node.data.view.element.contentEditable = "false";
                this.editingNode = null;
            }
            for (let i = 0, l = node.children.length; i < l; i++) {
                this.removeNode(node.children[i]);
            }
            if (node.data.view) {
                const element = node.data.view.element;
                const expander = node.data.view.expander;
                const adder = node.data.view.adder;
                this.mcnodes.removeChild(element);
                this.mcnodes.removeChild(expander);
                this.mcnodes.removeChild(adder);
                node.data.view.element = null;
                node.data.view.expander = null;
                node.data.view.adder = null;
            }
        }
        updateNode(node) {
            const viewData = node.data.view;
            const element = viewData.element;
            if (node.topic) {
                element.innerHTML = this.textFormatter.render(node.topic);
            }
            viewData.width = element.clientWidth;
            viewData.height = element.clientHeight;
        }
        _selectClear() {
            if (this.selectedNode) {
                const el = this.selectedNode.data.view.element;
                el.classList.remove("selected");
            }
        }
        selectNode(node) {
            this._selectClear();
            if (node) {
                this.selectedNode = node;
                node.data.view.element.classList.add("selected");
                // Note: scrollIntoView is not the best method.
                this.adjustScrollBar(node);
            }
        }
        // Adjust the scroll bar. show node in the browser.
        adjustScrollBar(node) {
            const nodeEl = node.data.view.element;
            const panelEl = this.mindCheeseInnerElement;
            if (panelEl.scrollLeft > nodeEl.offsetLeft) {
                console.debug(`select_node! left adjust`);
                panelEl.scrollLeft = Math.max(nodeEl.offsetLeft - 10, 0);
            }
            if (nodeEl.offsetLeft + nodeEl.clientWidth >=
                panelEl.scrollLeft + panelEl.clientWidth) {
                console.debug("select_node! right adjust");
                panelEl.scrollLeft = Math.max(panelEl.scrollLeft +
                    (nodeEl.offsetLeft +
                        nodeEl.clientWidth +
                        30 -
                        (panelEl.scrollLeft + panelEl.clientWidth)), 0);
            }
            if (panelEl.scrollTop > nodeEl.offsetTop) {
                console.debug("select_node! top adjust");
                panelEl.scrollTop = Math.max(nodeEl.offsetTop - 10, 0);
            }
            if (nodeEl.offsetTop + nodeEl.clientHeight >=
                panelEl.scrollTop + panelEl.clientHeight) {
                console.debug("select_node! bottom adjust");
                panelEl.scrollTop = Math.max(panelEl.scrollTop +
                    (nodeEl.offsetTop +
                        nodeEl.clientHeight +
                        30 -
                        (panelEl.scrollTop + panelEl.clientHeight)), 0);
            }
        }
        selectClear() {
            this._selectClear();
        }
        isEditing() {
            return !!this.editingNode;
        }
        editNodeBegin(node) {
            if (!node.topic) {
                console.warn("don't edit image nodes");
                return;
            }
            if (this.editingNode != null) {
                this.editNodeEnd();
            }
            console.log("editNodeBegin");
            this.editingNode = node;
            const element = node.data.view.element;
            element.contentEditable = "true";
            element.innerText = node.topic;
            node.data.view.width = element.clientWidth;
            // https://stackoverflow.com/questions/6139107/programmatically-select-text-in-a-contenteditable-html-element
            function selectElementContents(el) {
                const range = document.createRange();
                range.selectNodeContents(el);
                const sel = window.getSelection();
                sel.removeAllRanges();
                sel.addRange(range);
            }
            selectElementContents(element);
            element.focus();
            this.layoutAgain();
        }
        editNodeEnd() {
            console.log(`editNodeEnd(editingNode=${this.editingNode})`);
            if (this.editingNode != null) {
                const node = this.editingNode;
                this.editingNode = null;
                const element = node.data.view.element;
                element.contentEditable = "false";
                const topic = element.innerText;
                if (!topic ||
                    topic.replace(/\s*/, "").length == 0 ||
                    node.topic === topic) {
                    console.debug("Calling updateNode");
                    element.innerHTML = this.textFormatter.render(node.topic);
                    node.data.view.width = element.clientWidth;
                    this.layoutAgain();
                }
                else {
                    console.debug("Calling updateNode");
                    this.mindCheese.updateNode(node.id, topic);
                }
            }
        }
        // get the center point offset
        getOffsetOfTheRootNode() {
            const bounds = this.layout.getBounds();
            console.log(`getViewOffset: size.w=${this.size.width}, e=${bounds.e}, w=${bounds.w}`);
            const x = -bounds.w + this.mindCheese.mind.root.data.view.width / 2;
            // const x = (this.size.w - bounds.e - bounds.w) / 2;
            const y = -bounds.n + this.mindCheese.mind.root.data.view.height / 2;
            return new RootNodeOffsetFromTopLeftOfMcnodes(x, y);
        }
        resize() {
            this.graph.setSize(1, 1);
            this.mcnodes.style.width = "1px";
            this.mcnodes.style.height = "1px";
            this.layoutAgain();
        }
        // Display root position at center of container element.
        centerRoot() {
            const outerW = this.mindCheeseInnerElement.clientWidth;
            const outerH = this.mindCheeseInnerElement.clientHeight;
            if (this.size.width > outerW) {
                const offset = this.getOffsetOfTheRootNode();
                this.mindCheeseInnerElement.scrollLeft = offset.x - outerW / 2;
            }
            if (this.size.height > outerH) {
                this.mindCheeseInnerElement.scrollTop = (this.size.height - outerH) / 2;
            }
        }
        layoutAgain() {
            this.layout.setVisibleRecursively(this.mindCheese.mind.root, true);
            this.layout.layout();
            this.size = this.getCanvasSize();
            console.log(`doShow: ${this.size.width} ${this.size.height}`);
            this.graph.setSize(this.size.width, this.size.height);
            this.mindCheese.draggable.resize(this.size.width, this.size.height);
            this.mcnodes.parentElement.style.width = this.size.width + "px";
            this.mcnodes.parentElement.style.height = this.size.height + "px";
            this.showNodes();
            this.showLines();
        }
        takeLocation(node) {
            const viewData = node.data.view;
            return new Point(parseInt(viewData.element.style.left) -
                this.mindCheeseInnerElement.scrollLeft, parseInt(viewData.element.style.top) -
                this.mindCheeseInnerElement.scrollTop);
        }
        restoreLocation(node, location) {
            const viewData = node.data.view;
            this.mindCheeseInnerElement.scrollLeft =
                parseInt(viewData.element.style.left) - location.x;
            this.mindCheeseInnerElement.scrollTop =
                parseInt(viewData.element.style.top) - location.y;
        }
        clearNodes() {
            const mind = this.mindCheese.mind;
            if (mind == null) {
                return;
            }
            const nodes = mind.nodes;
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                node.data.view.element = null;
                node.data.view.expander = null;
                node.data.view.adder = null;
            }
            this.mcnodes.innerHTML = "";
        }
        showNodes() {
            const nodes = this.mindCheese.mind.nodes;
            const offset = this.getOffsetOfTheRootNode();
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                const viewData = node.data.view;
                const nodeElement = viewData.element;
                const expander = viewData.expander;
                const adder = viewData.adder;
                if (!node.data.layout.visible) {
                    nodeElement.style.display = "none";
                    expander.style.display = "none";
                    adder.style.display = "none";
                    continue;
                }
                const p = this.layout.getTopLeft(node);
                viewData.location = offset.convertCenterOfNodeOffsetFromRootNode(p);
                nodeElement.style.left = viewData.location.x + "px";
                nodeElement.style.top = viewData.location.y + "px";
                nodeElement.style.display = "";
                nodeElement.style.visibility = "visible";
                if (!node.isroot && node.children.length > 0) {
                    const expanderText = node.expanded ? "-" : "+";
                    const expanderPoint = offset.convertCenterOfNodeOffsetFromRootNode(this.layout.getExpanderPoint(node));
                    expander.style.left = expanderPoint.x + "px";
                    expander.style.top = expanderPoint.y + "px";
                    expander.style.display = "";
                    expander.style.visibility = "visible";
                    expander.innerText = expanderText;
                }
                // hide expander while all children have been removed
                if (!node.isroot && node.children.length == 0) {
                    expander.style.display = "none";
                    expander.style.visibility = "hidden";
                }
                if (!node.isroot && node.children.length == 0) {
                    const adder = viewData.adder;
                    const adderText = "+";
                    const adderPoint = offset.convertCenterOfNodeOffsetFromRootNode(this.layout.getAdderPoint(node));
                    adder.style.left = adderPoint.x + "px";
                    adder.style.top = adderPoint.y + "px";
                    adder.style.display = "";
                    adder.style.visibility = "visible";
                    adder.innerText = adderText;
                }
            }
        }
        showLines() {
            this.graph.clear();
            const nodes = this.mindCheese.mind.nodes;
            const offset = this.getOffsetOfTheRootNode();
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                if (node.isroot) {
                    continue;
                }
                if ("visible" in node.data.layout && !node.data.layout.visible) {
                    continue;
                }
                {
                    // Draw line between previous node and next node
                    const pin = this.layout.getNodePointIn(node);
                    const pout = this.layout.getNodePointOutWithDestination(node.parent, node);
                    this.graph.drawLine(offset.convertCenterOfNodeOffsetFromRootNode(pout), offset.convertCenterOfNodeOffsetFromRootNode(pin), node.color, "round");
                }
                {
                    // Draw line under the bottom of the node
                    const pin = this.layout.getNodePointIn(node);
                    const pout = new CenterOfNodeOffsetFromRootNode(pin.x + node.data.view.width * node.direction, pin.y);
                    this.graph.drawLine(offset.convertCenterOfNodeOffsetFromRootNode(pout), offset.convertCenterOfNodeOffsetFromRootNode(pin), node.color, "butt");
                }
            }
        }
    }

    class ShortcutProvider {
        constructor(mindCheese, enable, mappings) {
            this.mindCheese = mindCheese;
            this.enable = enable;
            this.mappings = this.compileHandlers(mappings);
        }
        bindKeyEvents() {
            document.addEventListener("keydown", this.handler.bind(this));
        }
        enableShortcut() {
            this.enable = true;
        }
        disableShortcut() {
            this.enable = false;
        }
        handler(e) {
            // noinspection JSDeprecatedSymbols
            if (e.which == 9) {
                e.preventDefault();
            } //prevent tab to change focus in browser
            if (this.mindCheese.view.isEditing()) {
                return true;
            }
            if (!this.enable) {
                return true;
            }
            console.debug(`ShortcutProvider.handler: ${e.code}`);
            const handlers = this.mappings[e.code];
            if (!handlers) {
                return true;
            }
            const gotFlags = (e.metaKey ? 2 /* META */ : 0) |
                (e.ctrlKey ? 4 /* CTRL */ : 0) |
                (e.altKey ? 8 /* ALT */ : 0) |
                (e.shiftKey ? 16 /* SHIFT */ : 0);
            for (const handler of handlers) {
                const [flags, code] = handler;
                if (flags === gotFlags) {
                    return code(this.mindCheese, e);
                }
            }
            return true;
        }
        compileHandlers(handlers) {
            const result = {};
            handlers.forEach((it) => {
                const [flags, keyString, code] = it;
                if (!result[keyString]) {
                    result[keyString] = [];
                }
                result[keyString].push([flags, code]);
            });
            return result;
        }
    }

    class ViewData {
        constructor() {
            this.element = null;
            this.expander = null;
            this.adder = null;
            this.width = 0;
            this.height = 0;
            this.location = new OffsetFromTopLeftOfMcnodes(0, 0);
        }
    }

    class LayoutData {
        constructor() {
            this.direction = 0 /* CENTER */;
            // relative position of the center of the node.
            this.relativeCenterOffsetX = 0;
            this.relativeCenterOffsetY = 0;
            this.visible = true;
        }
    }

    class RoundRobin {
        constructor(data) {
            this.data = data;
            this.index = 0;
        }
        take() {
            const v = this.data[this.index++];
            if (this.index == this.data.length) {
                this.index = 0;
            }
            return v;
        }
    }

    const COLORS = new RoundRobin([
        "#cc0000",
        "#00cc00",
        "#0000cc",
        "#00cccc",
        "#cc00cc",
        "#cccc00",
    ]);

    class MindNode {
        constructor(id, index, topic, isRoot, parent, direction, expanded) {
            if (!id) {
                throw new Error("invalid nodeid");
            }
            this.id = id;
            this.index = index;
            this.topic = topic;
            this.isroot = isRoot;
            this.parent = parent;
            this.direction = direction;
            this.expanded = expanded;
            this.children = [];
            this.data = {
                view: new ViewData(),
                layout: new LayoutData(),
            };
            // console.log(`ID: ${id}`);
            if (!parent) {
                this.color = null;
            }
            else if (parent && parent.color) {
                // inherit parent's color
                this.color = parent.color;
            }
            else {
                this.color = COLORS.take();
            }
        }
        static compare(node1, node2) {
            // '-1' is alwary the last
            let r;
            const i1 = node1.index;
            const i2 = node2.index;
            if (i1 >= 0 && i2 >= 0) {
                r = i1 - i2;
            }
            else if (i1 === -1 && i2 === -1) {
                r = 0;
            }
            else if (i1 === -1) {
                r = 1;
            }
            else if (i2 === -1) {
                r = -1;
            }
            else {
                r = 0;
            }
            // console.debug(`MindNode.compare: ${i1} <> ${i2}  =  ${r}`);
            return r;
        }
        static inherited(pnode, node) {
            if (!!pnode && !!node) {
                if (pnode.id === node.id) {
                    return true;
                }
                if (pnode.isroot) {
                    return true;
                }
                const pid = pnode.id;
                let p = node;
                while (!p.isroot) {
                    p = p.parent;
                    if (p.id === pid) {
                        return true;
                    }
                }
            }
            return false;
        }
        getSize() {
            const viewData = this.data.view;
            return new Size(viewData.width, viewData.height);
        }
        toObject() {
            const o = {
                id: this.id,
                topic: this.topic,
                expanded: this.expanded,
                children: this.children.map((it) => it.toObject()),
            };
            if (!!this.parent && this.parent.isroot) {
                o.direction = this.direction == -1 /* LEFT */ ? "left" : "right";
            }
            return o;
        }
        applyColor(color) {
            this.color = color;
            for (let i = 0, l = this.children.length; i < l; i++) {
                this.children[i].applyColor(color);
            }
        }
        getCenterOffsetOfTheNodeFromRootNode() {
            let x = 0;
            let y = 0;
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            let n = this;
            do {
                x += n.data.layout.relativeCenterOffsetX;
                y += n.data.layout.relativeCenterOffsetY;
                n = n.parent;
            } while (n);
            return new CenterOfNodeOffsetFromRootNode(x, y);
        }
    }

    class Mind {
        constructor() {
            this.root = null;
            this.selected = null;
            this.nodes = {};
        }
        getNodeById(nodeid) {
            if (nodeid in this.nodes) {
                return this.nodes[nodeid];
            }
            else {
                throw new Error(`the node[id=${nodeid}] can not be found...`);
            }
        }
        setRoot(nodeid, topic) {
            if (this.root != null) {
                throw new Error("root node is already exist");
            }
            this.root = new MindNode(nodeid, 0, topic, true, null, 0 /* CENTER */, true);
            this.putNode(this.root);
        }
        addNode(parentNode, nodeid, topic, idx, direction, expanded) {
            const nodeindex = idx || -1;
            let node;
            if (parentNode.isroot) {
                let d;
                if (direction == null) {
                    const children = parentNode.children;
                    const childrenLength = children.length;
                    let r = 0;
                    for (let i = 0; i < childrenLength; i++) {
                        if (children[i].direction === -1 /* LEFT */) {
                            r--;
                        }
                        else {
                            r++;
                        }
                    }
                    d = childrenLength > 1 && r > 0 ? -1 /* LEFT */ : 1 /* RIGHT */;
                }
                else {
                    d = direction === -1 /* LEFT */ ? -1 /* LEFT */ : 1 /* RIGHT */;
                }
                // console.log(
                //   `add_node source DIRECTION=${direction} DIRECTION=${d} ${topic}`
                // );
                node = new MindNode(nodeid, nodeindex, topic, false, parentNode, d, expanded);
            }
            else {
                node = new MindNode(nodeid, nodeindex, topic, false, parentNode, parentNode.direction, expanded);
            }
            this.putNode(node);
            parentNode.children.push(node);
            this.reindex(parentNode);
            return node;
        }
        insertNodeBefore(nodeBefore, nodeid, topic) {
            const nodeIndex = nodeBefore.index - 0.5;
            return this.addNode(nodeBefore.parent, nodeid, topic, nodeIndex, null, true);
        }
        getNodeBefore(node) {
            if (node.isroot) {
                return null;
            }
            const idx = node.index - 2;
            if (idx >= 0) {
                return node.parent.children[idx];
            }
            else {
                return null;
            }
        }
        // add little brother node.
        insertNodeAfter(nodeAfter, nodeid, topic) {
            const nodeIndex = nodeAfter.index + 0.5;
            // follow current direction.
            return this.addNode(nodeAfter.parent, nodeid, topic, nodeIndex, nodeAfter.direction, true);
        }
        getNodeAfter(node) {
            if (node.isroot) {
                return null;
            }
            const idx = node.index;
            const brothers = node.parent.children;
            if (brothers.length >= idx) {
                return node.parent.children[idx];
            }
            else {
                return null;
            }
        }
        moveNode(node, beforeid, parent, direction) {
            console.assert(node instanceof MindNode, "node should be Node");
            console.log(`move_node: ${node} ${beforeid} ${parent.id} ${direction}`);
            this.doMoveNode(node, beforeid, parent, direction);
            if (parent.color && node.color != parent.color) {
                /*
                  - root
                    - A: yellow
                    - B: red
          
                  in this case, move A as a child of B, then the expected result is:
          
                  - root
                    - A: yellow
                      - B: yellow
                 */
                node.applyColor(parent.color);
            }
        }
        flowNodeDirection(node, direction) {
            if (typeof direction === "undefined") {
                direction = node.direction;
            }
            else {
                node.direction = direction;
            }
            let len = node.children.length;
            while (len--) {
                this.flowNodeDirection(node.children[len], direction);
            }
        }
        moveNodeInternal(node, beforeid) {
            if (!!node && !!beforeid) {
                if (beforeid === BEFOREID_LAST) {
                    node.index = -1;
                    this.reindex(node.parent);
                }
                else if (beforeid === BEFOREID_FIRST) {
                    node.index = 0;
                    this.reindex(node.parent);
                }
                else {
                    /*
                     * Before:
                     *   - B <- beforeid = 3
                     *   - A <- node     = 4
                     *
                     * After:
                     *   - A <- node     = 3-0.5=2.5
                     *   - B <- beforeid = 3
                     */
                    const nodeBefore = beforeid ? this.getNodeById(beforeid) : null;
                    if (nodeBefore != null &&
                        nodeBefore.parent != null &&
                        nodeBefore.parent.id === node.parent.id) {
                        node.index = nodeBefore.index - 0.5;
                        this.reindex(node.parent);
                    }
                    else {
                        console.error(`Missing node_before: ${beforeid}`);
                    }
                }
            }
            return node;
        }
        doMoveNode(node, beforeid, parent, direction) {
            console.log(`_move_node: node=${node}, ${beforeid}, parentid=${parent.id}, ${direction}`);
            if (!!node && !!parent.id) {
                console.assert(node.parent, `node.parent is null: ${node}`);
                if (node.parent.id !== parent.id) {
                    console.log(`_move_node: node.parent.id!==parentid`);
                    // remove from parent's children
                    const sibling = node.parent.children;
                    let si = sibling.length;
                    while (si--) {
                        console.assert(sibling[si], "sibling[si] is null");
                        if (sibling[si].id === node.id) {
                            sibling.splice(si, 1);
                            break;
                        }
                    }
                    node.parent = this.getNodeById(parent.id);
                    node.parent.children.push(node);
                }
                if (node.parent.isroot) {
                    node.direction = direction;
                }
                else {
                    node.direction = node.parent.direction;
                }
                this.moveNodeInternal(node, beforeid);
                this.flowNodeDirection(node, direction);
            }
        }
        removeNode(node) {
            if (node.isroot) {
                throw new Error("fail, can not remove root node");
            }
            if (this.selected != null && this.selected.id === node.id) {
                this.selected = null;
            }
            // clean all subordinate nodes
            const children = node.children;
            let ci = children.length;
            while (ci--) {
                this.removeNode(children[ci]);
            }
            // clean all children
            children.length = 0;
            // remove from parent's children
            const sibling = node.parent.children;
            let si = sibling.length;
            while (si--) {
                if (sibling[si].id === node.id) {
                    sibling.splice(si, 1);
                    break;
                }
            }
            // remove from global nodes
            delete this.nodes[node.id];
            return true;
        }
        putNode(node) {
            if (node.id in this.nodes) {
                throw new Error("the nodeid '" + node.id + "' has been already exist.");
            }
            this.nodes[node.id] = node;
        }
        reindex(node) {
            // console.debug(
            //   `Before Mind._reindex: ` +
            //     node.children.map((n) => `${n.topic}: ${n.index}`).join("\n")
            // );
            node.children.sort(MindNode.compare);
            for (let i = 0; i < node.children.length; i++) {
                node.children[i].index = i + 1;
            }
            // console.debug(
            //   `After Mind._reindex: ` +
            //     node.children.map((n) => `${n.topic}: ${n.index}`).join("\n")
            // );
        }
    }

    function getClientFromEvent(e) {
        if (e instanceof MouseEvent) {
            return e;
        }
        else if (e instanceof TouchEvent) {
            return e.touches[0];
        }
        else {
            throw new Error("Unknown event type");
        }
    }
    class ClosePoint {
        constructor(node, direction, sp, np) {
            this.node = node;
            this.direction = direction;
            this.sp = sp;
            this.np = np;
        }
    }
    class Draggable {
        constructor(mindCheese) {
            this.clientHW = 0;
            this.clientHH = 0;
            this.lineWidth = 5;
            this.lookupDelay = 500;
            this.lookupInterval = 80;
            this.mindCheese = mindCheese;
            this.canvasElement = Draggable.createCanvas();
            this.mindCheese.view.mindCheeseInnerElement.appendChild(this.canvasElement);
            this.canvasContext = this.canvasElement.getContext("2d");
            this.shadow = Draggable.createShadow();
            this.shadowW = 0;
            this.shadowH = 0;
            this.activeNode = null;
            this.targetNode = null;
            this.targetDirect = null;
            this.clientW = 0;
            this.clientH = 0;
            this.offsetX = 0;
            this.offsetY = 0;
            this.hlookupDelay = 0;
            this.hlookupTimer = 0;
            this.capture = false;
            this.moved = false;
        }
        init(container) {
            this.eventBind(container);
        }
        resize(width, height) {
            this.mindCheese.view.mcnodes.appendChild(this.shadow);
            this.canvasElement.width = width;
            this.canvasElement.height = height;
        }
        static createCanvas() {
            const canvasElement = document.createElement("canvas");
            canvasElement.className = "mindcheese-draggable-graph";
            return canvasElement;
        }
        static createShadow() {
            const mcnode = document.createElement("mcnode");
            mcnode.style.visibility = "hidden";
            mcnode.style.zIndex = "3";
            mcnode.style.cursor = "move";
            mcnode.style.opacity = "0.7";
            return mcnode;
        }
        resetShadow(el) {
            const s = this.shadow.style;
            this.shadow.innerHTML = el.innerHTML;
            s.left = el.style.left;
            s.top = el.style.top;
            s.width = el.style.width;
            s.height = el.style.height;
            s.backgroundImage = el.style.backgroundImage;
            s.backgroundSize = el.style.backgroundSize;
            s.transform = el.style.transform;
            this.shadowW = this.shadow.clientWidth;
            this.shadowH = this.shadow.clientHeight;
        }
        showShadow() {
            if (!this.moved) {
                this.shadow.style.visibility = "visible";
            }
        }
        hideShadow() {
            this.shadow.style.visibility = "hidden";
        }
        magnetShadow(sp, np) {
            this.canvasContext.lineWidth = this.lineWidth;
            this.canvasContext.strokeStyle = "rgba(0,0,0,0.3)";
            this.canvasContext.lineCap = "round";
            this.clearLines();
            this.canvasLineTo(sp.x, sp.y, np.x, np.y);
        }
        clearLines() {
            this.canvasContext.clearRect(0, 0, this.mindCheese.view.size.width, this.mindCheese.view.size.height);
        }
        canvasLineTo(x1, y1, x2, y2) {
            this.canvasContext.beginPath();
            this.canvasContext.moveTo(x1, y1);
            this.canvasContext.bezierCurveTo(x1 + ((x2 - x1) * 2) / 3, y1, x1, y2, x2, y2);
            this.canvasContext.stroke();
        }
        doLookupCloseNode() {
            const root = this.mindCheese.getRoot();
            const rootLocation = root.data.view.location;
            const rootSize = root.getSize();
            const rootX = rootLocation.x + rootSize.width / 2;
            const sw = this.shadowW;
            const sh = this.shadowH;
            const sx = this.shadow.offsetLeft; // offset of the moving node
            const sy = this.shadow.offsetTop;
            const direct = sx + sw / 2 >= rootX ? 1 /* RIGHT */ : -1 /* LEFT */;
            const nodes = this.mindCheese.mind.nodes;
            let minDistance = Number.MAX_VALUE;
            let closestNode = null;
            let closestPoint = null;
            let shadowPoint = null;
            for (const nodeid in nodes) {
                let np, sp;
                const node = nodes[nodeid];
                let distance = 0;
                if (node.isroot || node.direction == direct) {
                    if (node.id == this.activeNode.id) {
                        continue;
                    }
                    const ns = node.getSize();
                    const nl = node.data.view.location;
                    if (direct == 1 /* RIGHT */) {
                        if (sx - nl.x - ns.width <= 0) {
                            continue;
                        }
                        distance =
                            Math.abs(sx - nl.x - ns.width) +
                                Math.abs(sy + sh / 2 - nl.y - ns.height / 2);
                        np = {
                            x: nl.x + ns.width - this.lineWidth,
                            y: nl.y + (node.isroot ? ns.height / 2 : ns.height),
                        };
                        sp = { x: sx + this.lineWidth, y: sy + sh };
                    }
                    else {
                        if (nl.x - sx - sw <= 0) {
                            continue;
                        }
                        distance =
                            Math.abs(sx + sw - nl.x) +
                                Math.abs(sy + sh / 2 - nl.y - ns.height / 2);
                        np = {
                            x: nl.x + this.lineWidth,
                            y: nl.y + (node.isroot ? ns.height / 2 : ns.height),
                        };
                        sp = { x: sx + sw - this.lineWidth, y: sy + sh };
                    }
                    if (distance < minDistance) {
                        closestNode = node;
                        closestPoint = np;
                        shadowPoint = sp;
                        minDistance = distance;
                    }
                }
            }
            if (closestNode) {
                return new ClosePoint(closestNode, direct, shadowPoint, closestPoint);
            }
            else {
                return null;
            }
        }
        lookupCloseNode() {
            const closePointOrNull = this.doLookupCloseNode();
            if (closePointOrNull) {
                this.magnetShadow(closePointOrNull.sp, closePointOrNull.np);
                this.targetNode = closePointOrNull.node;
                this.targetDirect = closePointOrNull.direction;
            }
        }
        eventBind(container) {
            container.addEventListener("mousedown", this.dragstart.bind(this), false);
            container.addEventListener("mousemove", this.drag.bind(this), false);
            container.addEventListener("mouseup", this.dragend.bind(this), false);
            {
                let tapCount = 0;
                container.addEventListener("touchstart", (e) => {
                    if (!tapCount) {
                        // single tap
                        ++tapCount;
                        this.dragstart(e);
                        setTimeout(function () {
                            tapCount = 0;
                        }, 350);
                    }
                    else {
                        // double tap
                        this.mindCheese.dblclickHandle(e);
                    }
                }, { passive: true });
            }
            container.addEventListener("touchmove", this.drag.bind(this), {
                passive: true,
            });
            container.addEventListener("touchend", this.dragend.bind(this), false);
        }
        static findMcnode(htmlElement) {
            let el = htmlElement;
            while (el) {
                if (el.tagName.toLowerCase() == "mcnode") {
                    return el;
                }
                el = el.parentElement;
            }
            return null;
        }
        dragstart(e) {
            if (!this.mindCheese.isEditable()) {
                return;
            }
            if (this.capture) {
                return;
            }
            this.activeNode = null;
            const viewProvider = this.mindCheese.view;
            const el = Draggable.findMcnode(e.target);
            if (!el) {
                return;
            }
            const nodeid = viewProvider.getBindedNodeId(el);
            if (nodeid) {
                const node = this.mindCheese.getNodeById(nodeid);
                if (!node.isroot) {
                    this.resetShadow(el);
                    this.activeNode = node;
                    const client = getClientFromEvent(e);
                    this.offsetX = client.clientX - el.offsetLeft;
                    this.offsetY = client.clientY - el.offsetTop;
                    // this.offsetX = (e.clientX || e.touches[0].clientX) - el.offsetLeft;
                    // this.offset_y = (e.clientY || e.touches[0].clientY) - el.offsetTop;
                    this.clientHW = Math.floor(el.clientWidth / 2);
                    this.clientHH = Math.floor(el.clientHeight / 2);
                    if (this.hlookupDelay !== 0) {
                        window.clearTimeout(this.hlookupDelay);
                    }
                    if (this.hlookupTimer !== 0) {
                        window.clearInterval(this.hlookupTimer);
                    }
                    this.hlookupDelay = window.setTimeout(() => {
                        this.hlookupDelay = 0;
                        this.hlookupTimer = window.setInterval(this.lookupCloseNode.bind(this), this.lookupInterval);
                    }, this.lookupDelay);
                    this.capture = true;
                }
            }
        }
        drag(e) {
            if (!this.mindCheese.isEditable()) {
                return;
            }
            if (this.capture) {
                e.preventDefault();
                this.showShadow();
                this.moved = true;
                window.getSelection().removeAllRanges();
                const client = getClientFromEvent(e);
                const px = client.clientX - this.offsetX;
                const py = client.clientY - this.offsetY;
                // const px = (e.clientX || e.touches[0].clientX) - this.offsetX;
                // const py = (e.clientY || e.touches[0].clientY) - this.offset_y;
                this.shadow.style.left = px + "px";
                this.shadow.style.top = py + "px";
                window.getSelection().removeAllRanges();
            }
        }
        dragend() {
            if (!this.mindCheese.isEditable()) {
                return;
            }
            if (this.capture) {
                if (this.hlookupDelay !== 0) {
                    window.clearTimeout(this.hlookupDelay);
                    this.hlookupDelay = 0;
                    this.clearLines();
                }
                if (this.hlookupTimer !== 0) {
                    window.clearInterval(this.hlookupTimer);
                    this.hlookupTimer = 0;
                    this.clearLines();
                }
                if (this.moved) {
                    const srcNode = this.activeNode;
                    const targetNode = this.targetNode;
                    const targetDirect = this.targetDirect;
                    this.moveNode(srcNode, targetNode, targetDirect);
                }
                this.hideShadow();
            }
            this.moved = false;
            this.capture = false;
        }
        moveNode(srcNode, targetNode, targetDirect) {
            console.log(`Draggable.moveNode: ${srcNode} ${targetNode} ${targetDirect}`);
            const shadowH = this.shadow.offsetTop;
            if (!!targetNode && !!srcNode && !MindNode.inherited(srcNode, targetNode)) {
                console.log(`let's move!`);
                // lookup before_node
                const siblingNodes = targetNode.children;
                let sc = siblingNodes.length;
                let node = null;
                let deltaY = Number.MAX_VALUE;
                let nodeBefore = null;
                let beforeid = BEFOREID_LAST;
                while (sc--) {
                    node = siblingNodes[sc];
                    if (node.direction === targetDirect && node.id !== srcNode.id) {
                        const dy = node.data.view.location.y - shadowH;
                        if (dy > 0 && dy < deltaY) {
                            deltaY = dy;
                            nodeBefore = node;
                            beforeid = BEFOREID_FIRST;
                        }
                    }
                }
                if (nodeBefore) {
                    beforeid = nodeBefore.id;
                }
                console.log(`Calling jm.move_node: ${srcNode.id}, ${beforeid}, ${targetNode.id}, ${targetDirect}`);
                this.mindCheese.moveNode(srcNode, beforeid, targetNode, targetDirect);
            }
            this.activeNode = null;
            this.targetNode = null;
            this.targetDirect = null;
        }
    }

    class UndoManager {
        constructor(jm, undoStackLimit = 10000) {
            this.mindCheese = jm;
            this.undoStack = [];
            this.undoStackLimit = undoStackLimit;
        }
        /**
         * Before every editing graph, call this method.
         */
        recordSnapshot() {
            if (this.undoStack.length > this.undoStackLimit) {
                console.log(`UndoManager: callback event. too much stacks.`);
                this.undoStack.shift();
            }
            console.log(`UndoManager: callback event pushing.`);
            this.undoStack.push(this.mindCheese.getNodeTree());
        }
        undo() {
            const item = this.undoStack.pop();
            if (item) {
                const data = item;
                console.log(`UndoManager: undo. data=${data}`);
                this.mindCheese.showNodeTree(data);
            }
            else {
                console.log(`UndoManager: undo. stack is empty.`);
            }
        }
    }

    class GraphCanvas {
        /**
         * Create new instance of GraphCanvas.
         *
         * @param lineColor color of lines. CSS compatible colors are ok. e.g. "#ffffff"
         * @param lineWidth Pixel of line width.
         */
        constructor(lineColor, lineWidth) {
            this.lineColor = lineColor;
            this.lineWidth = lineWidth;
            this.canvasElement = document.createElement("canvas");
            this.canvasElement.className = "mindcheese-graph-canvas";
            this.canvasContext = this.canvasElement.getContext("2d");
        }
        element() {
            return this.canvasElement;
        }
        setSize(w, h) {
            this.canvasElement.width = w;
            this.canvasElement.height = h;
        }
        clear() {
            this.canvasContext.clearRect(0, 0, this.canvasElement.width, this.canvasElement.height);
        }
        drawLine(pout, pin, color, lineCap) {
            const ctx = this.canvasContext;
            ctx.strokeStyle = color;
            ctx.lineWidth = this.lineWidth;
            ctx.lineCap = lineCap;
            GraphCanvas.bezierTo(ctx, pin.x, pin.y, pout.x, pout.y);
        }
        static bezierTo(ctx, x1, y1, x2, y2) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.bezierCurveTo(x1 + ((x2 - x1) * 2) / 3, y1, x1, y2, x2, y2);
            ctx.stroke();
        }
    }

    /*
    {
        { "id": "root", "topic": "mindCheese Example" }
    }
     */
    // Convert plain node tree to Mind object.
    function object2mindmap(source) {
        const mind = new Mind();
        parse$1(mind, source);
        return mind;
    }
    function parse$1(mind, nodeRoot) {
        mind.setRoot(nodeRoot.id, nodeRoot.topic);
        if ("children" in nodeRoot) {
            const children = nodeRoot.children;
            for (let i = 0; i < children.length; i++) {
                extractSubNode(mind, mind.root, children[i]);
            }
        }
    }
    function extractSubNode(mind, nodeParent, nodeJson) {
        let d = null;
        if (nodeParent.isroot) {
            d = nodeJson.direction == "left" ? -1 /* LEFT */ : 1 /* RIGHT */;
        }
        // console.log(
        //   `_extract_subnode node_json.direction DIRECTION=${nodeJson.direction} d=${d} ${nodeJson.topic}`
        // );
        const node = mind.addNode(nodeParent, nodeJson.id, nodeJson.topic, null, d, typeof nodeJson.expanded === "undefined" ? true : !!nodeJson.expanded);
        if ("children" in nodeJson) {
            const children = nodeJson.children;
            for (let i = 0; i < children.length; i++) {
                extractSubNode(mind, node, children[i]);
            }
        }
    }

    function generateNewId() {
        return (new Date().getTime().toString(16) + Math.random().toString(16).substring(2)).substring(2, 16);
    }

    class ShortcutHandlers {
        static delete(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (!!selectedNode && !selectedNode.isroot) {
                mindCheese.selectNode(selectedNode.parent);
                mindCheese.removeNode(selectedNode);
            }
            return false;
        }
        static addChild(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                const nodeid = generateNewId();
                const node = mindCheese.addNode(selectedNode, nodeid, "New Node");
                if (node) {
                    mindCheese.selectNode(node);
                    mindCheese.beginEdit(node);
                }
            }
            return false;
        }
        static addBrother(mindCheese, e) {
            e.preventDefault();
            const selectedNode = mindCheese.getSelectedNode();
            if (!!selectedNode && !selectedNode.isroot) {
                const nodeid = generateNewId();
                const node = mindCheese.insertNodeAfter(selectedNode, nodeid, "New Node");
                if (node) {
                    mindCheese.selectNode(node);
                    mindCheese.beginEdit(node);
                }
            }
            return false;
        }
        static editNode(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.beginEdit(selectedNode);
            }
            return false;
        }
        static toggle(mindCheese, e) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.toggleNode(selectedNode);
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        static moveUp(mindCheese) {
            console.debug(`ShortcutProvider.handle_move_up`);
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.moveUp(selectedNode);
                mindCheese.selectNode(selectedNode);
            }
            return false;
        }
        static moveDown(mindCheese) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode) {
                mindCheese.moveDown(selectedNode);
                mindCheese.selectNode(selectedNode);
            }
            return false;
        }
        static up(mindCheese, e) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode.isroot) {
                return false;
            }
            if (selectedNode) {
                let upNode = mindCheese.findNodeBefore(selectedNode);
                if (!upNode) {
                    const np = mindCheese.findNodeBefore(selectedNode.parent);
                    if (!!np && np.children.length > 0) {
                        upNode = np.children[np.children.length - 1];
                    }
                }
                if (upNode) {
                    mindCheese.selectNode(upNode);
                }
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        static down(mindCheese, e) {
            const selectedNode = mindCheese.getSelectedNode();
            if (selectedNode.isroot) {
                return false;
            }
            if (selectedNode) {
                let downNode = mindCheese.findNodeAfter(selectedNode);
                if (!downNode) {
                    const np = mindCheese.findNodeAfter(selectedNode.parent);
                    if (!!np && np.children.length > 0) {
                        downNode = np.children[0];
                    }
                }
                if (downNode) {
                    mindCheese.selectNode(downNode);
                }
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        static left(mindCheese, e) {
            ShortcutHandlers.handleDirection(mindCheese, e, -1 /* LEFT */);
            return false;
        }
        static right(mindCheese, e) {
            ShortcutHandlers.handleDirection(mindCheese, e, 1 /* RIGHT */);
            return false;
        }
        static handleDirection(mindCheese, e, d) {
            let children; // TODO maybe optimizable
            const selectedNode = mindCheese.getSelectedNode();
            let node = null;
            if (selectedNode) {
                if (selectedNode.isroot) {
                    const c = selectedNode.children;
                    children = [];
                    for (let i = 0; i < c.length; i++) {
                        if (c[i].direction === d) {
                            children.push(i);
                        }
                    }
                    node = c[children[Math.floor((children.length - 1) / 2)]];
                }
                else if (selectedNode.direction === d) {
                    children = selectedNode.children;
                    const childrenCount = children.length;
                    if (childrenCount > 0) {
                        node = children[Math.floor((childrenCount - 1) / 2)];
                    }
                }
                else {
                    node = selectedNode.parent;
                }
                if (node) {
                    mindCheese.selectNode(node);
                }
                e.stopPropagation();
                e.preventDefault();
            }
        }
        static undo(mindCheese, e) {
            console.log("UNDO!");
            mindCheese.undo();
            e.stopPropagation();
            e.preventDefault();
            return false;
        }
    }

    const SPECIAL = {
        "&": "&amp;",
        ">": "&gt;",
        "<": "&lt;",
        '"': "&quot;",
        "'": "&#39;",
        "`": "&#96;",
        "{": "&#123;",
        "}": "&#125;",
    };
    function escapeHtml(src) {
        return src.replace(/([&><"'`{}])/g, (_, sp) => {
            return SPECIAL[sp];
        });
    }
    class MarkdownRenderer {
        render(src) {
            return src.replace(/(\n)|\*\*(.*?)\*\*|\*(.*?)\*|`(.*?)`|([&><"'`{}])|(.)/g, (_, nl, bold, italic, code, sp, dot) => {
                if (nl) {
                    return "<br>";
                }
                else if (bold) {
                    return `<b>${escapeHtml(bold)}</b>`;
                }
                else if (italic) {
                    return `<i>${escapeHtml(italic)}</i>`;
                }
                else if (code) {
                    return `<code>${escapeHtml(code)}</code>`;
                }
                else if (sp) {
                    return SPECIAL[sp];
                }
                else if (dot) {
                    return dot;
                }
            });
        }
    }

    class MindOption {
        constructor() {
            this.theme = "primary";
            this.view = new ViewOption();
            this.layout = new LayoutOption();
            this.shortcut = new ShortcutOption();
        }
    }
    class ViewOption {
        constructor() {
            this.hmargin = 100; // Minimum horizontal distance of the mindmap from the outer frame of the container
            this.vmargin = 50; // Minimum vertical distance of the mindmap from the outer frame of the container
            this.lineWidth = 2;
            this.lineColor = "#555";
            this.renderer = new MarkdownRenderer();
        }
    }
    class LayoutOption {
        constructor() {
            this.hspace = 30; // horizontal spacing between nodes
            this.vspace = 20; // vspace vertical spacing between nodes
            this.pspace = 13; // Horizontal spacing between node and connection line (to place node expander)
        }
    }
    class ShortcutOption {
        constructor() {
            this.enable = true;
            this.mappings = [
                [0 /* NONE */, "Delete", ShortcutHandlers.delete],
                [0 /* NONE */, "Backspace", ShortcutHandlers.delete],
                [0 /* NONE */, "Tab", ShortcutHandlers.addChild],
                [0 /* NONE */, "Enter", ShortcutHandlers.addBrother],
                [4 /* CTRL */, "Enter", ShortcutHandlers.editNode],
                [2 /* META */, "Enter", ShortcutHandlers.editNode],
                [0 /* NONE */, "Space", ShortcutHandlers.toggle],
                [16 /* SHIFT */, "ArrowUp", ShortcutHandlers.moveUp],
                [16 /* SHIFT */, "ArrowDown", ShortcutHandlers.moveDown],
                [0 /* NONE */, "ArrowUp", ShortcutHandlers.up],
                [0 /* NONE */, "ArrowDown", ShortcutHandlers.down],
                [0 /* NONE */, "ArrowLeft", ShortcutHandlers.left],
                [0 /* NONE */, "ArrowRight", ShortcutHandlers.right],
                [4 /* CTRL */, "KeyZ", ShortcutHandlers.undo],
                [2 /* META */, "KeyZ", ShortcutHandlers.undo], // for mac
            ];
        }
    }

    function mindmap2markdown(mind) {
        return renderMarkdown(mind.root, 0);
    }
    function renderMarkdown(node, level) {
        let result = "";
        if (node.topic) {
            const lines = node.topic.split("\n");
            for (let i = 0; i < lines.length; i++) {
                for (let j = 0; j < level; j++) {
                    result += "\t";
                }
                if (i === 0) {
                    result += node.direction == -1 /* LEFT */ ? "+ " : "- ";
                }
                else {
                    result += "  ";
                }
                result += lines[i];
                if (i + 1 < lines.length) {
                    result += " \\";
                }
                result += "\n";
            }
        }
        if (node.children) {
            const children = node.children;
            for (let i = 0, l = children.length; i < l; i++)
                result += renderMarkdown(children[i], level + 1);
        }
        return result;
    }

    function parse(md) {
        if (md == null) {
            throw new Error("md should not be null");
        }
        const lines = md.split(/\n/);
        let lastSpaces = "";
        const root = {
            id: "root",
            topic: "DUMMY",
            children: [],
        };
        let i = 0;
        let lastElement = root;
        const anchor = {
            0: root,
        };
        let isContinuous = false;
        for (const line of lines) {
            // skip empty line
            if (!line.match(/\S/)) {
                continue;
            }
            if (isContinuous) {
                let body = line;
                if (body.match(/ [\\ ]$/)) {
                    // multi-line bullet list.
                    body = body.replace(/ [\\ ]$/, "");
                    isContinuous = true;
                }
                else {
                    isContinuous = false;
                }
                for (let j = 0; j < lastSpaces.length + 2; j++) {
                    body = body.replace(/^\s/, "");
                }
                lastElement.topic += "\n" + body;
            }
            else {
                const match = line.match(/^(\s*)([+-])\s*(.*?)$/);
                if (!match) {
                    console.log(`'${line}' is not a bullet list.`);
                    continue;
                }
                const leadingSpaces = match[1];
                const directionCharacter = match[2];
                let body = match[3];
                if (body.match(/ [\\ ]$/)) {
                    // multi-line bullet list.
                    body = body.replace(/ [\\ ]$/, "");
                    isContinuous = true;
                }
                else {
                    isContinuous = false;
                }
                // console.log(`lead=${leadingSpaces.length} body=${body} root=${JSON.stringify(root)}`);
                const el = {
                    id: ++i,
                    topic: body,
                    direction: directionCharacter === "+" ? "left" : "right",
                    children: [],
                };
                if (lastSpaces.length === leadingSpaces.length) ;
                else if (lastSpaces.length < leadingSpaces.length) {
                    // indent
                    // console.log('indent')
                    anchor[leadingSpaces.length] = lastElement;
                }
                else ;
                anchor[leadingSpaces.length].children.push(el);
                lastElement = el;
                lastSpaces = leadingSpaces;
            }
        }
        const realRoot = root.children[0];
        if (!realRoot) {
            throw new Error("MindCheese can't parse this markdown as a mindmap: '" + md + "'");
        }
        return realRoot;
    }
    function markdown2mindmap(md) {
        const tree = parse(md.replace(/^---$.*^---$/ms, ""));
        return object2mindmap(tree);
    }

    class MindCheese {
        constructor(id, container, options = new MindOption()) {
            this.zoomScale = 1.0;
            if (!container) {
                throw new Error("container shouldn't be null!");
            }
            this.container = container;
            this.options = options;
            this.mind = new Mind();
            this.id = id;
            this.editable = true;
            // create instance of function provider
            const graph = new GraphCanvas(options.view.lineColor, options.view.lineWidth);
            this.layout = new LayoutProvider(this, options.layout.hspace, options.layout.vspace, options.layout.pspace, graph);
            this.view = new ViewProvider(this, options.view.hmargin, options.view.vmargin, graph, options.view.renderer);
            this.shortcut = new ShortcutProvider(this, options.shortcut.enable, options.shortcut.mappings);
            this.draggable = new Draggable(this);
            this.undoManager = new UndoManager(this);
            this.view.init(this.container);
            this.draggable.init(this.container);
            this.shortcut.bindKeyEvents();
            this.bindEvent();
        }
        enableEdit() {
            this.editable = true;
        }
        disableEdit() {
            this.editable = false;
        }
        isEditable() {
            return this.editable;
        }
        checkEditable() {
            if (!this.editable) {
                throw new Error("fail, this mind map is not editable");
            }
        }
        setTheme(theme) {
            const themeOld = this.options.theme;
            this.options.theme = theme;
            if (themeOld !== this.options.theme) {
                this.view.resetTheme();
            }
        }
        bindEvent() {
            this.view.mcnodes.addEventListener("mousedown", this.mousedownHandle.bind(this));
            this.view.mcnodes.addEventListener("click", this.clickHandle.bind(this));
            this.view.mcnodes.addEventListener("dblclick", this.dblclickHandle.bind(this));
            this.view.mindCheeseInnerElement.addEventListener("wheel", (e) => {
                if (e.ctrlKey) {
                    e.stopPropagation();
                    e.preventDefault();
                    if (e.deltaY > 0) {
                        this.zoomScale -= 0.1;
                    }
                    else {
                        this.zoomScale += 0.1;
                    }
                    this.zoomScale = Math.min(Math.max(this.zoomScale, 0.2), 20);
                    this.zoom(this.zoomScale);
                }
            }, { passive: true });
            window.addEventListener("resize", () => {
                this.resize();
                return false;
            });
        }
        mousedownHandle(e) {
            const element = e.target;
            const nodeid = this.view.getBindedNodeId(element);
            if (nodeid) {
                if (element.tagName.toLowerCase() === "mcnode") {
                    const theNode = this.getNodeById(nodeid);
                    if (!theNode) {
                        throw new Error("the node[id=" + nodeid + "] can not be found.");
                    }
                    else {
                        return this.selectNode(theNode);
                    }
                }
            }
            else {
                this.selectClear();
            }
        }
        clickHandle(e) {
            const element = e.target;
            switch (element.tagName.toLowerCase()) {
                case "mcexpander": {
                    const nodeid = this.view.getBindedNodeId(element);
                    if (nodeid) {
                        const theNode = this.getNodeById(nodeid);
                        if (!theNode) {
                            throw new Error("the node[id=" + nodeid + "] can not be found.");
                        }
                        else {
                            console.log(`element: ${element.tagName.toLowerCase()}`);
                            this.toggleNode(theNode);
                        }
                    }
                    return false;
                }
                case "mcadder": {
                    const nodeid = this.view.getBindedNodeId(element);
                    if (nodeid) {
                        const theNode = this.getNodeById(nodeid);
                        if (!theNode) {
                            throw new Error("the node[id=" + nodeid + "] can not be found.");
                        }
                        else {
                            console.log(`element: ${element.tagName.toLowerCase()}`);
                            const nodeid = generateNewId();
                            const node = this.addNode(theNode, nodeid, "New Node");
                            if (node) {
                                this.selectNode(node);
                                this.beginEdit(node);
                            }
                        }
                    }
                    return false;
                }
            }
            return true;
        }
        dblclickHandle(e) {
            this.checkEditable();
            e.preventDefault();
            e.stopPropagation();
            const element = e.target;
            const nodeid = this.view.getBindedNodeId(element);
            if (nodeid) {
                const theNode = this.getNodeById(nodeid);
                if (theNode.data.view.element.contentEditable == "true") {
                    // The node is already in the editing mode.
                    return false;
                }
                if (!theNode) {
                    throw new Error(`the node[id=${nodeid}] can not be found.`);
                }
                this.beginEdit(theNode);
                return false;
            }
            return true;
        }
        beginEdit(node) {
            this.checkEditable();
            this.view.editNodeBegin(node);
        }
        zoom(n) {
            console.log(`set zoom scale to ${n}`);
            this.view.mindCheeseInnerElement.style.transform = `scale(${n})`;
        }
        endEdit() {
            this.view.editNodeEnd();
        }
        toggleNode(node) {
            if (node.isroot) {
                return;
            }
            const location = this.view.takeLocation(node);
            this.layout.toggleNode(node);
            this.view.layoutAgain();
            this.view.restoreLocation(node, location);
        }
        expandNode(node) {
            if (node.isroot) {
                return;
            }
            const location = this.view.takeLocation(node);
            node.expanded = true;
            this.view.layoutAgain();
            this.view.restoreLocation(node, location);
        }
        doReset() {
            this.view.reset();
            this.layout.reset();
        }
        doShow(mind) {
            this.mind = mind;
            this.view.createNodes();
            this.view.cacheNodeSize();
            this.view.layoutAgain();
            this.view.centerRoot();
        }
        // nodeTree = object representation of the mindmap.
        showNodeTree(nodeTree) {
            this.doReset();
            this.doShow(object2mindmap(nodeTree));
        }
        showMarkdown(body) {
            this.doReset();
            this.doShow(markdown2mindmap(body));
        }
        getMarkdown() {
            // return convertMM2MD(this.mind.root.toObject());
            return mindmap2markdown(this.mind);
        }
        getNodeTree() {
            return this.mind.root.toObject();
        }
        getRoot() {
            return this.mind.root;
        }
        getNodeById(nodeid) {
            return this.mind.getNodeById(nodeid);
        }
        addNode(parentNode, nodeid, topic) {
            this.checkEditable();
            this.undoManager.recordSnapshot();
            parentNode.data.view.adder.style.display = "none";
            const node = this.mind.addNode(parentNode, nodeid, topic, null, null, true);
            if (node) {
                this.view.addNode(node);
                this.view.layoutAgain();
                this.expandNode(parentNode);
            }
            return node;
        }
        insertNodeAfter(nodeAfter, nodeid, topic) {
            this.checkEditable();
            this.undoManager.recordSnapshot();
            const node = this.mind.insertNodeAfter(nodeAfter, nodeid, topic);
            this.view.addNode(node);
            this.view.layoutAgain();
            return node;
        }
        removeNode(node) {
            this.checkEditable();
            if (node.isroot) {
                throw new Error("fail, can not remove root node");
            }
            const nodeid = node.id;
            const parentNode = node.parent;
            this.undoManager.recordSnapshot();
            const nextSelectedNode = MindCheese.findUpperBrotherOrParentNode(parentNode, nodeid);
            const location = this.view.takeLocation(node);
            this.view.removeNode(node);
            this.mind.removeNode(node);
            this.view.layoutAgain();
            if (parentNode.children.length > 0) {
                this.mind.selected = nextSelectedNode;
                this.view.selectNode(nextSelectedNode);
            }
            this.view.restoreLocation(parentNode, location);
            return true;
        }
        static findUpperBrotherOrParentNode(parentNode, targetNodeId) {
            const children = parentNode.children;
            for (let i = 0; i < children.length; i++) {
                if (children[i].id == targetNodeId) {
                    if (i == 0) {
                        return parentNode;
                    }
                    else {
                        return children[i - 1];
                    }
                }
            }
            return parentNode; // return
        }
        // set topic to the node
        updateNode(nodeid, topic) {
            this.checkEditable();
            if (!topic || topic.replace(/\s*/, "").length == 0) {
                throw new Error("fail, topic can not be empty");
            }
            const node = this.getNodeById(nodeid);
            if (!node) {
                throw new Error(`Unknown node: ${nodeid}`);
            }
            this.undoManager.recordSnapshot();
            if (node.topic === topic) {
                console.info("nothing changed");
                this.view.updateNode(node);
                return;
            }
            node.topic = topic;
            this.view.updateNode(node);
            this.view.layoutAgain();
        }
        /**
         * @param node Target node to move.
         * @param beforeid Move nodeid's node to above of the *beforeid*. You can use BEFOREID_* constants.
         * @param parent
         * @param direction
         */
        moveNode(node, beforeid, parent, direction) {
            console.log(`jm.move_node: ${node.id} ${beforeid} ${parent.id} ${direction}`);
            this.checkEditable();
            this.undoManager.recordSnapshot();
            this.mind.moveNode(node, beforeid, parent, direction);
            this.view.updateNode(node);
            this.view.layoutAgain();
        }
        selectNode(node) {
            if (!node.data.layout.visible) {
                return;
            }
            this.mind.selected = node;
            this.view.selectNode(node);
        }
        getSelectedNode() {
            if (this.mind) {
                return this.mind.selected;
            }
            else {
                return null;
            }
        }
        selectClear() {
            if (this.mind) {
                this.mind.selected = null;
                this.view.selectClear();
            }
        }
        findNodeBefore(node) {
            if (node.isroot) {
                return null;
            }
            if (node.parent.isroot) {
                const children = node.parent.children.filter((it) => it.direction === node.direction);
                for (let i = 0; i < children.length; i++) {
                    const ni = children[i];
                    if (node.id === ni.id) {
                        if (i !== 0) {
                            return children[i - 1];
                        }
                        else {
                            return null;
                        }
                    }
                }
                throw new Error(`Missing the node in parent: ${node.id}`);
            }
            else {
                return this.mind.getNodeBefore(node);
            }
        }
        findNodeAfter(node) {
            if (node.isroot) {
                return null;
            }
            if (node.parent.isroot) {
                const children = node.parent.children.filter((it) => it.direction == node.direction);
                for (let i = 0; i < children.length; i++) {
                    const ni = children[i];
                    if (node.id === ni.id) {
                        if (i + 1 < children.length) {
                            return children[i + 1];
                        }
                        else {
                            return null; // the last node.
                        }
                    }
                }
                throw new Error(`Illegal state. The parent node doesn't have this child: ${node.id}`);
            }
            else {
                return this.mind.getNodeAfter(node);
            }
        }
        resize() {
            console.log("MindCheese.resize()");
            this.view.resize();
        }
        undo() {
            this.undoManager.undo();
        }
        moveUp(node) {
            /*
            as-is:
              - a
               - foo
               - bar      ← selected node.
        
            after:
              - a
                - bar      ← target node
                - foo
             */
            const upNode = this.findNodeBefore(node);
            if (upNode) {
                this.moveNode(node, upNode.id, node.parent, node.direction);
                return;
            }
        }
        moveDown(node) {
            const children = node.parent.children.filter((it) => it.direction === node.direction);
            for (let i = 0; i < children.length; i++) {
                if (children[i].id == node.id) {
                    if (i === children.length - 1) {
                        // already in the last.
                        return; // do nothing
                    }
                    else if (i === children.length - 2) {
                        // already in the above of the last one.
                        /*
                         * before:
                         *   - a
                         *     - b = 1
                         *     - c = 2
                         *
                         * after:
                         *   - a
                         *     - c = 2
                         *     - b = LAST
                         */
                        this.moveNode(node, BEFOREID_LAST, node.parent, node.direction);
                        return; // Put on last element.
                    }
                    else {
                        /*
                         * before:
                         *   - a
                         *     - b = 1 ← node.id
                         *     - c = 2
                         *     - d = 3 ← beforeid
                         *
                         * after:
                         *   - a
                         *     - c = 2
                         *     - b = 3-0.5=2.5
                         *     - d = 3
                         */
                        console.debug(`MindCheese.moveDown: topic=${node.topic} before.topic=${children[i + 1].topic} direction=${node.direction}`);
                        this.moveNode(node, children[i + 2].id, node.parent, node.direction);
                        console.log(this.mind);
                        return;
                    }
                }
            }
        }
    }

    const DEMO_NODE_TREE = {
        id: "root",
        topic: "mindCheese 🧀",
        children: [
            {
                id: "easy",
                topic: "Easy",
                direction: "left",
                children: [
                    { id: "easy1", topic: "Easy to show" },
                    { id: "easy2", topic: "Easy to edit" },
                    { id: "easy3", topic: "Easy to store" },
                    { id: "easy4", topic: "Easy to embed" },
                ],
            },
            {
                id: "open",
                topic: "Open Source",
                direction: "right",
                children: [
                    { id: "open1", topic: "on GitHub" },
                    { id: "open2", topic: "BSD License" },
                ],
            },
            {
                id: "powerful",
                topic: "Powerful",
                direction: "right",
                children: [
                    { id: "powerful1", topic: "Base on **TypeScript**" },
                    {
                        id: "powerful2",
                        topic: "Base on **jsMind**",
                        children: [
                            { id: "jsMind1", topic: "Base on HTML5" },
                            { id: "jsMind2", topic: "Supported CJK chars" },
                        ],
                    },
                    { id: "powerful4", topic: "Depends on you" },
                ],
            },
            {
                id: "other",
                topic: "test node",
                direction: "left",
                // expanded: false,
                children: [
                    { id: "other1", topic: "I'm from local variable" },
                    { id: "other2", topic: "I can do everything: `3*2`" },
                    {
                        id: "other3",
                        topic: "Multi line\nMulti line\nMulti line\nMulti line\nMulti line\nMulti line\nMulti line\nMulti line\nMulti line",
                        children: [
                            {
                                id: "hello1",
                                topic: "こんにちは",
                            },
                            {
                                id: "hello2",
                                topic: "Hello",
                            },
                            {
                                id: "hello3",
                                topic: "Здравствуйте",
                            },
                        ],
                    },
                    {
                        id: "other4",
                        topic: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Eget mauris pharetra et ultrices neque ornare aenean euismod elementum. Tempus egestas sed sed risus. Lacus vel facilisis volutpat est velit egestas. Odio aenean sed adipiscing diam donec adipiscing tristique risus. Eu ultrices vitae auctor eu augue ut lectus. Nulla pharetra diam sit amet. Integer quis auctor elit sed vulputate mi sit amet. Interdum varius sit amet mattis vulputate enim nulla aliquet. Fermentum odio eu feugiat pretium nibh ipsum consequat nisl. Sed euismod nisi porta lorem. Suspendisse potenti nullam ac tortor. Curabitur gravida arcu ac tortor.",
                    },
                ],
            },
        ],
    };
    const DEMO_MARKDOWN = `- マークダウンのテスト
  - a1
    - b1
        - dddddddddddddddddddd1
          - eeeeeeeeeeeeeeeeeeeeee2
            - ffffffffffffffffffffff3
              - gggggggggggggggggggggggggg3
                - hhhhhhhhhhhhhhhhhhhhhh2
                  - iiiiiiiiiiiiii52iiiiiiiiiii
                    - jjjjjjjjjjjjjj25jjjjjjjjjjjj
                      - kkkkkkkkk2342kkkkkkkkkkkkkkkkk2
                        - lllllllllll52llllllllllllllllllll
    - b2
    - b3
      - c1
      - c2
        - dddddddddddddddddddd
          - eeeeeeeeeeeeeeeeeeeeee
            - ffffffffffffffffffffff
              - gggggggggggggggggggggggggg
                - hhhhhhhhhhhhhhhhhhhhhh
                  - iiiiiiiiiiiiiiiiiiiiiiiii
                    - jjjjjjjjjjjjjjjjjjjjjjjjjj
                      - kkkkkkkkkkkkkkkkkkkkkkkkkk
                        - lllllllllllllllllllllllllllllll
  + a2 \\
    複数行だよ
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
  + aaa
`;

    console.log("Loaded browser.ts");
    function downloadText(filename, text) {
        const element = document.createElement("a");
        element.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(text));
        element.setAttribute("download", filename);
        element.style.display = "none";
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
    }
    function initDemo() {
        const container = document.getElementById("container");
        const mindCheese = new MindCheese(1, container);
        // @ts-ignore
        this.mindCheese = mindCheese;
        mindCheese.showNodeTree(DEMO_NODE_TREE);
        document.getElementById("download_json").addEventListener("click", () => {
            const data = mindCheese.getNodeTree();
            downloadText(encodeURIComponent(mindCheese.mind.root.topic) + ".json", JSON.stringify(data, null, 2));
            return false;
        });
        document
            .getElementById("download_markdown")
            .addEventListener("click", () => {
            const data = mindCheese.getMarkdown();
            downloadText(encodeURIComponent(mindCheese.mind.root.topic) + ".md", data);
            return false;
        });
        document.getElementById("undo").addEventListener("click", () => {
            mindCheese.undo();
            return false;
        });
        if (process.env.BUILD == "development") {
            document.getElementById("load_markdown").addEventListener("click", () => {
                mindCheese.showMarkdown(DEMO_MARKDOWN);
                return false;
            });
        }
        else {
            document.getElementById("navItemDebug").style.display = "none";
        }
        let themeMode = true;
        document.getElementById("toggle_theme").addEventListener("click", () => {
            mindCheese.setTheme(themeMode ? "dark" : "primary");
            themeMode = !themeMode;
            return false;
        });
    }
    // @ts-ignore
    window.initDemo = initDemo;

    return initDemo;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlci5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL21pbmRtYXAvU2l6ZS50cyIsIi4uL3NyYy9taW5kbWFwL0xheW91dFByb3ZpZGVyLnRzIiwiLi4vc3JjL21pbmRtYXAvTWluZG1hcENvbnN0YW50cy50cyIsIi4uL3NyYy9taW5kbWFwL1ZpZXdQcm92aWRlci50cyIsIi4uL3NyYy9taW5kbWFwL1Nob3J0Y3V0UHJvdmlkZXIudHMiLCIuLi9zcmMvbWluZG1hcC9tb2RlbC9WaWV3RGF0YS50cyIsIi4uL3NyYy9taW5kbWFwL21vZGVsL0xheW91dERhdGEudHMiLCIuLi9zcmMvbWluZG1hcC91dGlscy9Sb3VuZFJvYmluLnRzIiwiLi4vc3JjL21pbmRtYXAvbW9kZWwvQ09MT1JTLnRzIiwiLi4vc3JjL21pbmRtYXAvbW9kZWwvTWluZE5vZGUudHMiLCIuLi9zcmMvbWluZG1hcC9NaW5kLnRzIiwiLi4vc3JjL21pbmRtYXAvRHJhZ2dhYmxlLnRzIiwiLi4vc3JjL21pbmRtYXAvVW5kb01hbmFnZXIudHMiLCIuLi9zcmMvbWluZG1hcC9HcmFwaENhbnZhcy50cyIsIi4uL3NyYy9taW5kbWFwL2Zvcm1hdC9ub2RlX3RyZWUvb2JqZWN0Mm1pbmRtYXAudHMiLCIuLi9zcmMvbWluZG1hcC91dGlscy9SYW5kb21JRC50cyIsIi4uL3NyYy9taW5kbWFwL1Nob3J0Y3V0SGFuZGxlcnMudHMiLCIuLi9zcmMvbWluZG1hcC9yZW5kZXJlci9NYXJrZG93blJlbmRlcmVyLnRzIiwiLi4vc3JjL21pbmRtYXAvTWluZE9wdGlvbi50cyIsIi4uL3NyYy9taW5kbWFwL2Zvcm1hdC9tYXJrZG93bi9taW5kbWFwMm1hcmtkb3duLnRzIiwiLi4vc3JjL21pbmRtYXAvZm9ybWF0L21hcmtkb3duL21hcmtkb3duMm1pbmRtYXAudHMiLCIuLi9zcmMvbWluZG1hcC9NaW5kQ2hlZXNlLnRzIiwiRGVtb0RhdGEudHMiLCJicm93c2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpudWxsLCJuYW1l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
