/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

this['browser/browser'] = this['browser/browser'] || {};
this['browser/browser'].bundled = this['browser/browser'].bundled || {};
this['browser/browser'].bundled.js = (function () {
    'use strict';

    // TODO convert to typescript
    // noinspection JSUnusedGlobalSymbols
    class ViewData {
    }
    class LayoutData {
    }
    class MindNode {
        constructor(sId, iIndex, sTopic, oData, bIsRoot, oParent, eDirection, bExpanded) {
            if (!sId) {
                throw new Error("invalid nodeid");
            }
            if (typeof iIndex != "number") {
                throw new Error("invalid node index");
            }
            if (typeof bExpanded === "undefined") {
                bExpanded = true;
            }
            this.id = sId;
            this.index = iIndex;
            this.topic = sTopic;
            this.data = oData || {};
            this.isroot = bIsRoot;
            this.parent = oParent;
            this.direction = eDirection;
            this.expanded = !!bExpanded;
            this.children = [];
            this._data = {
                view: new ViewData(),
                layout: new LayoutData(),
            };
        }
        static compare(node1, node2) {
            // '-1' is alwary the last
            let r;
            const i1 = node1.index;
            const i2 = node2.index;
            if (i1 >= 0 && i2 >= 0) {
                r = i1 - i2;
            }
            else if (i1 === -1 && i2 === -1) {
                r = 0;
            }
            else if (i1 === -1) {
                r = 1;
            }
            else if (i2 === -1) {
                r = -1;
            }
            else {
                r = 0;
            }
            //logger.debug(i1+' <> '+i2+'  =  '+r);
            return r;
        }
        static inherited(pnode, node) {
            if (!!pnode && !!node) {
                if (pnode.id === node.id) {
                    return true;
                }
                if (pnode.isroot) {
                    return true;
                }
                const pid = pnode.id;
                let p = node;
                while (!p.isroot) {
                    p = p.parent;
                    if (p.id === pid) {
                        return true;
                    }
                }
            }
            return false;
        }
        get_location() {
            const vd = this._data.view;
            return {
                x: vd.abs_x,
                y: vd.abs_y,
            };
        }
        get_size() {
            const vd = this._data.view;
            return {
                w: vd.width,
                h: vd.height,
            };
        }
    }

    // noinspection JSUnfilteredForInLoop
    class Mind {
        constructor(id) {
            this.id = id;
            this.name = null;
            this.author = null;
            this.version = null;
            this.root = null;
            this.selected = null;
            this.nodes = {};
        }
        get_node(nodeid) {
            if (nodeid in this.nodes) {
                return this.nodes[nodeid];
            }
            else {
                throw new Error(`the node[id=${nodeid}] can not be found...`);
            }
        }
        set_root(nodeid, topic, data) {
            if (this.root == null) {
                this.root = new MindNode(nodeid, 0, topic, data, true, null, null, null);
                this._put_node(this.root);
            }
            else {
                console.error("root node is already exist");
            }
        }
        add_node(parent_node, nodeid, topic, data, idx, direction, expanded) {
            const nodeindex = idx || -1;
            let node;
            if (parent_node.isroot) {
                let d;
                if (direction == null) {
                    const children = parent_node.children;
                    const children_len = children.length;
                    let r = 0;
                    for (let i = 0; i < children_len; i++) {
                        if (children[i].direction === -1 /* LEFT */) {
                            r--;
                        }
                        else {
                            r++;
                        }
                    }
                    d = children_len > 1 && r > 0 ? -1 /* LEFT */ : 1 /* RIGHT */;
                }
                else {
                    d = direction !== -1 /* LEFT */ ? 1 /* RIGHT */ : -1 /* LEFT */;
                }
                console.log(`add_node source DIRECTION=${direction} DIRECTION=${d} ${topic}`);
                node = new MindNode(nodeid, nodeindex, topic, data, false, parent_node, d, expanded);
            }
            else {
                node = new MindNode(nodeid, nodeindex, topic, data, false, parent_node, parent_node.direction, expanded);
            }
            if (this._put_node(node)) {
                parent_node.children.push(node);
                this._reindex(parent_node);
                return node;
            }
            else {
                console.error("fail, the nodeid '" + node.id + "' has been already exist.");
                return null;
            }
        }
        insert_node_before(node_before, nodeid, topic, data) {
            const node_index = node_before.index - 0.5;
            return this.add_node(node_before.parent, nodeid, topic, data, node_index, null, null);
        }
        get_node_before(node) {
            if (node.isroot) {
                return null;
            }
            const idx = node.index - 2;
            if (idx >= 0) {
                return node.parent.children[idx];
            }
            else {
                return null;
            }
        }
        // add little brother node.
        insert_node_after(node_after, nodeid, topic, data) {
            const node_index = node_after.index + 0.5;
            // follow current direction.
            return this.add_node(node_after.parent, nodeid, topic, data, node_index, node_after.direction, null);
        }
        get_node_after(node) {
            if (node.isroot) {
                return null;
            }
            const idx = node.index;
            const brothers = node.parent.children;
            if (brothers.length >= idx) {
                return node.parent.children[idx];
            }
            else {
                return null;
            }
        }
        move_node(node, beforeid, parentid, direction) {
            console.assert(node instanceof MindNode, "node should be Node");
            console.log(`move_node: ${node} ${beforeid} ${parentid} ${direction}`);
            if (!parentid) {
                parentid = node.parent.id;
            }
            return this._move_node(node, beforeid, parentid, direction);
        }
        _flow_node_direction(node, direction) {
            if (typeof direction === "undefined") {
                direction = node.direction;
            }
            else {
                node.direction = direction;
            }
            let len = node.children.length;
            while (len--) {
                this._flow_node_direction(node.children[len], direction);
            }
        }
        _move_node_internal(node, beforeid) {
            if (!!node && !!beforeid) {
                if (beforeid === "_last_") {
                    node.index = -1;
                    this._reindex(node.parent);
                }
                else if (beforeid === "_first_") {
                    node.index = 0;
                    this._reindex(node.parent);
                }
                else {
                    const node_before = beforeid ? this.get_node(beforeid) : null;
                    if (node_before != null &&
                        node_before.parent != null &&
                        node_before.parent.id === node.parent.id) {
                        node.index = node_before.index - 0.5;
                        this._reindex(node.parent);
                    }
                }
            }
            return node;
        }
        _move_node(node, beforeid, parentid, direction) {
            console.log(`_move_node: ${node}, ${beforeid}, ${parentid}, ${direction}`);
            if (!!node && !!parentid) {
                console.assert(node.parent, `node.parent is null: ${node}`);
                if (node.parent.id !== parentid) {
                    // remove from parent's children
                    const sibling = node.parent.children;
                    let si = sibling.length;
                    while (si--) {
                        console.assert(sibling[si], "sibling[si] is null");
                        if (sibling[si].id === node.id) {
                            sibling.splice(si, 1);
                            break;
                        }
                    }
                    node.parent = this.get_node(parentid);
                    node.parent.children.push(node);
                }
                if (node.parent.isroot) {
                    if (direction === -1 /* LEFT */) {
                        node.direction = direction;
                    }
                    else {
                        node.direction = 1 /* RIGHT */;
                    }
                }
                else {
                    node.direction = node.parent.direction;
                }
                this._move_node_internal(node, beforeid);
                this._flow_node_direction(node, null);
            }
            return node;
        }
        // XXX jsMind では Node ではなく string も受け付けていた。
        remove_node(node) {
            if (!node) {
                console.error("fail, the node can not be found");
                return false;
            }
            if (node.isroot) {
                console.error("fail, can not remove root node");
                return false;
            }
            if (this.selected != null && this.selected.id === node.id) {
                this.selected = null;
            }
            // clean all subordinate nodes
            const children = node.children;
            let ci = children.length;
            while (ci--) {
                this.remove_node(children[ci]);
            }
            // clean all children
            children.length = 0;
            // remove from parent's children
            const sibling = node.parent.children;
            let si = sibling.length;
            while (si--) {
                if (sibling[si].id === node.id) {
                    sibling.splice(si, 1);
                    break;
                }
            }
            // remove from global nodes
            delete this.nodes[node.id];
            // clean all properties
            for (const k in node) {
                // @ts-ignore
                delete node[k];
            }
            // remove it's self
            node = null;
            //delete node;
            return true;
        }
        _put_node(node) {
            if (node.id in this.nodes) {
                console.warn("the nodeid '" + node.id + "' has been already exist.");
                return false;
            }
            else {
                this.nodes[node.id] = node;
                return true;
            }
        }
        _reindex(node) {
            if (node instanceof MindNode) {
                node.children.sort(MindNode.compare);
                for (let i = 0; i < node.children.length; i++) {
                    node.children[i].index = i + 1;
                }
            }
        }
    }

    // noinspection JSUnfilteredForInLoop
    class NodeTree {
        get_mind(source, id) {
            const mind = new Mind(id);
            mind.name = source.meta.name;
            mind.author = source.meta.author;
            mind.version = source.meta.version;
            this._parse(mind, source.data);
            return mind;
        }
        get_data(mind) {
            const json = {};
            json.meta = {
                name: mind.name,
                author: mind.author,
                version: mind.version,
            };
            json.format = "node_tree";
            json.data = this._buildnode(mind.root);
            return json;
        }
        _parse(mind, node_root) {
            const data = this._extract_data(node_root);
            mind.set_root(node_root.id, node_root.topic, data);
            if ("children" in node_root) {
                const children = node_root.children;
                for (let i = 0; i < children.length; i++) {
                    this._extract_subnode(mind, mind.root, children[i]);
                }
            }
        }
        _extract_data(node_json) {
            const data = {};
            for (const k in node_json) {
                if (k == "id" ||
                    k == "topic" ||
                    k == "children" ||
                    k == "direction" ||
                    k == "expanded") {
                    continue;
                }
                // @ts-ignore
                data[k] = node_json[k];
            }
            return data;
        }
        _extract_subnode(mind, node_parent, node_json) {
            const data = this._extract_data(node_json);
            let d = null;
            if (node_parent.isroot) {
                d = node_json.direction == "left" ? -1 /* LEFT */ : 1 /* RIGHT */;
            }
            console.log(`_extract_subnode node_json.direction DIRECTION=${node_json.direction} d=${d} ${node_json.topic}`);
            const node = mind.add_node(node_parent, node_json.id, node_json.topic, data, null, d, node_json.expanded);
            if ("children" in node_json) {
                const children = node_json.children;
                for (let i = 0; i < children.length; i++) {
                    this._extract_subnode(mind, node, children[i]);
                }
            }
        }
        _buildnode(node) {
            if (!(node instanceof MindNode)) {
                return;
            }
            const o = {
                id: node.id,
                topic: node.topic,
                expanded: node.expanded,
            };
            if (!!node.parent && node.parent.isroot) {
                o.direction = node.direction == -1 /* LEFT */ ? "left" : "right";
            }
            if (node.data != null) {
                const node_data = node.data;
                for (const k in node_data) {
                    // @ts-ignore
                    o[k] = node_data[k];
                }
            }
            const children = node.children;
            if (children.length > 0) {
                o.children = [];
                for (let i = 0; i < children.length; i++) {
                    o.children.push(this._buildnode(children[i]));
                }
            }
            return o;
        }
    }

    class DataProvider {
        constructor(jm) {
            this.jm = jm;
            this.format = {
                node_tree: new NodeTree(),
            };
        }
        load(mind_data, id) {
            return this.format.node_tree.get_mind(mind_data, id);
        }
        get_data(data_format) {
            if (data_format === "node_tree") {
                console.log(this.jm.mind);
                return this.format.node_tree.get_data(this.jm.mind);
            }
            else {
                throw new Error(`Unknown format: ${data_format}`);
            }
        }
    }

    // noinspection JSUnfilteredForInLoop
    class Point {
    }
    class LayoutProvider {
        constructor(jm, mode = "full" /* 'full' or 'side' */, hspace = 30, vspace = 20, pspace = 13) {
            this._hspace = hspace;
            this._vspace = vspace;
            this._pspace = pspace;
            this.jm = jm;
            this.isside = mode == "side";
            this.bounds = null;
            this.cache_valid = false;
        }
        init() {
            // TODO remove this
            console.debug("layout.init");
        }
        reset() {
            console.debug("layout.reset");
            this.bounds = { n: 0, s: 0, w: 0, e: 0 };
        }
        layout() {
            console.debug("layout.layout");
            this.layout_direction();
            this.layout_offset();
        }
        layout_direction() {
            this._layout_direction_root();
        }
        _layout_direction_root() {
            const node = this.jm.mind.root;
            // console.debug(node);
            const layout_data = node._data.layout;
            const children = node.children;
            const children_count = children.length;
            layout_data.direction = 0 /* CENTER */;
            layout_data.side_index = 0;
            if (this.isside) {
                let i = children_count;
                while (i--) {
                    this._layout_direction_side(children[i], 1 /* RIGHT */, i);
                }
            }
            else {
                let i = children_count;
                let subnode = null;
                while (i--) {
                    subnode = children[i];
                    if (subnode.direction == -1 /* LEFT */) {
                        this._layout_direction_side(subnode, -1 /* LEFT */, i);
                    }
                    else {
                        this._layout_direction_side(subnode, 1 /* RIGHT */, i);
                    }
                }
                /*
                        var boundary = Math.ceil(children_count/2);
                        var i = children_count;
                        while(i--){
                            if(i>=boundary){
                                this._layout_direction_side(children[i],Direction.LEFT, children_count-i-1);
                            }else{
                                this._layout_direction_side(children[i],Direction.RIGHT, i);
                            }
                        }*/
            }
        }
        _layout_direction_side(node, direction, side_index) {
            let layout_data = node._data.layout;
            const children = node.children;
            const children_count = children.length;
            layout_data.direction = direction;
            layout_data.side_index = side_index;
            let i = children_count;
            while (i--) {
                this._layout_direction_side(children[i], direction, i);
            }
        }
        layout_offset() {
            const node = this.jm.mind.root;
            const layout_data = node._data.layout;
            layout_data.offset_x = 0;
            layout_data.offset_y = 0;
            layout_data.outer_height = 0;
            const children = node.children;
            let i = children.length;
            const left_nodes = [];
            const right_nodes = [];
            let subnode = null;
            while (i--) {
                subnode = children[i];
                if (subnode._data.layout.direction == 1 /* RIGHT */) {
                    right_nodes.unshift(subnode);
                }
                else {
                    left_nodes.unshift(subnode);
                }
            }
            layout_data.left_nodes = left_nodes;
            layout_data.right_nodes = right_nodes;
            layout_data.outer_height_left = this._layout_offset_subnodes(left_nodes);
            layout_data.outer_height_right = this._layout_offset_subnodes(right_nodes);
            this.bounds.e = node._data.view.width / 2;
            this.bounds.w = 0 - this.bounds.e;
            //console.debug(this.bounds.w);
            this.bounds.n = 0;
            this.bounds.s = Math.max(layout_data.outer_height_left, layout_data.outer_height_right);
        }
        // layout both the x and y axis
        _layout_offset_subnodes(nodes) {
            let total_height = 0;
            const nodes_count = nodes.length;
            let i = nodes_count;
            let node = null;
            let node_outer_height = 0;
            let layout_data = null;
            let base_y = 0;
            let pd = null; // parent._data
            while (i--) {
                node = nodes[i];
                layout_data = node._data.layout;
                if (pd == null) {
                    pd = node.parent._data;
                    if (pd == null) {
                        throw new Error("Cannot get parent's data");
                    }
                }
                node_outer_height = this._layout_offset_subnodes(node.children);
                if (!node.expanded) {
                    node_outer_height = 0;
                    this.set_visible(node.children, false);
                }
                node_outer_height = Math.max(node._data.view.height, node_outer_height);
                layout_data.outer_height = node_outer_height;
                layout_data.offset_y = base_y - node_outer_height / 2;
                layout_data.offset_x =
                    this._hspace * layout_data.direction +
                        (pd.view.width * (pd.layout.direction + layout_data.direction)) / 2;
                if (!node.parent.isroot) {
                    layout_data.offset_x += this._pspace * layout_data.direction;
                }
                base_y = base_y - node_outer_height - this._vspace;
                total_height += node_outer_height;
            }
            if (nodes_count > 1) {
                total_height += this._vspace * (nodes_count - 1);
            }
            i = nodes_count;
            const middle_height = total_height / 2;
            while (i--) {
                node = nodes[i];
                node._data.layout.offset_y += middle_height;
            }
            return total_height;
        }
        // layout the y axis only, for collapse/expand a node
        _layout_offset_subnodes_height(nodes) {
            let total_height = 0;
            const nodes_count = nodes.length;
            let i = nodes_count;
            let node = null;
            let node_outer_height = 0;
            let layout_data = null;
            let base_y = 0;
            let pd = null; // parent._data
            while (i--) {
                node = nodes[i];
                layout_data = node._data.layout;
                if (pd == null) {
                    pd = node.parent._data;
                }
                node_outer_height = this._layout_offset_subnodes_height(node.children);
                if (!node.expanded) {
                    node_outer_height = 0;
                }
                node_outer_height = Math.max(node._data.view.height, node_outer_height);
                layout_data.outer_height = node_outer_height;
                layout_data.offset_y = base_y - node_outer_height / 2;
                base_y = base_y - node_outer_height - this._vspace;
                total_height += node_outer_height;
            }
            if (nodes_count > 1) {
                total_height += this._vspace * (nodes_count - 1);
            }
            i = nodes_count;
            const middle_height = total_height / 2;
            while (i--) {
                node = nodes[i];
                node._data.layout.offset_y += middle_height;
                //console.debug(node.topic);
                //console.debug(node._data.layout.offset_y);
            }
            return total_height;
        }
        get_node_offset(node) {
            const layout_data = node._data.layout;
            let offset_cache;
            if ("_offset_" in layout_data && this.cache_valid) {
                offset_cache = layout_data._offset_;
            }
            else {
                offset_cache = { x: -1, y: -1 };
                layout_data._offset_ = offset_cache;
            }
            if (offset_cache.x == -1 || offset_cache.y == -1) {
                let x = layout_data.offset_x;
                let y = layout_data.offset_y;
                if (!node.isroot) {
                    const offset_p = this.get_node_offset(node.parent);
                    x += offset_p.x;
                    y += offset_p.y;
                }
                offset_cache.x = x;
                offset_cache.y = y;
            }
            return offset_cache;
        }
        get_node_point(node) {
            const view_data = node._data.view;
            const offset_p = this.get_node_offset(node);
            //console.debug(offset_p);
            const p = new Point();
            p.x =
                offset_p.x + (view_data.width * (node._data.layout.direction - 1)) / 2;
            p.y = offset_p.y - view_data.height / 2;
            //console.debug(p);
            return p;
        }
        get_node_point_in(node) {
            return this.get_node_offset(node);
        }
        get_node_point_out(node) {
            const layout_data = node._data.layout;
            let pout_cache;
            if ("_pout_" in layout_data && this.cache_valid) {
                pout_cache = layout_data._pout_;
            }
            else {
                pout_cache = { x: -1, y: -1 };
                layout_data._pout_ = pout_cache;
            }
            if (pout_cache.x == -1 || pout_cache.y == -1) {
                if (node.isroot) {
                    pout_cache.x = 0;
                    pout_cache.y = 0;
                }
                else {
                    const view_data = node._data.view;
                    const offset_p = this.get_node_offset(node);
                    pout_cache.x =
                        offset_p.x +
                            (view_data.width + this._pspace) * node._data.layout.direction;
                    pout_cache.y = offset_p.y;
                    //console.debug('pout');
                    //console.debug(pout_cache);
                }
            }
            return pout_cache;
        }
        get_expander_point(node) {
            const p = this.get_node_point_out(node);
            const ex_p = new Point();
            if (node._data.layout.direction == 1 /* RIGHT */) {
                ex_p.x = p.x - this._pspace;
            }
            else {
                ex_p.x = p.x;
            }
            ex_p.y = p.y - Math.ceil(this._pspace / 2);
            return ex_p;
        }
        get_min_size() {
            const nodes = this.jm.mind.nodes;
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                const pout = this.get_node_point_out(node);
                if (pout.x > this.bounds.e) {
                    this.bounds.e = pout.x;
                }
                if (pout.x < this.bounds.w) {
                    this.bounds.w = pout.x;
                }
            }
            return {
                w: this.bounds.e - this.bounds.w,
                h: this.bounds.s - this.bounds.n,
            };
        }
        toggle_node(node) {
            if (node.isroot) {
                return;
            }
            if (node.expanded) {
                this.collapse_node(node);
            }
            else {
                this.expand_node(node);
            }
        }
        expand_node(node) {
            node.expanded = true;
            this.part_layout(node);
            this.set_visible(node.children, true);
            this.jm.invoke_event_handle(1 /* SHOW */, {
                evt: "expand_node",
                data: [],
                node: node.id,
            });
        }
        collapse_node(node) {
            node.expanded = false;
            this.part_layout(node);
            this.set_visible(node.children, false);
            this.jm.invoke_event_handle(1 /* SHOW */, {
                evt: "collapse_node",
                data: [],
                node: node.id,
            });
        }
        expand_all() {
            const nodes = this.jm.mind.nodes;
            let c = 0;
            for (const nodeid in nodes) {
                const node = nodes[nodeid];
                if (!node.expanded) {
                    node.expanded = true;
                    c++;
                }
            }
            if (c > 0) {
                const root = this.jm.mind.root;
                this.part_layout(root);
                this.set_visible(root.children, true);
            }
        }
        collapse_all() {
            const nodes = this.jm.mind.nodes;
            let c = 0;
            let node;
            for (const nodeid in nodes) {
                node = nodes[nodeid];
                if (node.expanded && !node.isroot) {
                    node.expanded = false;
                    c++;
                }
            }
            if (c > 0) {
                const root = this.jm.mind.root;
                this.part_layout(root);
                this.set_visible(root.children, true);
            }
        }
        expand_to_depth(target_depth, curr_nodes, curr_depth) {
            if (target_depth < 1) {
                return;
            }
            const nodes = curr_nodes || this.jm.mind.root.children;
            const depth = curr_depth || 1;
            let i = nodes.length;
            let node = null;
            while (i--) {
                node = nodes[i];
                if (depth < target_depth) {
                    if (!node.expanded) {
                        this.expand_node(node);
                    }
                    this.expand_to_depth(target_depth, node.children, depth + 1);
                }
                if (depth == target_depth) {
                    if (node.expanded) {
                        this.collapse_node(node);
                    }
                }
            }
        }
        part_layout(node) {
            const root = this.jm.mind.root;
            if (root) {
                const root_layout_data = root._data.layout;
                if (node.isroot) {
                    root_layout_data.outer_height_right = this._layout_offset_subnodes_height(root_layout_data.right_nodes);
                    root_layout_data.outer_height_left = this._layout_offset_subnodes_height(root_layout_data.left_nodes);
                }
                else {
                    if (node._data.layout.direction == 1 /* RIGHT */) {
                        root_layout_data.outer_height_right = this._layout_offset_subnodes_height(root_layout_data.right_nodes);
                    }
                    else {
                        root_layout_data.outer_height_left = this._layout_offset_subnodes_height(root_layout_data.left_nodes);
                    }
                }
                this.bounds.s = Math.max(root_layout_data.outer_height_left, root_layout_data.outer_height_right);
                this.cache_valid = false;
            }
            else {
                console.warn("can not found root node");
            }
        }
        set_visible(nodes, visible) {
            let i = nodes.length;
            let node = null;
            while (i--) {
                node = nodes[i];
                node._data.layout;
                if (node.expanded) {
                    this.set_visible(node.children, visible);
                }
                else {
                    this.set_visible(node.children, false);
                }
                if (!node.isroot) {
                    node._data.layout.visible = visible;
                }
            }
        }
        is_visible(node) {
            const layout_data = node._data.layout;
            return !("visible" in layout_data && !layout_data.visible);
        }
    }

    class GraphCanvas {
        constructor(view) {
            this.opts = view.opts;
            this.e_canvas = document.createElement("canvas");
            this.e_canvas.className = "jsmind";
            this.canvas_ctx = this.e_canvas.getContext("2d");
            this.size = { w: 0, h: 0 };
        }
        element() {
            return this.e_canvas;
        }
        set_size(w, h) {
            this.size.w = w;
            this.size.h = h;
            this.e_canvas.width = w;
            this.e_canvas.height = h;
        }
        clear() {
            this.canvas_ctx.clearRect(0, 0, this.size.w, this.size.h);
        }
        draw_line(pout, pin, offset) {
            const ctx = this.canvas_ctx;
            ctx.strokeStyle = this.opts.line_color;
            ctx.lineWidth = this.opts.line_width;
            ctx.lineCap = "round";
            this._bezier_to(ctx, pin.x + offset.x, pin.y + offset.y, pout.x + offset.x, pout.y + offset.y);
        }
        _bezier_to(ctx, x1, y1, x2, y2) {
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.bezierCurveTo(x1 + ((x2 - x1) * 2) / 3, y1, x1, y2, x2, y2);
            ctx.stroke();
        }
    }

    // noinspection JSUnusedGlobalSymbols
    const KEYCODE_ENTER = 13;

    // noinspection JSUnfilteredForInLoop,JSUnusedGlobalSymbols,JSUnusedGlobalSymbols
    const $h = function (n, t) {
        // TODO inlining this
        if (t instanceof HTMLElement) {
            n.innerHTML = "";
            n.appendChild(t);
        }
        else {
            n.innerHTML = t;
        }
    };
    // detect isElemend
    // TODO remove this.
    function isElement(el) {
        return (!!el &&
            typeof el === "object" &&
            el.nodeType === 1 &&
            typeof el.style === "object" &&
            typeof el.ownerDocument === "object");
    }
    function is_empty$1(s) {
        // TODO inlining?
        if (!s) {
            return true;
        }
        return s.replace(/\s*/, "").length == 0;
    }
    // noinspection JSUnusedGlobalSymbols
    class ViewProvider {
        constructor(jm, options) {
            this.opts = options;
            this.jm = jm;
            this.layout = jm.layout;
            this.container = null;
            this.e_panel = null;
            this.e_nodes = null;
            this.size = { w: 0, h: 0 };
            this.selected_node = null;
            this.editing_node = null;
            this.graph = null;
        }
        init() {
            console.debug("view.init");
            this.container = isElement(this.opts.container)
                ? this.opts.container
                : document.getElementById(this.opts.container);
            if (!this.container) {
                console.error("the options.view.container was not be found in dom");
                return;
            }
            this.e_panel = document.createElement("div");
            this.e_nodes = document.createElement("jmnodes");
            this.e_editor = document.createElement("textarea");
            this.graph = new GraphCanvas(this);
            this.e_panel.className = "jsmind-inner";
            this.e_panel.appendChild(this.graph.element());
            this.e_panel.appendChild(this.e_nodes);
            this.e_editor.className = "jsmind-editor";
            this.actualZoom = 1;
            this.zoomStep = 0.1;
            this.minZoom = 0.5;
            this.maxZoom = 2;
            const v = this; // TODO remove this.
            this.e_editor.addEventListener("keydown", (e) => {
                // https://qiita.com/ledsun/items/31e43a97413dd3c8e38e
                // keyCode is deprecated field. But it's a hack for Japanese IME.
                if (e.keyCode === KEYCODE_ENTER && !e.shiftKey) {
                    v.edit_node_end();
                    e.stopPropagation();
                }
            });
            this.e_editor.addEventListener("keyup", () => {
                // adjust size dynamically.
                this.adjustEditorElementSize();
            });
            this.e_editor.addEventListener("blur", () => {
                // when the element lost focus.
                // TODO revert this↓
                v.edit_node_end();
            });
            this.e_editor.addEventListener("input", (e) => {
                console.log("textarea.oninput");
                this.adjustEditorElementSize();
                return false;
            });
            this.container.appendChild(this.e_panel);
        }
        adjustEditorElementSize() {
            const el = this.e_editor;
            el.style.width = "";
            el.style.height = "";
            el.style.width = el.scrollWidth + "px";
            el.style.height = el.scrollHeight + "px";
            this.editing_node._data.view.width = this.e_editor.clientWidth;
            this.editing_node._data.view.height = this.e_editor.clientHeight;
            this.layout.layout();
            this.show(false);
        }
        setTextToElement(element, topic) {
            element.innerHTML = ViewProvider.escapeHTML(topic).replace(/\n/g, "<br>");
        }
        static escapeHTML(src) {
            const pre = document.createElement("pre");
            const text = document.createTextNode(src);
            pre.appendChild(text);
            return pre.innerHTML;
        }
        add_event(obj, event_name, event_handle) {
            this.e_nodes.addEventListener(event_name, function (e) {
                event_handle.call(obj, e);
            });
        }
        get_binded_nodeid(element) {
            if (element == null) {
                return null;
            }
            const tagName = element.tagName.toLowerCase();
            if (tagName === "jmnodes" || tagName === "body" || tagName === "html") {
                return null;
            }
            if (tagName === "jmnode" || tagName === "jmexpander") {
                return element.getAttribute("nodeid");
            }
            else {
                return this.get_binded_nodeid(element.parentElement);
            }
        }
        is_expander(element) {
            return element.tagName.toLowerCase() === "jmexpander";
        }
        reset() {
            console.debug("view.reset");
            this.selected_node = null;
            this.clear_lines();
            this.clear_nodes();
            this.reset_theme();
        }
        reset_theme() {
            const theme_name = this.jm.options.theme;
            if (theme_name) {
                this.e_nodes.className = "theme-" + theme_name;
            }
            else {
                this.e_nodes.className = "";
            }
        }
        reset_custom_style() {
            const nodes = this.jm.mind.nodes;
            for (const nodeid in nodes) {
                this.reset_node_custom_style(nodes[nodeid]);
            }
        }
        load() {
            console.debug("view.load");
            this.init_nodes();
        }
        expand_size() {
            const min_size = this.layout.get_min_size();
            const min_width = min_size.w + this.opts.hmargin * 2;
            const min_height = min_size.h + this.opts.vmargin * 2;
            let client_w = this.e_panel.clientWidth;
            let client_h = this.e_panel.clientHeight;
            if (client_w < min_width) {
                client_w = min_width;
            }
            if (client_h < min_height) {
                client_h = min_height;
            }
            this.size.w = client_w;
            this.size.h = client_h;
        }
        init_nodes_size(node) {
            const view_data = node._data.view;
            view_data.width = view_data.element.clientWidth;
            view_data.height = view_data.element.clientHeight;
        }
        init_nodes() {
            const nodes = this.jm.mind.nodes;
            const doc_frag = document.createDocumentFragment();
            for (const nodeid in nodes) {
                this.create_node_element(nodes[nodeid], doc_frag);
            }
            this.e_nodes.appendChild(doc_frag);
            for (const nodeid in nodes) {
                this.init_nodes_size(nodes[nodeid]);
            }
        }
        add_node(node) {
            this.create_node_element(node, this.e_nodes);
            this.init_nodes_size(node);
        }
        create_node_element(node, parent_node) {
            let view_data = node._data.view;
            const d = document.createElement("jmnode");
            if (node.isroot) {
                d.className = "root";
            }
            else {
                const d_e = document.createElement("jmexpander");
                this.setTextToElement(d_e, "-");
                d_e.setAttribute("nodeid", node.id);
                d_e.style.visibility = "hidden";
                parent_node.appendChild(d_e);
                view_data.expander = d_e;
            }
            if (node.topic) {
                if (this.opts.support_html) {
                    $h(d, node.topic);
                }
                else {
                    this.setTextToElement(d, node.topic);
                }
            }
            d.setAttribute("nodeid", node.id);
            d.style.visibility = "hidden";
            this._reset_node_custom_style(d, node.data);
            parent_node.appendChild(d);
            view_data.element = d;
        }
        remove_node(node) {
            if (this.selected_node != null && this.selected_node.id == node.id) {
                this.selected_node = null;
            }
            if (this.editing_node != null && this.editing_node.id == node.id) {
                node._data.view.element.removeChild(this.e_editor);
                this.editing_node = null;
            }
            const children = node.children;
            let i = children.length;
            while (i--) {
                this.remove_node(children[i]);
            }
            if (node._data.view) {
                const element = node._data.view.element;
                const expander = node._data.view.expander;
                this.e_nodes.removeChild(element);
                this.e_nodes.removeChild(expander);
                node._data.view.element = null;
                node._data.view.expander = null;
            }
        }
        update_node(node) {
            const view_data = node._data.view;
            const element = view_data.element;
            if (node.topic) {
                if (this.opts.support_html) {
                    $h(element, node.topic);
                }
                else {
                    this.setTextToElement(element, node.topic);
                }
            }
            view_data.width = element.clientWidth;
            view_data.height = element.clientHeight;
        }
        select_node(node) {
            if (this.selected_node) {
                this.selected_node._data.view.element.className = this.selected_node._data.view.element.className.replace(/\s*selected\b/i, "");
                this.reset_node_custom_style(this.selected_node);
            }
            if (node) {
                this.selected_node = node;
                node._data.view.element.className += " selected";
                this.clear_node_custom_style(node);
            }
        }
        select_clear() {
            this.select_node(null);
        }
        is_editing() {
            return !!this.editing_node;
        }
        calcEditingNodeWidth(topic) {
            const max = Math.max(...topic.split(/\n/).map((it) => it.length));
            const width = Math.ceil(Math.max(max * 2 + 2, 15));
            return width + "ch";
        }
        edit_node_begin(node) {
            if (!node.topic) {
                console.warn("don't edit image nodes");
                return;
            }
            if (this.editing_node != null) {
                this.edit_node_end();
            }
            this.editing_node = node;
            const view_data = node._data.view;
            const element = view_data.element;
            const topic = node.topic;
            this.e_editor.value = topic;
            this.e_editor.style.width = "380px";
            this.e_editor.style.height = topic.split(/\n/).length + "em";
            element.innerHTML = "";
            element.appendChild(this.e_editor);
            element.style.zIndex = "5";
            this.e_editor.focus();
            this.e_editor.select();
            setTimeout(this.adjustEditorElementSize.bind(this), 0);
        }
        edit_node_end() {
            if (this.editing_node != null) {
                const node = this.editing_node;
                this.editing_node = null;
                const view_data = node._data.view;
                const element = view_data.element;
                const topic = this.e_editor.value;
                element.style.zIndex = "auto";
                element.removeChild(this.e_editor);
                if (is_empty$1(topic) || node.topic === topic) {
                    if (this.opts.support_html) {
                        $h(element, node.topic);
                    }
                    else {
                        this.setTextToElement(element, node.topic);
                    }
                    setTimeout(() => {
                        view_data.width = element.clientWidth;
                        view_data.height = element.clientHeight;
                        this.layout.layout();
                        this.show(false);
                    }, 0);
                }
                else {
                    this.jm.update_node(node.id, topic);
                }
            }
        }
        get_view_offset() {
            const bounds = this.layout.bounds;
            const _x = (this.size.w - bounds.e - bounds.w) / 2;
            const _y = this.size.h / 2;
            return { x: _x, y: _y };
        }
        resize() {
            this.graph.set_size(1, 1);
            this.e_nodes.style.width = "1px";
            this.e_nodes.style.height = "1px";
            this.expand_size();
            this._show();
        }
        _show() {
            this.graph.set_size(this.size.w, this.size.h);
            this.e_nodes.style.width = this.size.w + "px";
            this.e_nodes.style.height = this.size.h + "px";
            this.show_nodes();
            this.show_lines();
            //this.layout.cache_valid = true;
            this.jm.invoke_event_handle(2 /* RESIZE */, { data: [] });
            this.jm.draggable.resize();
        }
        zoomIn() {
            return this.setZoom(this.actualZoom + this.zoomStep);
        }
        zoomOut() {
            return this.setZoom(this.actualZoom - this.zoomStep);
        }
        setZoom(zoom) {
            if (zoom < this.minZoom || zoom > this.maxZoom) {
                return false;
            }
            this.actualZoom = zoom;
            for (let i = 0; i < this.e_panel.children.length; i++) {
                this.e_panel.children[i].style.transform = "scale(" + zoom + ")";
            }
            this.show(true);
            return true;
        }
        _center_root() {
            // center root node
            const outer_w = this.e_panel.clientWidth;
            const outer_h = this.e_panel.clientHeight;
            if (this.size.w > outer_w) {
                const _offset = this.get_view_offset();
                this.e_panel.scrollLeft = _offset.x - outer_w / 2;
            }
            if (this.size.h > outer_h) {
                this.e_panel.scrollTop = (this.size.h - outer_h) / 2;
            }
        }
        show(keep_center) {
            console.debug("view.show");
            this.expand_size();
            this._show();
            if (keep_center) {
                this._center_root();
            }
        }
        relayout() {
            this.expand_size();
            this._show();
        }
        save_location(node) {
            const vd = node._data.view;
            vd._saved_location = {
                x: parseInt(vd.element.style.left) - this.e_panel.scrollLeft,
                y: parseInt(vd.element.style.top) - this.e_panel.scrollTop,
            };
        }
        restore_location(node) {
            const vd = node._data.view;
            this.e_panel.scrollLeft =
                parseInt(vd.element.style.left) - vd._saved_location.x;
            this.e_panel.scrollTop =
                parseInt(vd.element.style.top) - vd._saved_location.y;
        }
        clear_nodes() {
            const mind = this.jm.mind;
            if (mind == null) {
                return;
            }
            const nodes = mind.nodes;
            let node = null;
            for (const nodeid in nodes) {
                node = nodes[nodeid];
                node._data.view.element = null;
                node._data.view.expander = null;
            }
            this.e_nodes.innerHTML = "";
        }
        show_nodes() {
            const nodes = this.jm.mind.nodes;
            let node = null;
            let node_element = null;
            let expander = null;
            let p_expander = null;
            let expander_text = "-";
            let view_data = null;
            const _offset = this.get_view_offset();
            for (const nodeid in nodes) {
                node = nodes[nodeid];
                view_data = node._data.view;
                node_element = view_data.element;
                expander = view_data.expander;
                if (!this.layout.is_visible(node)) {
                    node_element.style.display = "none";
                    expander.style.display = "none";
                    continue;
                }
                this.reset_node_custom_style(node);
                const p = this.layout.get_node_point(node);
                view_data.abs_x = _offset.x + p.x;
                view_data.abs_y = _offset.y + p.y;
                node_element.style.left = _offset.x + p.x + "px";
                node_element.style.top = _offset.y + p.y + "px";
                node_element.style.display = "";
                node_element.style.visibility = "visible";
                if (!node.isroot && node.children.length > 0) {
                    expander_text = node.expanded ? "-" : "+";
                    p_expander = this.layout.get_expander_point(node);
                    expander.style.left = _offset.x + p_expander.x + "px";
                    expander.style.top = _offset.y + p_expander.y + "px";
                    expander.style.display = "";
                    expander.style.visibility = "visible";
                    this.setTextToElement(expander, expander_text);
                }
                // hide expander while all children have been removed
                if (!node.isroot && node.children.length == 0) {
                    expander.style.display = "none";
                    expander.style.visibility = "hidden";
                }
            }
        }
        reset_node_custom_style(node) {
            this._reset_node_custom_style(node._data.view.element, node.data);
        }
        _reset_node_custom_style(node_element, node_data) {
            if ("background-color" in node_data) {
                node_element.style.backgroundColor = node_data["background-color"];
            }
            if ("foreground-color" in node_data) {
                node_element.style.color = node_data["foreground-color"];
            }
            if ("width" in node_data) {
                node_element.style.width = node_data["width"] + "px";
            }
            if ("height" in node_data) {
                node_element.style.height = node_data["height"] + "px";
            }
            if ("font-size" in node_data) {
                node_element.style.fontSize = node_data["font-size"] + "px";
            }
            if ("font-weight" in node_data) {
                node_element.style.fontWeight = node_data["font-weight"];
            }
            if ("font-style" in node_data) {
                node_element.style.fontStyle = node_data["font-style"];
            }
            if ("background-image" in node_data) {
                const backgroundImage = node_data["background-image"];
                if (backgroundImage.startsWith("data") &&
                    node_data["width"] &&
                    node_data["height"]) {
                    const img = new Image();
                    img.onload = function () {
                        const c = document.createElement("canvas");
                        c.width = node_element.clientWidth;
                        c.height = node_element.clientHeight;
                        const img = this;
                        if (c.getContext) {
                            const ctx = c.getContext("2d");
                            ctx.drawImage(img, 2, 2, node_element.clientWidth, node_element.clientHeight);
                            const scaledImageData = c.toDataURL();
                            node_element.style.backgroundImage = "url(" + scaledImageData + ")";
                        }
                    };
                    img.src = backgroundImage;
                }
                else {
                    node_element.style.backgroundImage = "url(" + backgroundImage + ")";
                }
                node_element.style.backgroundSize = "99%";
                if ("background-rotation" in node_data) {
                    node_element.style.transform =
                        "rotate(" + node_data["background-rotation"] + "deg)";
                }
            }
        }
        clear_node_custom_style(node) {
            const node_element = node._data.view.element;
            node_element.style.backgroundColor = "";
            node_element.style.color = "";
        }
        clear_lines() {
            this.graph.clear();
        }
        show_lines() {
            this.clear_lines();
            const nodes = this.jm.mind.nodes;
            let node = null;
            let pin = null;
            let pout = null;
            const _offset = this.get_view_offset();
            for (const nodeid in nodes) {
                node = nodes[nodeid];
                if (node.isroot) {
                    continue;
                }
                if ("visible" in node._data.layout && !node._data.layout.visible) {
                    continue;
                }
                pin = this.layout.get_node_point_in(node);
                pout = this.layout.get_node_point_out(node.parent);
                this.graph.draw_line(pout, pin, _offset);
            }
        }
    }

    // noinspection JSUnfilteredForInLoop,JSUnusedGlobalSymbols
    // Generate new ID of the node
    function generateId() {
        return (new Date().getTime().toString(16) + Math.random().toString(16).substr(2)).substr(2, 16);
    }
    class ShortcutProvider {
        constructor(jm, enable, mapping, handles, newid = generateId) {
            this.jm = jm;
            this.enable = enable;
            this.mapping = mapping;
            this.handles = handles;
            this._newid = newid;
            this._mapping = {};
        }
        init() {
            // TODO do not hook to the global object.
            // this.jm.options.container.addEventListener('keydown',
            //     this.handler.bind(this))
            document.addEventListener("keydown", this.handler.bind(this));
            this.handles["addchild"] = this.handle_addchild;
            this.handles["addbrother"] = this.handle_addbrother;
            this.handles["editnode"] = this.handle_editnode;
            this.handles["delnode"] = this.handle_delnode;
            this.handles["toggle"] = this.handle_toggle;
            this.handles["up"] = this.handle_up;
            this.handles["down"] = this.handle_down;
            this.handles["left"] = this.handle_left;
            this.handles["right"] = this.handle_right;
            this.handles["undo"] = this.handle_undo;
            for (const handle in this.mapping) {
                if (!!this.mapping[handle] && handle in this.handles) {
                    this._mapping[this.mapping[handle]] = this.handles[handle];
                }
            }
        }
        enable_shortcut() {
            this.enable = true;
        }
        disable_shortcut() {
            this.enable = false;
        }
        handler(e) {
            // noinspection JSDeprecatedSymbols
            if (e.which == 9) {
                e.preventDefault();
            } //prevent tab to change focus in browser
            if (this.jm.view.is_editing()) {
                return;
            }
            if (!this.enable) {
                return true;
            }
            // noinspection JSDeprecatedSymbols
            const kc = e.keyCode +
                ((e.metaKey ? 1 : 0) << 13) +
                ((e.ctrlKey ? 1 : 0) << 12) +
                ((e.altKey ? 1 : 0) << 11) +
                ((e.shiftKey ? 1 : 0) << 10);
            if (kc in this._mapping) {
                const container = this.jm.options.container;
                const isConnected = container.isConnected;
                // offsetParent=${container.offsetParent}
                // VISIBILITY=${getComputedStyle(container).visibility}
                //     TOP=${getComputedStyle(container).top}
                if (isConnected) {
                    console.log(`Invoking shortcut handler: ID=${this.jm.mind.id}/${this.jm.id} connected=${isConnected}
      target=${e.target}
      `);
                    this._mapping[kc].call(this, this.jm, e);
                    return false;
                }
            }
        }
        handle_addchild(_jm) {
            const selected_node = _jm.get_selected_node();
            if (selected_node) {
                const nodeid = this._newid();
                const node = _jm.add_node(selected_node, nodeid, "New Node", null);
                if (node) {
                    _jm.select_node(node);
                    _jm.begin_edit(node);
                }
            }
            return false;
        }
        handle_addbrother(jm, e) {
            e.preventDefault();
            const selected_node = jm.get_selected_node();
            if (!!selected_node && !selected_node.isroot) {
                const nodeid = this._newid();
                const node = jm.insert_node_after(selected_node, nodeid, "New Node", null);
                if (node) {
                    jm.select_node(node);
                    jm.begin_edit(node);
                }
            }
            return false;
        }
        handle_editnode(_jm) {
            const selected_node = _jm.get_selected_node();
            if (selected_node) {
                _jm.begin_edit(selected_node);
            }
            return false;
        }
        handle_delnode(_jm) {
            const selected_node = _jm.get_selected_node();
            if (!!selected_node && !selected_node.isroot) {
                _jm.select_node(selected_node.parent);
                _jm.remove_node(selected_node);
            }
            return false;
        }
        handle_toggle(_jm, e) {
            const selected_node = _jm.get_selected_node();
            if (selected_node) {
                _jm.toggle_node(selected_node);
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        handle_up(_jm, e) {
            const selected_node = _jm.get_selected_node();
            if (selected_node) {
                let up_node = _jm.find_node_before(selected_node);
                if (!up_node) {
                    const np = _jm.find_node_before(selected_node.parent);
                    if (!!np && np.children.length > 0) {
                        up_node = np.children[np.children.length - 1];
                    }
                }
                if (up_node) {
                    _jm.select_node(up_node);
                }
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        handle_down(_jm, e) {
            const selected_node = _jm.get_selected_node();
            if (selected_node) {
                let down_node = _jm.find_node_after(selected_node);
                if (!down_node) {
                    const np = _jm.find_node_after(selected_node.parent);
                    if (!!np && np.children.length > 0) {
                        down_node = np.children[0];
                    }
                }
                if (down_node) {
                    _jm.select_node(down_node);
                }
                e.stopPropagation();
                e.preventDefault();
            }
            return false;
        }
        handle_left(_jm, e) {
            this._handle_direction(_jm, e, -1 /* LEFT */);
            return false;
        }
        handle_right(_jm, e) {
            this._handle_direction(_jm, e, 1 /* RIGHT */);
            return false;
        }
        _handle_direction(_jm, e, d) {
            let children;
            const selected_node = _jm.get_selected_node();
            let node = null;
            if (selected_node) {
                if (selected_node.isroot) {
                    const c = selected_node.children;
                    children = [];
                    for (let i = 0; i < c.length; i++) {
                        if (c[i].direction === d) {
                            children.push(i);
                        }
                    }
                    node = c[children[Math.floor((children.length - 1) / 2)]];
                }
                else if (selected_node.direction === d) {
                    children = selected_node.children;
                    const childrencount = children.length;
                    if (childrencount > 0) {
                        node = children[Math.floor((childrencount - 1) / 2)];
                    }
                }
                else {
                    node = selected_node.parent;
                }
                if (node) {
                    _jm.select_node(node);
                }
                e.stopPropagation();
                e.preventDefault();
            }
        }
        handle_undo(_jm, e) {
            console.log("UNDO!");
            _jm.undo();
            e.stopPropagation();
            e.preventDefault();
            return false;
        }
    }

    // noinspection JSUnfilteredForInLoop
    const options = {
        line_width: 5,
        lookup_delay: 500,
        lookup_interval: 80,
    };
    class Draggable {
        constructor(jm) {
            this.jm = jm;
            this.e_canvas = null;
            this.canvas_ctx = null;
            this.shadow = null;
            this.shadow_w = 0;
            this.shadow_h = 0;
            this.active_node = null;
            this.target_node = null;
            this.target_direct = null;
            this.client_w = 0;
            this.client_h = 0;
            this.offset_x = 0;
            this.offset_y = 0;
            this.hlookup_delay = 0;
            this.hlookup_timer = 0;
            this.capture = false;
            this.moved = false;
        }
        init() {
            this._create_canvas();
            this._create_shadow();
            this._event_bind();
        }
        resize() {
            this.jm.view.e_nodes.appendChild(this.shadow);
            this.e_canvas.width = this.jm.view.size.w;
            this.e_canvas.height = this.jm.view.size.h;
        }
        _create_canvas() {
            const c = document.createElement("canvas");
            this.jm.view.e_panel.appendChild(c);
            const ctx = c.getContext("2d");
            this.e_canvas = c;
            this.canvas_ctx = ctx;
        }
        _create_shadow() {
            const s = document.createElement("jmnode");
            s.style.visibility = "hidden";
            s.style.zIndex = "3";
            s.style.cursor = "move";
            s.style.opacity = "0.7";
            this.shadow = s;
        }
        reset_shadow(el) {
            const s = this.shadow.style;
            this.shadow.innerHTML = el.innerHTML;
            s.left = el.style.left;
            s.top = el.style.top;
            s.width = el.style.width;
            s.height = el.style.height;
            s.backgroundImage = el.style.backgroundImage;
            s.backgroundSize = el.style.backgroundSize;
            s.transform = el.style.transform;
            this.shadow_w = this.shadow.clientWidth;
            this.shadow_h = this.shadow.clientHeight;
        }
        show_shadow() {
            if (!this.moved) {
                this.shadow.style.visibility = "visible";
            }
        }
        hide_shadow() {
            this.shadow.style.visibility = "hidden";
        }
        _magnet_shadow(node) {
            if (node) {
                this.canvas_ctx.lineWidth = options.line_width;
                this.canvas_ctx.strokeStyle = "rgba(0,0,0,0.3)";
                this.canvas_ctx.lineCap = "round";
                this._clear_lines();
                this._canvas_lineto(node.sp.x, node.sp.y, node.np.x, node.np.y);
            }
        }
        _clear_lines() {
            this.canvas_ctx.clearRect(0, 0, this.jm.view.size.w, this.jm.view.size.h);
        }
        _canvas_lineto(x1, y1, x2, y2) {
            this.canvas_ctx.beginPath();
            this.canvas_ctx.moveTo(x1, y1);
            this.canvas_ctx.lineTo(x2, y2);
            this.canvas_ctx.stroke();
        }
        _lookup_close_node() {
            const root = this.jm.get_root();
            const root_location = root.get_location();
            const root_size = root.get_size();
            const root_x = root_location.x + root_size.w / 2;
            const sw = this.shadow_w;
            const sh = this.shadow_h;
            const sx = this.shadow.offsetLeft;
            const sy = this.shadow.offsetTop;
            let ns, nl;
            const direct = sx + sw / 2 >= root_x ? 1 /* RIGHT */ : -1 /* LEFT */;
            const nodes = this.jm.mind.nodes;
            let node = null;
            let min_distance = Number.MAX_VALUE;
            let distance = 0;
            let closest_node = null;
            let closest_p = null;
            let shadow_p = null;
            for (const nodeid in nodes) {
                let np, sp;
                node = nodes[nodeid];
                if (node.isroot || node.direction == direct) {
                    if (node.id == this.active_node.id) {
                        continue;
                    }
                    ns = node.get_size();
                    nl = node.get_location();
                    if (direct == 1 /* RIGHT */) {
                        if (sx - nl.x - ns.w <= 0) {
                            continue;
                        }
                        distance =
                            Math.abs(sx - nl.x - ns.w) +
                                Math.abs(sy + sh / 2 - nl.y - ns.h / 2);
                        np = { x: nl.x + ns.w - options.line_width, y: nl.y + ns.h / 2 };
                        sp = { x: sx + options.line_width, y: sy + sh / 2 };
                    }
                    else {
                        if (nl.x - sx - sw <= 0) {
                            continue;
                        }
                        distance =
                            Math.abs(sx + sw - nl.x) + Math.abs(sy + sh / 2 - nl.y - ns.h / 2);
                        np = { x: nl.x + options.line_width, y: nl.y + ns.h / 2 };
                        sp = { x: sx + sw - options.line_width, y: sy + sh / 2 };
                    }
                    if (distance < min_distance) {
                        closest_node = node;
                        closest_p = np;
                        shadow_p = sp;
                        min_distance = distance;
                    }
                }
            }
            if (closest_node) {
                return {
                    node: closest_node,
                    direction: direct,
                    sp: shadow_p,
                    np: closest_p,
                };
            }
            else {
                return null;
            }
        }
        lookup_close_node() {
            const node_data = this._lookup_close_node();
            if (node_data) {
                this._magnet_shadow(node_data);
                this.target_node = node_data.node;
                this.target_direct = node_data.direction;
            }
        }
        _event_bind() {
            // TODO bind に置換可能っぽい
            const jd = this;
            const container = this.jm.view.container;
            container.addEventListener("mousedown", function (e) {
                jd.dragstart.call(jd, e);
            }, false);
            container.addEventListener("mousemove", function (e) {
                jd.drag.call(jd, e);
            }, false);
            container.addEventListener("mouseup", function (e) {
                jd.dragend.call(jd, e);
            }, false);
            container.addEventListener("touchstart", function (e) {
                jd.dragstart.call(jd, e);
            }, false);
            container.addEventListener("touchmove", function (e) {
                jd.drag.call(jd, e);
            }, false);
            container.addEventListener("touchend", function (e) {
                jd.dragend.call(jd, e);
            }, false);
        }
        dragstart(e) {
            if (!this.jm.get_editable()) {
                return;
            }
            if (this.capture) {
                return;
            }
            this.active_node = null;
            const jview = this.jm.view;
            const el = e.target;
            if (el.tagName.toLowerCase() !== "jmnode") {
                return;
            }
            const nodeid = jview.get_binded_nodeid(el);
            if (nodeid) {
                const node = this.jm.get_node(nodeid);
                if (!node.isroot) {
                    this.reset_shadow(el);
                    this.active_node = node;
                    this.offset_x = e.clientX - el.offsetLeft;
                    this.offset_y = e.clientY - el.offsetTop;
                    // this.offset_x = (e.clientX || e.touches[0].clientX) - el.offsetLeft;
                    // this.offset_y = (e.clientY || e.touches[0].clientY) - el.offsetTop;
                    this.client_hw = Math.floor(el.clientWidth / 2);
                    this.client_hh = Math.floor(el.clientHeight / 2);
                    if (this.hlookup_delay !== 0) {
                        window.clearTimeout(this.hlookup_delay);
                    }
                    if (this.hlookup_timer !== 0) {
                        window.clearInterval(this.hlookup_timer);
                    }
                    const jd = this;
                    this.hlookup_delay = window.setTimeout(function () {
                        jd.hlookup_delay = 0;
                        jd.hlookup_timer = window.setInterval(function () {
                            jd.lookup_close_node.call(jd);
                        }, options.lookup_interval);
                    }, options.lookup_delay);
                    this.capture = true;
                }
            }
        }
        drag(e) {
            if (!this.jm.get_editable()) {
                return;
            }
            if (this.capture) {
                e.preventDefault();
                this.show_shadow();
                this.moved = true;
                window.getSelection().removeAllRanges();
                const px = e.clientX - this.offset_x;
                const py = e.clientY - this.offset_y;
                // const px = (e.clientX || e.touches[0].clientX) - this.offset_x;
                // const py = (e.clientY || e.touches[0].clientY) - this.offset_y;
                this.shadow.style.left = px + "px";
                this.shadow.style.top = py + "px";
                window.getSelection().removeAllRanges();
            }
        }
        dragend() {
            if (!this.jm.get_editable()) {
                return;
            }
            if (this.capture) {
                if (this.hlookup_delay !== 0) {
                    window.clearTimeout(this.hlookup_delay);
                    this.hlookup_delay = 0;
                    this._clear_lines();
                }
                if (this.hlookup_timer !== 0) {
                    window.clearInterval(this.hlookup_timer);
                    this.hlookup_timer = 0;
                    this._clear_lines();
                }
                if (this.moved) {
                    const src_node = this.active_node;
                    const target_node = this.target_node;
                    const target_direct = this.target_direct;
                    this.move_node(src_node, target_node, target_direct);
                }
                this.hide_shadow();
            }
            this.moved = false;
            this.capture = false;
        }
        move_node(src_node, target_node, target_direct) {
            console.log(`jsMind.dgraggable.move_node: ${src_node} ${target_node} ${target_direct}`);
            const shadow_h = this.shadow.offsetTop;
            if (!!target_node &&
                !!src_node &&
                !MindNode.inherited(src_node, target_node)) {
                console.log(`let's move!`);
                // lookup before_node
                const sibling_nodes = target_node.children;
                let sc = sibling_nodes.length;
                let node = null;
                let delta_y = Number.MAX_VALUE;
                let node_before = null;
                let beforeid = "_last_";
                while (sc--) {
                    node = sibling_nodes[sc];
                    if (node.direction === target_direct && node.id !== src_node.id) {
                        const dy = node.get_location().y - shadow_h;
                        if (dy > 0 && dy < delta_y) {
                            delta_y = dy;
                            node_before = node;
                            beforeid = "_first_";
                        }
                    }
                }
                if (node_before) {
                    beforeid = node_before.id;
                }
                console.log(`Calling jm.move_node: ${src_node.id}, ${beforeid}, ${target_node.id}, ${target_direct}`);
                this.jm.move_node(src_node.id, beforeid, target_node.id, target_direct);
                // this.jm.move_node(src_node.id, beforeid, target_node.id, target_direct);
            }
            this.active_node = null;
            this.target_node = null;
            this.target_direct = null;
        }
    }

    class UndoManager {
        constructor(jm, undoStackLimit = 10000) {
            this._jm = jm;
            this.undoStack = [];
            this.undoStackLimit = undoStackLimit;
        }
        init() {
            this._jm.add_event_listener(5 /* BEFORE_EDIT */, (data) => {
                if (this.undoStack.length > this.undoStackLimit) {
                    console.log(`UndoManager: callback event. too much stacks.`);
                    this.undoStack.shift();
                }
                console.log(`UndoManager: callback event pushing. ${data.evt}`);
                this.undoStack.push([data.evt, this._jm.get_data("node_tree")]);
            });
        }
        undo() {
            const item = this.undoStack.pop();
            if (item) {
                const [evt, data] = item;
                console.log(`UndoManager: undo. evt=${evt} data=${data}`);
                this._jm.show(data);
            }
            else {
                console.log(`UndoManager: undo. stack is empty.`);
            }
        }
    }

    // noinspection JSUnusedGlobalSymbols
    function is_empty(s) {
        if (!s) {
            return true;
        }
        return s.replace(/\s*/, "").length == 0;
    }
    const DEFAULT_OPTIONS = {
        container: "",
        editable: false,
        theme: null,
        mode: "full",
        support_html: true,
        view: {
            hmargin: 100,
            vmargin: 50,
            line_width: 2,
            line_color: "#555",
        },
        layout: {
            hspace: 30,
            vspace: 20,
            pspace: 13,
        },
        default_event_handle: {
            enable_mousedown_handle: true,
            enable_click_handle: true,
            enable_dblclick_handle: true,
        },
        shortcut: {
            enable: true,
            handles: {},
            mapping: {
                addchild: 45,
                addbrother: 13,
                editnode: 113,
                delnode: 46,
                toggle: 32,
                left: 37,
                up: 38,
                right: 39,
                down: 40, // Down
            },
        },
    };
    class JsMind {
        constructor(id, options) {
            let opts = Object.assign({}, DEFAULT_OPTIONS);
            opts = Object.assign(opts, options);
            if (!opts.container) {
                console.error("the options.container should not be null or empty.");
                return;
            }
            this.options = opts;
            this.inited = false;
            this.mind = null; // TODO original では null が入っていた
            this.event_handles_map = {
                "1": [],
                "2": [],
                "3": [],
                "4": [],
                "5": [],
            };
            this.id = id;
            this.init();
        }
        init() {
            if (this.inited) {
                return;
            }
            this.inited = true;
            const opts = this.options;
            const opts_view = {
                container: opts.container,
                support_html: opts.support_html,
                hmargin: opts.view.hmargin,
                vmargin: opts.view.vmargin,
                line_width: opts.view.line_width,
                line_color: opts.view.line_color,
            };
            // create instance of function provider
            this.data = new DataProvider(this);
            this.layout = new LayoutProvider(this, opts.mode, opts.layout.hspace, opts.layout.vspace, opts.layout.pspace);
            this.view = new ViewProvider(this, opts_view);
            this.shortcut = new ShortcutProvider(this, opts.shortcut.enable, opts.shortcut.mapping, opts.shortcut.handles);
            this.draggable = new Draggable(this);
            this.undo_manager = new UndoManager(this);
            this.layout.init();
            this.view.init();
            this.shortcut.init();
            this.draggable.init();
            this.undo_manager.init();
            this._event_bind();
        }
        enable_edit() {
            this.options.editable = true;
        }
        disable_edit() {
            this.options.editable = false;
        }
        // call enable_event_handle('dblclick')
        // options are 'mousedown', 'click', 'dblclick'
        enable_event_handle(event_handle) {
            this.options.default_event_handle["enable_" + event_handle + "_handle"] = true;
        }
        // call disable_event_handle('dblclick')
        // options are 'mousedown', 'click', 'dblclick'
        disable_event_handle(event_handle) {
            this.options.default_event_handle["enable_" + event_handle + "_handle"] = false;
        }
        get_editable() {
            return this.options.editable;
        }
        set_theme(theme) {
            const theme_old = this.options.theme;
            this.options.theme = theme ? theme : null;
            if (theme_old !== this.options.theme) {
                this.view.reset_theme();
                this.view.reset_custom_style();
            }
        }
        _event_bind() {
            this.view.e_nodes.addEventListener("mousedown", (e: Event) => {
                this.mousedown_handle.bind(this).call(this, e);
            });
            this.view.e_nodes.addEventListener("click", (e: Event) => {
                this.click_handle.bind(this).call(this, e);
            });
            this.view.e_nodes.addEventListener("dblclick", (e: Event) => {
                this.dblclick_handle.bind(this).call(this, e);
            });
        }
        mousedown_handle(e) {
            if (!this.options.default_event_handle["enable_mousedown_handle"]) {
                return;
            }
            const element = e.target;
            const nodeid = this.view.get_binded_nodeid(element);
            if (nodeid) {
                if (element.tagName.toLowerCase() === "jmnode") {
                    const the_node = this.get_node(nodeid);
                    if (!the_node) {
                        console.error("the node[id=" + nodeid + "] can not be found.");
                        return;
                    }
                    else {
                        return this.select_node(the_node);
                    }
                }
            }
            else {
                this.select_clear();
            }
        }
        click_handle(e) {
            if (!this.options.default_event_handle["enable_click_handle"]) {
                return;
            }
            const element = e.target;
            const isexpander = this.view.is_expander(element);
            if (isexpander) {
                const nodeid = this.view.get_binded_nodeid(element);
                if (nodeid) {
                    const the_node = this.get_node(nodeid);
                    if (!the_node) {
                        console.error("the node[id=" + nodeid + "] can not be found.");
                        return;
                    }
                    else {
                        return this.toggle_node(the_node);
                    }
                }
            }
        }
        dblclick_handle(e) {
            if (!this.options.default_event_handle["enable_dblclick_handle"]) {
                return;
            }
            if (this.get_editable()) {
                const element = e.target;
                const nodeid = this.view.get_binded_nodeid(element);
                if (nodeid) {
                    if (nodeid) {
                        const the_node = this.get_node(nodeid);
                        if (!the_node) {
                            console.error("the node[id=" + nodeid + "] can not be found.");
                            return;
                        }
                        else {
                            return this.begin_edit(the_node);
                        }
                    }
                }
            }
        }
        begin_edit(node) {
            if (this.get_editable()) {
                this.view.edit_node_begin(node);
            }
            else {
                console.error("fail, this mind map is not editable.");
            }
        }
        end_edit() {
            this.view.edit_node_end();
        }
        toggle_node(node) {
            if (node.isroot) {
                return;
            }
            this.view.save_location(node);
            this.layout.toggle_node(node);
            this.view.relayout();
            this.view.restore_location(node);
        }
        expand_node(node) {
            if (node.isroot) {
                return;
            }
            this.view.save_location(node);
            this.layout.expand_node(node);
            this.view.relayout();
            this.view.restore_location(node);
        }
        collapse_node(node) {
            if (node.isroot) {
                return;
            }
            this.view.save_location(node);
            this.layout.collapse_node(node);
            this.view.relayout();
            this.view.restore_location(node);
        }
        expand_all() {
            this.layout.expand_all();
            this.view.relayout();
        }
        collapse_all() {
            this.layout.collapse_all();
            this.view.relayout();
        }
        expand_to_depth(depth) {
            this.layout.expand_to_depth(depth, null, null);
            this.view.relayout();
        }
        _reset() {
            this.view.reset();
            this.layout.reset();
        }
        _show(mind) {
            this.mind = this.data.load(mind, this.id);
            if (!this.mind) {
                console.error("data.load error");
                return;
            }
            else {
                console.debug("data.load ok");
            }
            console.log(`JsMind.show id=${this.id}`);
            this.view.load();
            console.debug("view.load ok");
            this.layout.layout();
            console.debug("layout.layout ok");
            this.view.show(true);
            console.debug("view.show ok");
            this.invoke_event_handle(1 /* SHOW */, { data: [mind] });
        }
        show(mind) {
            this._reset();
            this._show(mind);
        }
        get_meta() {
            return {
                name: this.mind.name,
                author: this.mind.author,
                version: this.mind.version,
            };
        }
        get_data(data_format) {
            return this.data.get_data(data_format);
        }
        get_root() {
            return this.mind.root;
        }
        get_node(nodeid) {
            return this.mind.get_node(nodeid);
        }
        add_node(parent_node, nodeid, topic, data) {
            if (this.get_editable()) {
                this.invoke_event_handle(5 /* BEFORE_EDIT */, {
                    evt: "add_node",
                    data: [parent_node.id, nodeid, topic, data],
                    node: nodeid,
                });
                const node = this.mind.add_node(parent_node, nodeid, topic, data, null, null, null);
                if (node) {
                    this.view.add_node(node);
                    this.layout.layout();
                    this.view.show(false);
                    this.view.reset_node_custom_style(node);
                    this.expand_node(parent_node);
                    this.invoke_event_handle(3 /* AFTER_EDIT */, {
                        evt: "add_node",
                        data: [parent_node.id, nodeid, topic, data],
                        node: nodeid,
                    });
                }
                return node;
            }
            else {
                console.error("fail, this mind map is not editable");
                return null;
            }
        }
        insert_node_before(node_before, nodeid, topic, data) {
            if (this.get_editable()) {
                const beforeid = node_before.id;
                this.invoke_event_handle(5 /* BEFORE_EDIT */, {
                    evt: "insert_node_before",
                    data: [beforeid, nodeid, topic, data],
                    node: nodeid,
                });
                const node = this.mind.insert_node_before(node_before, nodeid, topic, data);
                if (node) {
                    this.view.add_node(node);
                    this.layout.layout();
                    this.view.show(false);
                    this.invoke_event_handle(3 /* AFTER_EDIT */, {
                        evt: "insert_node_before",
                        data: [beforeid, nodeid, topic, data],
                        node: nodeid,
                    });
                }
                return node;
            }
            else {
                console.error("fail, this mind map is not editable");
                return null;
            }
        }
        insert_node_after(node_after, nodeid, topic, data) {
            if (this.get_editable()) {
                const afterid = node_after.id;
                const node = this.mind.insert_node_after(node_after, nodeid, topic, data);
                if (node) {
                    this.invoke_event_handle(5 /* BEFORE_EDIT */, {
                        evt: "insert_node_after",
                        data: [afterid, nodeid, topic, data],
                        node: nodeid,
                    });
                    this.view.add_node(node);
                    this.layout.layout();
                    this.view.show(false);
                    this.invoke_event_handle(3 /* AFTER_EDIT */, {
                        evt: "insert_node_after",
                        data: [afterid, nodeid, topic, data],
                        node: nodeid,
                    });
                }
                return node;
            }
            else {
                console.error("fail, this mind map is not editable");
                return null;
            }
        }
        remove_node(node) {
            if (this.get_editable()) {
                if (node.isroot) {
                    console.error("fail, can not remove root node");
                    return false;
                }
                const nodeid = node.id;
                const parentid = node.parent.id;
                this.invoke_event_handle(5 /* BEFORE_EDIT */, {
                    evt: "remove_node",
                    data: [nodeid],
                    node: parentid,
                });
                const parent_node = this.get_node(parentid);
                const nextSelectedNode = this.findUpperBrotherOrParentNode(parent_node, nodeid);
                this.view.save_location(parent_node);
                this.view.remove_node(node);
                this.mind.remove_node(node);
                this.layout.layout();
                this.view.show(false);
                if (parent_node.children.length > 0) {
                    this.mind.selected = nextSelectedNode;
                    this.view.select_node(nextSelectedNode);
                }
                this.view.restore_location(parent_node);
                this.invoke_event_handle(3 /* AFTER_EDIT */, {
                    evt: "remove_node",
                    data: [nodeid],
                    node: parentid,
                });
                return true;
            }
            else {
                console.error("fail, this mind map is not editable");
                return false;
            }
        }
        findUpperBrotherOrParentNode(parent_node, target_node_id) {
            const children = parent_node.children;
            for (let i = 0; i < children.length; i++) {
                if (children[i].id == target_node_id) {
                    if (i == 0) {
                        return parent_node;
                    }
                    else {
                        return children[i - 1];
                    }
                }
            }
            return parent_node; // return
        }
        // set topic to the node
        update_node(nodeid, topic) {
            if (this.get_editable()) {
                if (is_empty(topic)) {
                    console.warn("fail, topic can not be empty");
                    return;
                }
                const node = this.get_node(nodeid);
                if (node) {
                    this.invoke_event_handle(5 /* BEFORE_EDIT */, {
                        evt: "update_node",
                        data: [nodeid, topic],
                        node: nodeid,
                    });
                    if (node.topic === topic) {
                        console.info("nothing changed");
                        this.view.update_node(node);
                        return;
                    }
                    node.topic = topic;
                    this.view.update_node(node);
                    this.layout.layout();
                    this.view.show(false);
                    this.invoke_event_handle(3 /* AFTER_EDIT */, {
                        evt: "update_node",
                        data: [nodeid, topic],
                        node: nodeid,
                    });
                }
                else {
                    console.warn(`Unknown node: ${nodeid}`);
                }
            }
            else {
                console.error("fail, this mind map is not editable");
                return;
            }
        }
        move_node(nodeid, beforeid, parentid, direction) {
            console.log(`jm.move_node: ${nodeid} ${beforeid} ${parentid} ${direction}`);
            if (this.get_editable()) {
                const the_node = this.get_node(nodeid);
                if (!the_node) {
                    console.error("the node[id=" + nodeid + "] can not be found.");
                    return;
                }
                else {
                    this.invoke_event_handle(5 /* BEFORE_EDIT */, {
                        evt: "move_node",
                        data: [nodeid, beforeid, parentid, direction],
                        node: nodeid,
                    });
                    const node = this.mind.move_node(the_node, beforeid, parentid, direction);
                    if (node) {
                        this.view.update_node(node);
                        this.layout.layout();
                        this.view.show(false);
                        this.invoke_event_handle(3 /* AFTER_EDIT */, {
                            evt: "move_node",
                            data: [nodeid, beforeid, parentid, direction],
                            node: nodeid,
                        });
                    }
                }
            }
            else {
                console.error("fail, this mind map is not editable");
                return;
            }
        }
        select_node(node) {
            if (!this.layout.is_visible(node)) {
                return;
            }
            this.mind.selected = node;
            this.view.select_node(node);
            this.invoke_event_handle(4 /* SELECT */, {
                evt: "select_node",
                data: [],
                node: node.id,
            });
        }
        get_selected_node() {
            if (this.mind) {
                return this.mind.selected;
            }
            else {
                return null;
            }
        }
        select_clear() {
            if (this.mind) {
                this.mind.selected = null;
                this.view.select_clear();
            }
        }
        is_node_visible(node) {
            return this.layout.is_visible(node);
        }
        find_node_before(node) {
            if (node.isroot) {
                return null;
            }
            let n = null;
            if (node.parent.isroot) {
                const c = node.parent.children;
                let prev = null;
                let ni = null;
                for (let i = 0; i < c.length; i++) {
                    ni = c[i];
                    if (node.direction === ni.direction) {
                        if (node.id === ni.id) {
                            n = prev;
                        }
                        prev = ni;
                    }
                }
            }
            else {
                n = this.mind.get_node_before(node);
            }
            return n;
        }
        find_node_after(node) {
            if (node.isroot) {
                return null;
            }
            let n = null;
            if (node.parent.isroot) {
                const c = node.parent.children;
                let getthis = false;
                let ni = null;
                for (let i = 0; i < c.length; i++) {
                    ni = c[i];
                    if (node.direction === ni.direction) {
                        if (getthis) {
                            n = ni;
                            break;
                        }
                        if (node.id === ni.id) {
                            getthis = true;
                        }
                    }
                }
            }
            else {
                n = this.mind.get_node_after(node);
            }
            return n;
        }
        resize() {
            this.view.resize();
        }
        // callback(type ,data)
        add_event_listener(eventType, callback) {
            this.event_handles_map[eventType].push(callback);
        }
        invoke_event_handle(type, data) {
            const j = this;
            if (type === 5 /* BEFORE_EDIT */) {
                j._invoke_event_handle(type, data);
            }
            else {
                setTimeout(function () {
                    j._invoke_event_handle(type, data);
                }, 0);
            }
        }
        _invoke_event_handle(type, data) {
            const l = this.event_handles_map[type].length;
            for (let i = 0; i < l; i++) {
                this.event_handles_map[type][i](data);
            }
        }
        undo() {
            this.undo_manager.undo();
        }
    }

    console.log("Loaded browser.ts");

    return JsMind;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
